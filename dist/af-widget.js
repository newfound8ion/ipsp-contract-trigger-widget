var Ef = Object.defineProperty;
var vf = (r, t, e) => t in r ? Ef(r, t, { enumerable: !0, configurable: !0, writable: !0, value: e }) : r[t] = e;
var A = (r, t, e) => (vf(r, typeof t != "symbol" ? t + "" : t, e), e), Po = (r, t, e) => {
  if (!t.has(r))
    throw TypeError("Cannot " + e);
};
var l = (r, t, e) => (Po(r, t, "read from private field"), e ? e.call(r) : t.get(r)), b = (r, t, e) => {
  if (t.has(r))
    throw TypeError("Cannot add the same private member more than once");
  t instanceof WeakSet ? t.add(r) : t.set(r, e);
}, d = (r, t, e, n) => (Po(r, t, "write to private field"), n ? n.call(r, e) : t.set(r, e), e);
var Cs = (r, t, e, n) => ({
  set _(s) {
    d(r, t, s, e);
  },
  get _() {
    return l(r, t, n);
  }
}), O = (r, t, e) => (Po(r, t, "access private method"), e);
import gu, { useState as Un, useEffect as yu } from "react";
var Vo = { exports: {} }, gr = {};
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
var No, ec;
function mu() {
  if (ec)
    return No;
  ec = 1;
  var r = Object.getOwnPropertySymbols, t = Object.prototype.hasOwnProperty, e = Object.prototype.propertyIsEnumerable;
  function n(i) {
    if (i == null)
      throw new TypeError("Object.assign cannot be called with null or undefined");
    return Object(i);
  }
  function s() {
    try {
      if (!Object.assign)
        return !1;
      var i = new String("abc");
      if (i[5] = "de", Object.getOwnPropertyNames(i)[0] === "5")
        return !1;
      for (var o = {}, a = 0; a < 10; a++)
        o["_" + String.fromCharCode(a)] = a;
      var c = Object.getOwnPropertyNames(o).map(function(f) {
        return o[f];
      });
      if (c.join("") !== "0123456789")
        return !1;
      var u = {};
      return "abcdefghijklmnopqrst".split("").forEach(function(f) {
        u[f] = f;
      }), Object.keys(Object.assign({}, u)).join("") === "abcdefghijklmnopqrst";
    } catch {
      return !1;
    }
  }
  return No = s() ? Object.assign : function(i, o) {
    for (var a, c = n(i), u, f = 1; f < arguments.length; f++) {
      a = Object(arguments[f]);
      for (var h in a)
        t.call(a, h) && (c[h] = a[h]);
      if (r) {
        u = r(a);
        for (var g = 0; g < u.length; g++)
          e.call(a, u[g]) && (c[u[g]] = a[u[g]]);
      }
    }
    return c;
  }, No;
}
/** @license React v17.0.2
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var nc;
function xf() {
  if (nc)
    return gr;
  nc = 1, mu();
  var r = gu, t = 60103;
  if (gr.Fragment = 60107, typeof Symbol == "function" && Symbol.for) {
    var e = Symbol.for;
    t = e("react.element"), gr.Fragment = e("react.fragment");
  }
  var n = r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, s = Object.prototype.hasOwnProperty, i = { key: !0, ref: !0, __self: !0, __source: !0 };
  function o(a, c, u) {
    var f, h = {}, g = null, w = null;
    u !== void 0 && (g = "" + u), c.key !== void 0 && (g = "" + c.key), c.ref !== void 0 && (w = c.ref);
    for (f in c)
      s.call(c, f) && !i.hasOwnProperty(f) && (h[f] = c[f]);
    if (a && a.defaultProps)
      for (f in c = a.defaultProps, c)
        h[f] === void 0 && (h[f] = c[f]);
    return { $$typeof: t, type: a, key: g, ref: w, props: h, _owner: n.current };
  }
  return gr.jsx = o, gr.jsxs = o, gr;
}
var Co = {};
/** @license React v17.0.2
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var rc;
function Pf() {
  return rc || (rc = 1, function(r) {
    process.env.NODE_ENV !== "production" && function() {
      var t = gu, e = mu(), n = 60103, s = 60106;
      r.Fragment = 60107;
      var i = 60108, o = 60114, a = 60109, c = 60110, u = 60112, f = 60113, h = 60120, g = 60115, w = 60116, E = 60121, m = 60122, x = 60117, v = 60129, B = 60131;
      if (typeof Symbol == "function" && Symbol.for) {
        var T = Symbol.for;
        n = T("react.element"), s = T("react.portal"), r.Fragment = T("react.fragment"), i = T("react.strict_mode"), o = T("react.profiler"), a = T("react.provider"), c = T("react.context"), u = T("react.forward_ref"), f = T("react.suspense"), h = T("react.suspense_list"), g = T("react.memo"), w = T("react.lazy"), E = T("react.block"), m = T("react.server.block"), x = T("react.fundamental"), T("react.scope"), T("react.opaque.id"), v = T("react.debug_trace_mode"), T("react.offscreen"), B = T("react.legacy_hidden");
      }
      var H = typeof Symbol == "function" && Symbol.iterator, G = "@@iterator";
      function U(p) {
        if (p === null || typeof p != "object")
          return null;
        var N = H && p[H] || p[G];
        return typeof N == "function" ? N : null;
      }
      var D = t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      function S(p) {
        {
          for (var N = arguments.length, I = new Array(N > 1 ? N - 1 : 0), Q = 1; Q < N; Q++)
            I[Q - 1] = arguments[Q];
          nt("error", p, I);
        }
      }
      function nt(p, N, I) {
        {
          var Q = D.ReactDebugCurrentFrame, tt = Q.getStackAddendum();
          tt !== "" && (N += "%s", I = I.concat([tt]));
          var et = I.map(function(j) {
            return "" + j;
          });
          et.unshift("Warning: " + N), Function.prototype.apply.call(console[p], console, et);
        }
      }
      var Y = !1;
      function K(p) {
        return !!(typeof p == "string" || typeof p == "function" || p === r.Fragment || p === o || p === v || p === i || p === f || p === h || p === B || Y || typeof p == "object" && p !== null && (p.$$typeof === w || p.$$typeof === g || p.$$typeof === a || p.$$typeof === c || p.$$typeof === u || p.$$typeof === x || p.$$typeof === E || p[0] === m));
      }
      function Ot(p, N, I) {
        var Q = N.displayName || N.name || "";
        return p.displayName || (Q !== "" ? I + "(" + Q + ")" : I);
      }
      function bt(p) {
        return p.displayName || "Context";
      }
      function ht(p) {
        if (p == null)
          return null;
        if (typeof p.tag == "number" && S("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue."), typeof p == "function")
          return p.displayName || p.name || null;
        if (typeof p == "string")
          return p;
        switch (p) {
          case r.Fragment:
            return "Fragment";
          case s:
            return "Portal";
          case o:
            return "Profiler";
          case i:
            return "StrictMode";
          case f:
            return "Suspense";
          case h:
            return "SuspenseList";
        }
        if (typeof p == "object")
          switch (p.$$typeof) {
            case c:
              var N = p;
              return bt(N) + ".Consumer";
            case a:
              var I = p;
              return bt(I._context) + ".Provider";
            case u:
              return Ot(p, p.render, "ForwardRef");
            case g:
              return ht(p.type);
            case E:
              return ht(p._render);
            case w: {
              var Q = p, tt = Q._payload, et = Q._init;
              try {
                return ht(et(tt));
              } catch {
                return null;
              }
            }
          }
        return null;
      }
      var C = 0, k, _, $, Z, ct, Et, vt;
      function ce() {
      }
      ce.__reactDisabledLog = !0;
      function Ee() {
        {
          if (C === 0) {
            k = console.log, _ = console.info, $ = console.warn, Z = console.error, ct = console.group, Et = console.groupCollapsed, vt = console.groupEnd;
            var p = {
              configurable: !0,
              enumerable: !0,
              value: ce,
              writable: !0
            };
            Object.defineProperties(console, {
              info: p,
              log: p,
              warn: p,
              error: p,
              group: p,
              groupCollapsed: p,
              groupEnd: p
            });
          }
          C++;
        }
      }
      function on() {
        {
          if (C--, C === 0) {
            var p = {
              configurable: !0,
              enumerable: !0,
              writable: !0
            };
            Object.defineProperties(console, {
              log: e({}, p, {
                value: k
              }),
              info: e({}, p, {
                value: _
              }),
              warn: e({}, p, {
                value: $
              }),
              error: e({}, p, {
                value: Z
              }),
              group: e({}, p, {
                value: ct
              }),
              groupCollapsed: e({}, p, {
                value: Et
              }),
              groupEnd: e({}, p, {
                value: vt
              })
            });
          }
          C < 0 && S("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
        }
      }
      var Se = D.ReactCurrentDispatcher, Zt;
      function an(p, N, I) {
        {
          if (Zt === void 0)
            try {
              throw Error();
            } catch (tt) {
              var Q = tt.stack.trim().match(/\n( *(at )?)/);
              Zt = Q && Q[1] || "";
            }
          return `
` + Zt + p;
        }
      }
      var ue = !1, le;
      {
        var mi = typeof WeakMap == "function" ? WeakMap : Map;
        le = new mi();
      }
      function Ue(p, N) {
        if (!p || ue)
          return "";
        {
          var I = le.get(p);
          if (I !== void 0)
            return I;
        }
        var Q;
        ue = !0;
        var tt = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var et;
        et = Se.current, Se.current = null, Ee();
        try {
          if (N) {
            var j = function() {
              throw Error();
            };
            if (Object.defineProperty(j.prototype, "props", {
              set: function() {
                throw Error();
              }
            }), typeof Reflect == "object" && Reflect.construct) {
              try {
                Reflect.construct(j, []);
              } catch (Fe) {
                Q = Fe;
              }
              Reflect.construct(p, [], j);
            } else {
              try {
                j.call();
              } catch (Fe) {
                Q = Fe;
              }
              p.call(j.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (Fe) {
              Q = Fe;
            }
            p();
          }
        } catch (Fe) {
          if (Fe && Q && typeof Fe.stack == "string") {
            for (var J = Fe.stack.split(`
`), It = Q.stack.split(`
`), ut = J.length - 1, ft = It.length - 1; ut >= 1 && ft >= 0 && J[ut] !== It[ft]; )
              ft--;
            for (; ut >= 1 && ft >= 0; ut--, ft--)
              if (J[ut] !== It[ft]) {
                if (ut !== 1 || ft !== 1)
                  do
                    if (ut--, ft--, ft < 0 || J[ut] !== It[ft]) {
                      var De = `
` + J[ut].replace(" at new ", " at ");
                      return typeof p == "function" && le.set(p, De), De;
                    }
                  while (ut >= 1 && ft >= 0);
                break;
              }
          }
        } finally {
          ue = !1, Se.current = et, on(), Error.prepareStackTrace = tt;
        }
        var pr = p ? p.displayName || p.name : "", tc = pr ? an(pr) : "";
        return typeof p == "function" && le.set(p, tc), tc;
      }
      function Ft(p, N, I) {
        return Ue(p, !1);
      }
      function cn(p) {
        var N = p.prototype;
        return !!(N && N.isReactComponent);
      }
      function Sn(p, N, I) {
        if (p == null)
          return "";
        if (typeof p == "function")
          return Ue(p, cn(p));
        if (typeof p == "string")
          return an(p);
        switch (p) {
          case f:
            return an("Suspense");
          case h:
            return an("SuspenseList");
        }
        if (typeof p == "object")
          switch (p.$$typeof) {
            case u:
              return Ft(p.render);
            case g:
              return Sn(p.type, N, I);
            case E:
              return Ft(p._render);
            case w: {
              var Q = p, tt = Q._payload, et = Q._init;
              try {
                return Sn(et(tt), N, I);
              } catch {
              }
            }
          }
        return "";
      }
      var Ps = {}, ja = D.ReactDebugCurrentFrame;
      function wi(p) {
        if (p) {
          var N = p._owner, I = Sn(p.type, p._source, N ? N.type : null);
          ja.setExtraStackFrame(I);
        } else
          ja.setExtraStackFrame(null);
      }
      function rf(p, N, I, Q, tt) {
        {
          var et = Function.call.bind(Object.prototype.hasOwnProperty);
          for (var j in p)
            if (et(p, j)) {
              var J = void 0;
              try {
                if (typeof p[j] != "function") {
                  var It = Error((Q || "React class") + ": " + I + " type `" + j + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof p[j] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  throw It.name = "Invariant Violation", It;
                }
                J = p[j](N, j, Q, I, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
              } catch (ut) {
                J = ut;
              }
              J && !(J instanceof Error) && (wi(tt), S("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", Q || "React class", I, j, typeof J), wi(null)), J instanceof Error && !(J.message in Ps) && (Ps[J.message] = !0, wi(tt), S("Failed %s type: %s", I, J.message), wi(null));
            }
        }
      }
      var Ns = D.ReactCurrentOwner, Ao = Object.prototype.hasOwnProperty, sf = {
        key: !0,
        ref: !0,
        __self: !0,
        __source: !0
      }, za, Ka, bo;
      bo = {};
      function of(p) {
        if (Ao.call(p, "ref")) {
          var N = Object.getOwnPropertyDescriptor(p, "ref").get;
          if (N && N.isReactWarning)
            return !1;
        }
        return p.ref !== void 0;
      }
      function af(p) {
        if (Ao.call(p, "key")) {
          var N = Object.getOwnPropertyDescriptor(p, "key").get;
          if (N && N.isReactWarning)
            return !1;
        }
        return p.key !== void 0;
      }
      function cf(p, N) {
        if (typeof p.ref == "string" && Ns.current && N && Ns.current.stateNode !== N) {
          var I = ht(Ns.current.type);
          bo[I] || (S('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', ht(Ns.current.type), p.ref), bo[I] = !0);
        }
      }
      function uf(p, N) {
        {
          var I = function() {
            za || (za = !0, S("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", N));
          };
          I.isReactWarning = !0, Object.defineProperty(p, "key", {
            get: I,
            configurable: !0
          });
        }
      }
      function lf(p, N) {
        {
          var I = function() {
            Ka || (Ka = !0, S("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", N));
          };
          I.isReactWarning = !0, Object.defineProperty(p, "ref", {
            get: I,
            configurable: !0
          });
        }
      }
      var ff = function(p, N, I, Q, tt, et, j) {
        var J = {
          // This tag allows us to uniquely identify this as a React Element
          $$typeof: n,
          // Built-in properties that belong on the element
          type: p,
          key: N,
          ref: I,
          props: j,
          // Record the component responsible for creating this element.
          _owner: et
        };
        return J._store = {}, Object.defineProperty(J._store, "validated", {
          configurable: !1,
          enumerable: !1,
          writable: !0,
          value: !1
        }), Object.defineProperty(J, "_self", {
          configurable: !1,
          enumerable: !1,
          writable: !1,
          value: Q
        }), Object.defineProperty(J, "_source", {
          configurable: !1,
          enumerable: !1,
          writable: !1,
          value: tt
        }), Object.freeze && (Object.freeze(J.props), Object.freeze(J)), J;
      };
      function hf(p, N, I, Q, tt) {
        {
          var et, j = {}, J = null, It = null;
          I !== void 0 && (J = "" + I), af(N) && (J = "" + N.key), of(N) && (It = N.ref, cf(N, tt));
          for (et in N)
            Ao.call(N, et) && !sf.hasOwnProperty(et) && (j[et] = N[et]);
          if (p && p.defaultProps) {
            var ut = p.defaultProps;
            for (et in ut)
              j[et] === void 0 && (j[et] = ut[et]);
          }
          if (J || It) {
            var ft = typeof p == "function" ? p.displayName || p.name || "Unknown" : p;
            J && uf(j, ft), It && lf(j, ft);
          }
          return ff(p, J, It, tt, Q, Ns.current, j);
        }
      }
      var Eo = D.ReactCurrentOwner, Wa = D.ReactDebugCurrentFrame;
      function dr(p) {
        if (p) {
          var N = p._owner, I = Sn(p.type, p._source, N ? N.type : null);
          Wa.setExtraStackFrame(I);
        } else
          Wa.setExtraStackFrame(null);
      }
      var vo;
      vo = !1;
      function xo(p) {
        return typeof p == "object" && p !== null && p.$$typeof === n;
      }
      function Ya() {
        {
          if (Eo.current) {
            var p = ht(Eo.current.type);
            if (p)
              return `

Check the render method of \`` + p + "`.";
          }
          return "";
        }
      }
      function df(p) {
        {
          if (p !== void 0) {
            var N = p.fileName.replace(/^.*[\\\/]/, ""), I = p.lineNumber;
            return `

Check your code at ` + N + ":" + I + ".";
          }
          return "";
        }
      }
      var Za = {};
      function pf(p) {
        {
          var N = Ya();
          if (!N) {
            var I = typeof p == "string" ? p : p.displayName || p.name;
            I && (N = `

Check the top-level render call using <` + I + ">.");
          }
          return N;
        }
      }
      function Xa(p, N) {
        {
          if (!p._store || p._store.validated || p.key != null)
            return;
          p._store.validated = !0;
          var I = pf(N);
          if (Za[I])
            return;
          Za[I] = !0;
          var Q = "";
          p && p._owner && p._owner !== Eo.current && (Q = " It was passed a child from " + ht(p._owner.type) + "."), dr(p), S('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', I, Q), dr(null);
        }
      }
      function qa(p, N) {
        {
          if (typeof p != "object")
            return;
          if (Array.isArray(p))
            for (var I = 0; I < p.length; I++) {
              var Q = p[I];
              xo(Q) && Xa(Q, N);
            }
          else if (xo(p))
            p._store && (p._store.validated = !0);
          else if (p) {
            var tt = U(p);
            if (typeof tt == "function" && tt !== p.entries)
              for (var et = tt.call(p), j; !(j = et.next()).done; )
                xo(j.value) && Xa(j.value, N);
          }
        }
      }
      function gf(p) {
        {
          var N = p.type;
          if (N == null || typeof N == "string")
            return;
          var I;
          if (typeof N == "function")
            I = N.propTypes;
          else if (typeof N == "object" && (N.$$typeof === u || // Note: Memo only checks outer props here.
          // Inner props are checked in the reconciler.
          N.$$typeof === g))
            I = N.propTypes;
          else
            return;
          if (I) {
            var Q = ht(N);
            rf(I, p.props, "prop", Q, p);
          } else if (N.PropTypes !== void 0 && !vo) {
            vo = !0;
            var tt = ht(N);
            S("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", tt || "Unknown");
          }
          typeof N.getDefaultProps == "function" && !N.getDefaultProps.isReactClassApproved && S("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
        }
      }
      function yf(p) {
        {
          for (var N = Object.keys(p.props), I = 0; I < N.length; I++) {
            var Q = N[I];
            if (Q !== "children" && Q !== "key") {
              dr(p), S("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", Q), dr(null);
              break;
            }
          }
          p.ref !== null && (dr(p), S("Invalid attribute `ref` supplied to `React.Fragment`."), dr(null));
        }
      }
      function $a(p, N, I, Q, tt, et) {
        {
          var j = K(p);
          if (!j) {
            var J = "";
            (p === void 0 || typeof p == "object" && p !== null && Object.keys(p).length === 0) && (J += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
            var It = df(tt);
            It ? J += It : J += Ya();
            var ut;
            p === null ? ut = "null" : Array.isArray(p) ? ut = "array" : p !== void 0 && p.$$typeof === n ? (ut = "<" + (ht(p.type) || "Unknown") + " />", J = " Did you accidentally export a JSX literal instead of a component?") : ut = typeof p, S("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", ut, J);
          }
          var ft = hf(p, N, I, tt, et);
          if (ft == null)
            return ft;
          if (j) {
            var De = N.children;
            if (De !== void 0)
              if (Q)
                if (Array.isArray(De)) {
                  for (var pr = 0; pr < De.length; pr++)
                    qa(De[pr], p);
                  Object.freeze && Object.freeze(De);
                } else
                  S("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
              else
                qa(De, p);
          }
          return p === r.Fragment ? yf(ft) : gf(ft), ft;
        }
      }
      function mf(p, N, I) {
        return $a(p, N, I, !0);
      }
      function wf(p, N, I) {
        return $a(p, N, I, !1);
      }
      var Af = wf, bf = mf;
      r.jsx = Af, r.jsxs = bf;
    }();
  }(Co)), Co;
}
process.env.NODE_ENV === "production" ? Vo.exports = xf() : Vo.exports = Pf();
var q = Vo.exports;
const Nf = "6.9.0";
function Cf(r, t, e) {
  const n = t.split("|").map((i) => i.trim());
  for (let i = 0; i < n.length; i++)
    switch (t) {
      case "any":
        return;
      case "bigint":
      case "boolean":
      case "number":
      case "string":
        if (typeof r === t)
          return;
    }
  const s = new Error(`invalid value for type ${t}`);
  throw s.code = "INVALID_ARGUMENT", s.argument = `value.${e}`, s.value = r, s;
}
async function Rt(r) {
  const t = Object.keys(r);
  return (await Promise.all(t.map((n) => Promise.resolve(r[n])))).reduce((n, s, i) => (n[t[i]] = s, n), {});
}
function M(r, t, e) {
  for (let n in t) {
    let s = t[n];
    const i = e ? e[n] : null;
    i && Cf(s, i, n), Object.defineProperty(r, n, { enumerable: !0, value: s, writable: !1 });
  }
}
function vr(r) {
  if (r == null)
    return "null";
  if (Array.isArray(r))
    return "[ " + r.map(vr).join(", ") + " ]";
  if (r instanceof Uint8Array) {
    const t = "0123456789abcdef";
    let e = "0x";
    for (let n = 0; n < r.length; n++)
      e += t[r[n] >> 4], e += t[r[n] & 15];
    return e;
  }
  if (typeof r == "object" && typeof r.toJSON == "function")
    return vr(r.toJSON());
  switch (typeof r) {
    case "boolean":
    case "symbol":
      return r.toString();
    case "bigint":
      return BigInt(r).toString();
    case "number":
      return r.toString();
    case "string":
      return JSON.stringify(r);
    case "object": {
      const t = Object.keys(r);
      return t.sort(), "{ " + t.map((e) => `${vr(e)}: ${vr(r[e])}`).join(", ") + " }";
    }
  }
  return "[ COULD NOT SERIALIZE ]";
}
function oe(r, t) {
  return r && r.code === t;
}
function ba(r) {
  return oe(r, "CALL_EXCEPTION");
}
function dt(r, t, e) {
  let n = r;
  {
    const i = [];
    if (e) {
      if ("message" in e || "code" in e || "name" in e)
        throw new Error(`value will overwrite populated values: ${vr(e)}`);
      for (const o in e) {
        if (o === "shortMessage")
          continue;
        const a = e[o];
        i.push(o + "=" + vr(a));
      }
    }
    i.push(`code=${t}`), i.push(`version=${Nf}`), i.length && (r += " (" + i.join(", ") + ")");
  }
  let s;
  switch (t) {
    case "INVALID_ARGUMENT":
      s = new TypeError(r);
      break;
    case "NUMERIC_FAULT":
    case "BUFFER_OVERRUN":
      s = new RangeError(r);
      break;
    default:
      s = new Error(r);
  }
  return M(s, { code: t }), e && Object.assign(s, e), s.shortMessage == null && M(s, { shortMessage: n }), s;
}
function P(r, t, e, n) {
  if (!r)
    throw dt(t, e, n);
}
function y(r, t, e, n) {
  P(r, t, "INVALID_ARGUMENT", { argument: e, value: n });
}
function wu(r, t, e) {
  e == null && (e = ""), e && (e = ": " + e), P(r >= t, "missing arguemnt" + e, "MISSING_ARGUMENT", {
    count: r,
    expectedCount: t
  }), P(r <= t, "too many arguemnts" + e, "UNEXPECTED_ARGUMENT", {
    count: r,
    expectedCount: t
  });
}
const Tf = ["NFD", "NFC", "NFKD", "NFKC"].reduce((r, t) => {
  try {
    if ("test".normalize(t) !== "test")
      throw new Error("bad");
    if (t === "NFD") {
      const e = String.fromCharCode(233).normalize("NFD"), n = String.fromCharCode(101, 769);
      if (e !== n)
        throw new Error("broken");
    }
    r.push(t);
  } catch {
  }
  return r;
}, []);
function Of(r) {
  P(Tf.indexOf(r) >= 0, "platform missing String.prototype.normalize", "UNSUPPORTED_OPERATION", {
    operation: "String.prototype.normalize",
    info: { form: r }
  });
}
function so(r, t, e) {
  if (e == null && (e = ""), r !== t) {
    let n = e, s = "new";
    e && (n += ".", s += " " + e), P(!1, `private constructor; use ${n}from* methods`, "UNSUPPORTED_OPERATION", {
      operation: s
    });
  }
}
function Au(r, t, e) {
  if (r instanceof Uint8Array)
    return e ? new Uint8Array(r) : r;
  if (typeof r == "string" && r.match(/^0x([0-9a-f][0-9a-f])*$/i)) {
    const n = new Uint8Array((r.length - 2) / 2);
    let s = 2;
    for (let i = 0; i < n.length; i++)
      n[i] = parseInt(r.substring(s, s + 2), 16), s += 2;
    return n;
  }
  y(!1, "invalid BytesLike value", t || "value", r);
}
function X(r, t) {
  return Au(r, t, !1);
}
function Ht(r, t) {
  return Au(r, t, !0);
}
function ot(r, t) {
  return !(typeof r != "string" || !r.match(/^0x[0-9A-Fa-f]*$/) || typeof t == "number" && r.length !== 2 + 2 * t || t === !0 && r.length % 2 !== 0);
}
function If(r) {
  return ot(r, !0) || r instanceof Uint8Array;
}
const sc = "0123456789abcdef";
function F(r) {
  const t = X(r);
  let e = "0x";
  for (let n = 0; n < t.length; n++) {
    const s = t[n];
    e += sc[(s & 240) >> 4] + sc[s & 15];
  }
  return e;
}
function pt(r) {
  return "0x" + r.map((t) => F(t).substring(2)).join("");
}
function Ir(r) {
  return ot(r, !0) ? (r.length - 2) / 2 : X(r).length;
}
function at(r, t, e) {
  const n = X(r);
  return e != null && e > n.length && P(!1, "cannot slice beyond data bounds", "BUFFER_OVERRUN", {
    buffer: n,
    length: n.length,
    offset: e
  }), F(n.slice(t ?? 0, e ?? n.length));
}
function bu(r, t, e) {
  const n = X(r);
  P(t >= n.length, "padding exceeds data length", "BUFFER_OVERRUN", {
    buffer: new Uint8Array(n),
    length: t,
    offset: t + 1
  });
  const s = new Uint8Array(t);
  return s.fill(0), e ? s.set(n, t - n.length) : s.set(n, 0), F(s);
}
function ar(r, t) {
  return bu(r, t, !0);
}
function Bf(r, t) {
  return bu(r, t, !1);
}
const io = BigInt(0), me = BigInt(1), xr = 9007199254740991;
function Rf(r, t) {
  const e = oo(r, "value"), n = BigInt(V(t, "width"));
  if (P(e >> n === io, "overflow", "NUMERIC_FAULT", {
    operation: "fromTwos",
    fault: "overflow",
    value: r
  }), e >> n - me) {
    const s = (me << n) - me;
    return -((~e & s) + me);
  }
  return e;
}
function Eu(r, t) {
  let e = L(r, "value");
  const n = BigInt(V(t, "width")), s = me << n - me;
  if (e < io) {
    e = -e, P(e <= s, "too low", "NUMERIC_FAULT", {
      operation: "toTwos",
      fault: "overflow",
      value: r
    });
    const i = (me << n) - me;
    return (~e & i) + me;
  } else
    P(e < s, "too high", "NUMERIC_FAULT", {
      operation: "toTwos",
      fault: "overflow",
      value: r
    });
  return e;
}
function Is(r, t) {
  const e = oo(r, "value"), n = BigInt(V(t, "bits"));
  return e & (me << n) - me;
}
function L(r, t) {
  switch (typeof r) {
    case "bigint":
      return r;
    case "number":
      return y(Number.isInteger(r), "underflow", t || "value", r), y(r >= -xr && r <= xr, "overflow", t || "value", r), BigInt(r);
    case "string":
      try {
        if (r === "")
          throw new Error("empty string");
        return r[0] === "-" && r[1] !== "-" ? -BigInt(r.substring(1)) : BigInt(r);
      } catch (e) {
        y(!1, `invalid BigNumberish string: ${e.message}`, t || "value", r);
      }
  }
  y(!1, "invalid BigNumberish value", t || "value", r);
}
function oo(r, t) {
  const e = L(r, t);
  return P(e >= io, "unsigned value cannot be negative", "NUMERIC_FAULT", {
    fault: "overflow",
    operation: "getUint",
    value: r
  }), e;
}
const ic = "0123456789abcdef";
function Ea(r) {
  if (r instanceof Uint8Array) {
    let t = "0x0";
    for (const e of r)
      t += ic[e >> 4], t += ic[e & 15];
    return BigInt(t);
  }
  return L(r);
}
function V(r, t) {
  switch (typeof r) {
    case "bigint":
      return y(r >= -xr && r <= xr, "overflow", t || "value", r), Number(r);
    case "number":
      return y(Number.isInteger(r), "underflow", t || "value", r), y(r >= -xr && r <= xr, "overflow", t || "value", r), r;
    case "string":
      try {
        if (r === "")
          throw new Error("empty string");
        return V(BigInt(r), t);
      } catch (e) {
        y(!1, `invalid numeric string: ${e.message}`, t || "value", r);
      }
  }
  y(!1, "invalid numeric value", t || "value", r);
}
function kf(r) {
  return V(Ea(r));
}
function Bn(r, t) {
  let n = oo(r, "value").toString(16);
  if (t == null)
    n.length % 2 && (n = "0" + n);
  else {
    const s = V(t, "width");
    for (P(s * 2 >= n.length, `value exceeds width (${s} bytes)`, "NUMERIC_FAULT", {
      operation: "toBeHex",
      fault: "overflow",
      value: r
    }); n.length < s * 2; )
      n = "0" + n;
  }
  return "0x" + n;
}
function Yt(r) {
  const t = oo(r, "value");
  if (t === io)
    return new Uint8Array([]);
  let e = t.toString(16);
  e.length % 2 && (e = "0" + e);
  const n = new Uint8Array(e.length / 2);
  for (let s = 0; s < n.length; s++) {
    const i = s * 2;
    n[s] = parseInt(e.substring(i, i + 2), 16);
  }
  return n;
}
function Pr(r) {
  let t = F(If(r) ? r : Yt(r)).substring(2);
  for (; t.startsWith("0"); )
    t = t.substring(1);
  return t === "" && (t = "0"), "0x" + t;
}
const Sf = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
BigInt(0);
const oc = BigInt(58);
function Uf(r) {
  let t = Ea(X(r)), e = "";
  for (; t; )
    e = Sf[Number(t % oc)] + e, t /= oc;
  return e;
}
function Df(r) {
  r = atob(r);
  const t = new Uint8Array(r.length);
  for (let e = 0; e < r.length; e++)
    t[e] = r.charCodeAt(e);
  return X(t);
}
function Ff(r) {
  const t = X(r);
  let e = "";
  for (let n = 0; n < t.length; n++)
    e += String.fromCharCode(t[n]);
  return btoa(e);
}
var Rr;
class vu {
  /**
   *  Create a new **EventPayload** for %%emitter%% with
   *  the %%listener%% and for %%filter%%.
   */
  constructor(t, e, n) {
    /**
     *  The event filter.
     */
    A(this, "filter");
    /**
     *  The **EventEmitterable**.
     */
    A(this, "emitter");
    b(this, Rr, void 0);
    d(this, Rr, e), M(this, { emitter: t, filter: n });
  }
  /**
   *  Unregister the triggered listener for future events.
   */
  async removeListener() {
    l(this, Rr) != null && await this.emitter.off(this.filter, l(this, Rr));
  }
}
Rr = new WeakMap();
function Lf(r, t, e, n, s) {
  y(!1, `invalid codepoint at offset ${t}; ${r}`, "bytes", e);
}
function xu(r, t, e, n, s) {
  if (r === "BAD_PREFIX" || r === "UNEXPECTED_CONTINUE") {
    let i = 0;
    for (let o = t + 1; o < e.length && e[o] >> 6 === 2; o++)
      i++;
    return i;
  }
  return r === "OVERRUN" ? e.length - t - 1 : 0;
}
function Mf(r, t, e, n, s) {
  return r === "OVERLONG" ? (y(typeof s == "number", "invalid bad code point for replacement", "badCodepoint", s), n.push(s), 0) : (n.push(65533), xu(r, t, e));
}
const Gf = Object.freeze({
  error: Lf,
  ignore: xu,
  replace: Mf
});
function Qf(r, t) {
  t == null && (t = Gf.error);
  const e = X(r, "bytes"), n = [];
  let s = 0;
  for (; s < e.length; ) {
    const i = e[s++];
    if (!(i >> 7)) {
      n.push(i);
      continue;
    }
    let o = null, a = null;
    if ((i & 224) === 192)
      o = 1, a = 127;
    else if ((i & 240) === 224)
      o = 2, a = 2047;
    else if ((i & 248) === 240)
      o = 3, a = 65535;
    else {
      (i & 192) === 128 ? s += t("UNEXPECTED_CONTINUE", s - 1, e, n) : s += t("BAD_PREFIX", s - 1, e, n);
      continue;
    }
    if (s - 1 + o >= e.length) {
      s += t("OVERRUN", s - 1, e, n);
      continue;
    }
    let c = i & (1 << 8 - o - 1) - 1;
    for (let u = 0; u < o; u++) {
      let f = e[s];
      if ((f & 192) != 128) {
        s += t("MISSING_CONTINUE", s, e, n), c = null;
        break;
      }
      c = c << 6 | f & 63, s++;
    }
    if (c !== null) {
      if (c > 1114111) {
        s += t("OUT_OF_RANGE", s - 1 - o, e, n, c);
        continue;
      }
      if (c >= 55296 && c <= 57343) {
        s += t("UTF16_SURROGATE", s - 1 - o, e, n, c);
        continue;
      }
      if (c <= a) {
        s += t("OVERLONG", s - 1 - o, e, n, c);
        continue;
      }
      n.push(c);
    }
  }
  return n;
}
function en(r, t) {
  t != null && (Of(t), r = r.normalize(t));
  let e = [];
  for (let n = 0; n < r.length; n++) {
    const s = r.charCodeAt(n);
    if (s < 128)
      e.push(s);
    else if (s < 2048)
      e.push(s >> 6 | 192), e.push(s & 63 | 128);
    else if ((s & 64512) == 55296) {
      n++;
      const i = r.charCodeAt(n);
      y(n < r.length && (i & 64512) === 56320, "invalid surrogate pair", "str", r);
      const o = 65536 + ((s & 1023) << 10) + (i & 1023);
      e.push(o >> 18 | 240), e.push(o >> 12 & 63 | 128), e.push(o >> 6 & 63 | 128), e.push(o & 63 | 128);
    } else
      e.push(s >> 12 | 224), e.push(s >> 6 & 63 | 128), e.push(s & 63 | 128);
  }
  return new Uint8Array(e);
}
function Hf(r) {
  return r.map((t) => t <= 65535 ? String.fromCharCode(t) : (t -= 65536, String.fromCharCode((t >> 10 & 1023) + 55296, (t & 1023) + 56320))).join("");
}
function va(r, t) {
  return Hf(Qf(r, t));
}
function Pu(r) {
  async function t(e, n) {
    const s = e.url.split(":")[0].toLowerCase();
    P(s === "http" || s === "https", `unsupported protocol ${s}`, "UNSUPPORTED_OPERATION", {
      info: { protocol: s },
      operation: "request"
    }), P(s === "https" || !e.credentials || e.allowInsecureAuthentication, "insecure authorized connections unsupported", "UNSUPPORTED_OPERATION", {
      operation: "request"
    });
    let i;
    if (n) {
      const h = new AbortController();
      i = h.signal, n.addListener(() => {
        h.abort();
      });
    }
    const o = {
      method: e.method,
      headers: new Headers(Array.from(e)),
      body: e.body || void 0,
      signal: i
    }, a = await fetch(e.url, o), c = {};
    a.headers.forEach((h, g) => {
      c[g.toLowerCase()] = h;
    });
    const u = await a.arrayBuffer(), f = u == null ? null : new Uint8Array(u);
    return {
      statusCode: a.status,
      statusMessage: a.statusText,
      headers: c,
      body: f
    };
  }
  return t;
}
const _f = 12, Vf = 250;
let ac = Pu();
const Jf = new RegExp("^data:([^;:]*)?(;base64)?,(.*)$", "i"), jf = new RegExp("^ipfs://(ipfs/)?(.*)$", "i");
let To = !1;
async function Nu(r, t) {
  try {
    const e = r.match(Jf);
    if (!e)
      throw new Error("invalid data");
    return new On(200, "OK", {
      "content-type": e[1] || "text/plain"
    }, e[2] ? Df(e[3]) : Kf(e[3]));
  } catch {
    return new On(599, "BAD REQUEST (invalid data: URI)", {}, null, new Rn(r));
  }
}
function Cu(r) {
  async function t(e, n) {
    try {
      const s = e.match(jf);
      if (!s)
        throw new Error("invalid link");
      return new Rn(`${r}${s[2]}`);
    } catch {
      return new On(599, "BAD REQUEST (invalid IPFS URI)", {}, null, new Rn(e));
    }
  }
  return t;
}
const Ai = {
  data: Nu,
  ipfs: Cu("https://gateway.ipfs.io/ipfs/")
}, Tu = /* @__PURE__ */ new WeakMap();
var Qn, dn;
class zf {
  constructor(t) {
    b(this, Qn, void 0);
    b(this, dn, void 0);
    d(this, Qn, []), d(this, dn, !1), Tu.set(t, () => {
      if (!l(this, dn)) {
        d(this, dn, !0);
        for (const e of l(this, Qn))
          setTimeout(() => {
            e();
          }, 0);
        d(this, Qn, []);
      }
    });
  }
  addListener(t) {
    P(!l(this, dn), "singal already cancelled", "UNSUPPORTED_OPERATION", {
      operation: "fetchCancelSignal.addCancelListener"
    }), l(this, Qn).push(t);
  }
  get cancelled() {
    return l(this, dn);
  }
  checkSignal() {
    P(!this.cancelled, "cancelled", "CANCELLED", {});
  }
}
Qn = new WeakMap(), dn = new WeakMap();
function bi(r) {
  if (r == null)
    throw new Error("missing signal; should not happen");
  return r.checkSignal(), r;
}
var kr, Sr, de, Qe, Ur, Dr, gt, jt, He, Hn, _n, Vn, xe, _e, pn, Jn, Bs;
const Zi = class Zi {
  /**
   *  Create a new FetchRequest instance with default values.
   *
   *  Once created, each property may be set before issuing a
   *  ``.send()`` to make the request.
   */
  constructor(t) {
    b(this, Jn);
    b(this, kr, void 0);
    b(this, Sr, void 0);
    b(this, de, void 0);
    b(this, Qe, void 0);
    b(this, Ur, void 0);
    b(this, Dr, void 0);
    b(this, gt, void 0);
    b(this, jt, void 0);
    b(this, He, void 0);
    // Hooks
    b(this, Hn, void 0);
    b(this, _n, void 0);
    b(this, Vn, void 0);
    b(this, xe, void 0);
    b(this, _e, void 0);
    b(this, pn, void 0);
    d(this, Dr, String(t)), d(this, kr, !1), d(this, Sr, !0), d(this, de, {}), d(this, Qe, ""), d(this, Ur, 3e5), d(this, _e, {
      slotInterval: Vf,
      maxAttempts: _f
    }), d(this, pn, null);
  }
  /**
   *  The fetch URL to request.
   */
  get url() {
    return l(this, Dr);
  }
  set url(t) {
    d(this, Dr, String(t));
  }
  /**
   *  The fetch body, if any, to send as the request body. //(default: null)//
   *
   *  When setting a body, the intrinsic ``Content-Type`` is automatically
   *  set and will be used if **not overridden** by setting a custom
   *  header.
   *
   *  If %%body%% is null, the body is cleared (along with the
   *  intrinsic ``Content-Type``).
   *
   *  If %%body%% is a string, the intrinsic ``Content-Type`` is set to
   *  ``text/plain``.
   *
   *  If %%body%% is a Uint8Array, the intrinsic ``Content-Type`` is set to
   *  ``application/octet-stream``.
   *
   *  If %%body%% is any other object, the intrinsic ``Content-Type`` is
   *  set to ``application/json``.
   */
  get body() {
    return l(this, gt) == null ? null : new Uint8Array(l(this, gt));
  }
  set body(t) {
    if (t == null)
      d(this, gt, void 0), d(this, jt, void 0);
    else if (typeof t == "string")
      d(this, gt, en(t)), d(this, jt, "text/plain");
    else if (t instanceof Uint8Array)
      d(this, gt, t), d(this, jt, "application/octet-stream");
    else if (typeof t == "object")
      d(this, gt, en(JSON.stringify(t))), d(this, jt, "application/json");
    else
      throw new Error("invalid body");
  }
  /**
   *  Returns true if the request has a body.
   */
  hasBody() {
    return l(this, gt) != null;
  }
  /**
   *  The HTTP method to use when requesting the URI. If no method
   *  has been explicitly set, then ``GET`` is used if the body is
   *  null and ``POST`` otherwise.
   */
  get method() {
    return l(this, Qe) ? l(this, Qe) : this.hasBody() ? "POST" : "GET";
  }
  set method(t) {
    t == null && (t = ""), d(this, Qe, String(t).toUpperCase());
  }
  /**
   *  The headers that will be used when requesting the URI. All
   *  keys are lower-case.
   *
   *  This object is a copy, so any changes will **NOT** be reflected
   *  in the ``FetchRequest``.
   *
   *  To set a header entry, use the ``setHeader`` method.
   */
  get headers() {
    const t = Object.assign({}, l(this, de));
    return l(this, He) && (t.authorization = `Basic ${Ff(en(l(this, He)))}`), this.allowGzip && (t["accept-encoding"] = "gzip"), t["content-type"] == null && l(this, jt) && (t["content-type"] = l(this, jt)), this.body && (t["content-length"] = String(this.body.length)), t;
  }
  /**
   *  Get the header for %%key%%, ignoring case.
   */
  getHeader(t) {
    return this.headers[t.toLowerCase()];
  }
  /**
   *  Set the header for %%key%% to %%value%%. All values are coerced
   *  to a string.
   */
  setHeader(t, e) {
    l(this, de)[String(t).toLowerCase()] = String(e);
  }
  /**
   *  Clear all headers, resetting all intrinsic headers.
   */
  clearHeaders() {
    d(this, de, {});
  }
  [Symbol.iterator]() {
    const t = this.headers, e = Object.keys(t);
    let n = 0;
    return {
      next: () => {
        if (n < e.length) {
          const s = e[n++];
          return {
            value: [s, t[s]],
            done: !1
          };
        }
        return { value: void 0, done: !0 };
      }
    };
  }
  /**
   *  The value that will be sent for the ``Authorization`` header.
   *
   *  To set the credentials, use the ``setCredentials`` method.
   */
  get credentials() {
    return l(this, He) || null;
  }
  /**
   *  Sets an ``Authorization`` for %%username%% with %%password%%.
   */
  setCredentials(t, e) {
    y(!t.match(/:/), "invalid basic authentication username", "username", "[REDACTED]"), d(this, He, `${t}:${e}`);
  }
  /**
   *  Enable and request gzip-encoded responses. The response will
   *  automatically be decompressed. //(default: true)//
   */
  get allowGzip() {
    return l(this, Sr);
  }
  set allowGzip(t) {
    d(this, Sr, !!t);
  }
  /**
   *  Allow ``Authentication`` credentials to be sent over insecure
   *  channels. //(default: false)//
   */
  get allowInsecureAuthentication() {
    return !!l(this, kr);
  }
  set allowInsecureAuthentication(t) {
    d(this, kr, !!t);
  }
  /**
   *  The timeout (in milliseconds) to wait for a complete response.
   *  //(default: 5 minutes)//
   */
  get timeout() {
    return l(this, Ur);
  }
  set timeout(t) {
    y(t >= 0, "timeout must be non-zero", "timeout", t), d(this, Ur, t);
  }
  /**
   *  This function is called prior to each request, for example
   *  during a redirection or retry in case of server throttling.
   *
   *  This offers an opportunity to populate headers or update
   *  content before sending a request.
   */
  get preflightFunc() {
    return l(this, Hn) || null;
  }
  set preflightFunc(t) {
    d(this, Hn, t);
  }
  /**
   *  This function is called after each response, offering an
   *  opportunity to provide client-level throttling or updating
   *  response data.
   *
   *  Any error thrown in this causes the ``send()`` to throw.
   *
   *  To schedule a retry attempt (assuming the maximum retry limit
   *  has not been reached), use [[response.throwThrottleError]].
   */
  get processFunc() {
    return l(this, _n) || null;
  }
  set processFunc(t) {
    d(this, _n, t);
  }
  /**
   *  This function is called on each retry attempt.
   */
  get retryFunc() {
    return l(this, Vn) || null;
  }
  set retryFunc(t) {
    d(this, Vn, t);
  }
  /**
   *  This function is called to fetch content from HTTP and
   *  HTTPS URLs and is platform specific (e.g. nodejs vs
   *  browsers).
   *
   *  This is by default the currently registered global getUrl
   *  function, which can be changed using [[registerGetUrl]].
   *  If this has been set, setting is to ``null`` will cause
   *  this FetchRequest (and any future clones) to revert back to
   *  using the currently registered global getUrl function.
   *
   *  Setting this is generally not necessary, but may be useful
   *  for developers that wish to intercept requests or to
   *  configurege a proxy or other agent.
   */
  get getUrlFunc() {
    return l(this, pn) || ac;
  }
  set getUrlFunc(t) {
    d(this, pn, t);
  }
  toString() {
    return `<FetchRequest method=${JSON.stringify(this.method)} url=${JSON.stringify(this.url)} headers=${JSON.stringify(this.headers)} body=${l(this, gt) ? F(l(this, gt)) : "null"}>`;
  }
  /**
   *  Update the throttle parameters used to determine maximum
   *  attempts and exponential-backoff properties.
   */
  setThrottleParams(t) {
    t.slotInterval != null && (l(this, _e).slotInterval = t.slotInterval), t.maxAttempts != null && (l(this, _e).maxAttempts = t.maxAttempts);
  }
  /**
   *  Resolves to the response by sending the request.
   */
  send() {
    return P(l(this, xe) == null, "request already sent", "UNSUPPORTED_OPERATION", { operation: "fetchRequest.send" }), d(this, xe, new zf(this)), O(this, Jn, Bs).call(this, 0, cc() + this.timeout, 0, this, new On(0, "", {}, null, this));
  }
  /**
   *  Cancels the inflight response, causing a ``CANCELLED``
   *  error to be rejected from the [[send]].
   */
  cancel() {
    P(l(this, xe) != null, "request has not been sent", "UNSUPPORTED_OPERATION", { operation: "fetchRequest.cancel" });
    const t = Tu.get(this);
    if (!t)
      throw new Error("missing signal; should not happen");
    t();
  }
  /**
   *  Returns a new [[FetchRequest]] that represents the redirection
   *  to %%location%%.
   */
  redirect(t) {
    const e = this.url.split(":")[0].toLowerCase(), n = t.split(":")[0].toLowerCase();
    P(this.method === "GET" && (e !== "https" || n !== "http") && t.match(/^https?:/), "unsupported redirect", "UNSUPPORTED_OPERATION", {
      operation: `redirect(${this.method} ${JSON.stringify(this.url)} => ${JSON.stringify(t)})`
    });
    const s = new Zi(t);
    return s.method = "GET", s.allowGzip = this.allowGzip, s.timeout = this.timeout, d(s, de, Object.assign({}, l(this, de))), l(this, gt) && d(s, gt, new Uint8Array(l(this, gt))), d(s, jt, l(this, jt)), s;
  }
  /**
   *  Create a new copy of this request.
   */
  clone() {
    const t = new Zi(this.url);
    return d(t, Qe, l(this, Qe)), l(this, gt) && d(t, gt, l(this, gt)), d(t, jt, l(this, jt)), d(t, de, Object.assign({}, l(this, de))), d(t, He, l(this, He)), this.allowGzip && (t.allowGzip = !0), t.timeout = this.timeout, this.allowInsecureAuthentication && (t.allowInsecureAuthentication = !0), d(t, Hn, l(this, Hn)), d(t, _n, l(this, _n)), d(t, Vn, l(this, Vn)), d(t, pn, l(this, pn)), t;
  }
  /**
   *  Locks all static configuration for gateways and FetchGetUrlFunc
   *  registration.
   */
  static lockConfig() {
    To = !0;
  }
  /**
   *  Get the current Gateway function for %%scheme%%.
   */
  static getGateway(t) {
    return Ai[t.toLowerCase()] || null;
  }
  /**
   *  Use the %%func%% when fetching URIs using %%scheme%%.
   *
   *  This method affects all requests globally.
   *
   *  If [[lockConfig]] has been called, no change is made and this
   *  throws.
   */
  static registerGateway(t, e) {
    if (t = t.toLowerCase(), t === "http" || t === "https")
      throw new Error(`cannot intercept ${t}; use registerGetUrl`);
    if (To)
      throw new Error("gateways locked");
    Ai[t] = e;
  }
  /**
   *  Use %%getUrl%% when fetching URIs over HTTP and HTTPS requests.
   *
   *  This method affects all requests globally.
   *
   *  If [[lockConfig]] has been called, no change is made and this
   *  throws.
   */
  static registerGetUrl(t) {
    if (To)
      throw new Error("gateways locked");
    ac = t;
  }
  /**
   *  Creates a getUrl function that fetches content from HTTP and
   *  HTTPS URLs.
   *
   *  The available %%options%% are dependent on the platform
   *  implementation of the default getUrl function.
   *
   *  This is not generally something that is needed, but is useful
   *  when trying to customize simple behaviour when fetching HTTP
   *  content.
   */
  static createGetUrlFunc(t) {
    return Pu();
  }
  /**
   *  Creates a function that can "fetch" data URIs.
   *
   *  Note that this is automatically done internally to support
   *  data URIs, so it is not necessary to register it.
   *
   *  This is not generally something that is needed, but may
   *  be useful in a wrapper to perfom custom data URI functionality.
   */
  static createDataGateway() {
    return Nu;
  }
  /**
   *  Creates a function that will fetch IPFS (unvalidated) from
   *  a custom gateway baseUrl.
   *
   *  The default IPFS gateway used internally is
   *  ``"https:/\/gateway.ipfs.io/ipfs/"``.
   */
  static createIpfsGatewayFunc(t) {
    return Cu(t);
  }
};
kr = new WeakMap(), Sr = new WeakMap(), de = new WeakMap(), Qe = new WeakMap(), Ur = new WeakMap(), Dr = new WeakMap(), gt = new WeakMap(), jt = new WeakMap(), He = new WeakMap(), Hn = new WeakMap(), _n = new WeakMap(), Vn = new WeakMap(), xe = new WeakMap(), _e = new WeakMap(), pn = new WeakMap(), Jn = new WeakSet(), Bs = async function(t, e, n, s, i) {
  var f, h, g;
  if (t >= l(this, _e).maxAttempts)
    return i.makeServerError("exceeded maximum retry limit");
  P(cc() <= e, "timeout", "TIMEOUT", {
    operation: "request.send",
    reason: "timeout",
    request: s
  }), n > 0 && await Wf(n);
  let o = this.clone();
  const a = (o.url.split(":")[0] || "").toLowerCase();
  if (a in Ai) {
    const w = await Ai[a](o.url, bi(l(s, xe)));
    if (w instanceof On) {
      let E = w;
      if (this.processFunc) {
        bi(l(s, xe));
        try {
          E = await this.processFunc(o, E);
        } catch (m) {
          (m.throttle == null || typeof m.stall != "number") && E.makeServerError("error in post-processing function", m).assertOk();
        }
      }
      return E;
    }
    o = w;
  }
  this.preflightFunc && (o = await this.preflightFunc(o));
  const c = await this.getUrlFunc(o, bi(l(s, xe)));
  let u = new On(c.statusCode, c.statusMessage, c.headers, c.body, s);
  if (u.statusCode === 301 || u.statusCode === 302) {
    try {
      const w = u.headers.location || "";
      return O(f = o.redirect(w), Jn, Bs).call(f, t + 1, e, 0, s, u);
    } catch {
    }
    return u;
  } else if (u.statusCode === 429 && (this.retryFunc == null || await this.retryFunc(o, u, t))) {
    const w = u.headers["retry-after"];
    let E = l(this, _e).slotInterval * Math.trunc(Math.random() * Math.pow(2, t));
    return typeof w == "string" && w.match(/^[1-9][0-9]*$/) && (E = parseInt(w)), O(h = o.clone(), Jn, Bs).call(h, t + 1, e, E, s, u);
  }
  if (this.processFunc) {
    bi(l(s, xe));
    try {
      u = await this.processFunc(o, u);
    } catch (w) {
      (w.throttle == null || typeof w.stall != "number") && u.makeServerError("error in post-processing function", w).assertOk();
      let E = l(this, _e).slotInterval * Math.trunc(Math.random() * Math.pow(2, t));
      return w.stall >= 0 && (E = w.stall), O(g = o.clone(), Jn, Bs).call(g, t + 1, e, E, s, u);
    }
  }
  return u;
};
let Rn = Zi;
var Zs, Xs, qs, pe, Fr, jn;
const _a = class _a {
  constructor(t, e, n, s, i) {
    b(this, Zs, void 0);
    b(this, Xs, void 0);
    b(this, qs, void 0);
    b(this, pe, void 0);
    b(this, Fr, void 0);
    b(this, jn, void 0);
    d(this, Zs, t), d(this, Xs, e), d(this, qs, Object.keys(n).reduce((o, a) => (o[a.toLowerCase()] = String(n[a]), o), {})), d(this, pe, s == null ? null : new Uint8Array(s)), d(this, Fr, i || null), d(this, jn, { message: "" });
  }
  toString() {
    return `<FetchResponse status=${this.statusCode} body=${l(this, pe) ? F(l(this, pe)) : "null"}>`;
  }
  /**
   *  The response status code.
   */
  get statusCode() {
    return l(this, Zs);
  }
  /**
   *  The response status message.
   */
  get statusMessage() {
    return l(this, Xs);
  }
  /**
   *  The response headers. All keys are lower-case.
   */
  get headers() {
    return Object.assign({}, l(this, qs));
  }
  /**
   *  The response body, or ``null`` if there was no body.
   */
  get body() {
    return l(this, pe) == null ? null : new Uint8Array(l(this, pe));
  }
  /**
   *  The response body as a UTF-8 encoded string, or the empty
   *  string (i.e. ``""``) if there was no body.
   *
   *  An error is thrown if the body is invalid UTF-8 data.
   */
  get bodyText() {
    try {
      return l(this, pe) == null ? "" : va(l(this, pe));
    } catch {
      P(!1, "response body is not valid UTF-8 data", "UNSUPPORTED_OPERATION", {
        operation: "bodyText",
        info: { response: this }
      });
    }
  }
  /**
   *  The response body, decoded as JSON.
   *
   *  An error is thrown if the body is invalid JSON-encoded data
   *  or if there was no body.
   */
  get bodyJson() {
    try {
      return JSON.parse(this.bodyText);
    } catch {
      P(!1, "response body is not valid JSON", "UNSUPPORTED_OPERATION", {
        operation: "bodyJson",
        info: { response: this }
      });
    }
  }
  [Symbol.iterator]() {
    const t = this.headers, e = Object.keys(t);
    let n = 0;
    return {
      next: () => {
        if (n < e.length) {
          const s = e[n++];
          return {
            value: [s, t[s]],
            done: !1
          };
        }
        return { value: void 0, done: !0 };
      }
    };
  }
  /**
   *  Return a Response with matching headers and body, but with
   *  an error status code (i.e. 599) and %%message%% with an
   *  optional %%error%%.
   */
  makeServerError(t, e) {
    let n;
    t ? n = `CLIENT ESCALATED SERVER ERROR (${this.statusCode} ${this.statusMessage}; ${t})` : (t = `${this.statusCode} ${this.statusMessage}`, n = `CLIENT ESCALATED SERVER ERROR (${t})`);
    const s = new _a(599, n, this.headers, this.body, l(this, Fr) || void 0);
    return d(s, jn, { message: t, error: e }), s;
  }
  /**
   *  If called within a [request.processFunc](FetchRequest-processFunc)
   *  call, causes the request to retry as if throttled for %%stall%%
   *  milliseconds.
   */
  throwThrottleError(t, e) {
    e == null ? e = -1 : y(Number.isInteger(e) && e >= 0, "invalid stall timeout", "stall", e);
    const n = new Error(t || "throttling requests");
    throw M(n, { stall: e, throttle: !0 }), n;
  }
  /**
   *  Get the header value for %%key%%, ignoring case.
   */
  getHeader(t) {
    return this.headers[t.toLowerCase()];
  }
  /**
   *  Returns true if the response has a body.
   */
  hasBody() {
    return l(this, pe) != null;
  }
  /**
   *  The request made for this response.
   */
  get request() {
    return l(this, Fr);
  }
  /**
   *  Returns true if this response was a success statusCode.
   */
  ok() {
    return l(this, jn).message === "" && this.statusCode >= 200 && this.statusCode < 300;
  }
  /**
   *  Throws a ``SERVER_ERROR`` if this response is not ok.
   */
  assertOk() {
    if (this.ok())
      return;
    let { message: t, error: e } = l(this, jn);
    t === "" && (t = `server response ${this.statusCode} ${this.statusMessage}`), P(!1, t, "SERVER_ERROR", {
      request: this.request || "unknown request",
      response: this,
      error: e
    });
  }
};
Zs = new WeakMap(), Xs = new WeakMap(), qs = new WeakMap(), pe = new WeakMap(), Fr = new WeakMap(), jn = new WeakMap();
let On = _a;
function cc() {
  return (/* @__PURE__ */ new Date()).getTime();
}
function Kf(r) {
  return en(r.replace(/%([0-9a-f][0-9a-f])/gi, (t, e) => String.fromCharCode(parseInt(e, 16))));
}
function Wf(r) {
  return new Promise((t) => setTimeout(t, r));
}
function Yf(r) {
  let t = r.toString(16);
  for (; t.length < 2; )
    t = "0" + t;
  return "0x" + t;
}
function uc(r, t, e) {
  let n = 0;
  for (let s = 0; s < e; s++)
    n = n * 256 + r[t + s];
  return n;
}
function lc(r, t, e, n) {
  const s = [];
  for (; e < t + 1 + n; ) {
    const i = Ou(r, e);
    s.push(i.result), e += i.consumed, P(e <= t + 1 + n, "child data too short", "BUFFER_OVERRUN", {
      buffer: r,
      length: n,
      offset: t
    });
  }
  return { consumed: 1 + n, result: s };
}
function Ou(r, t) {
  P(r.length !== 0, "data too short", "BUFFER_OVERRUN", {
    buffer: r,
    length: 0,
    offset: 1
  });
  const e = (n) => {
    P(n <= r.length, "data short segment too short", "BUFFER_OVERRUN", {
      buffer: r,
      length: r.length,
      offset: n
    });
  };
  if (r[t] >= 248) {
    const n = r[t] - 247;
    e(t + 1 + n);
    const s = uc(r, t + 1, n);
    return e(t + 1 + n + s), lc(r, t, t + 1 + n, n + s);
  } else if (r[t] >= 192) {
    const n = r[t] - 192;
    return e(t + 1 + n), lc(r, t, t + 1, n);
  } else if (r[t] >= 184) {
    const n = r[t] - 183;
    e(t + 1 + n);
    const s = uc(r, t + 1, n);
    e(t + 1 + n + s);
    const i = F(r.slice(t + 1 + n, t + 1 + n + s));
    return { consumed: 1 + n + s, result: i };
  } else if (r[t] >= 128) {
    const n = r[t] - 128;
    e(t + 1 + n);
    const s = F(r.slice(t + 1, t + 1 + n));
    return { consumed: 1 + n, result: s };
  }
  return { consumed: 1, result: Yf(r[t]) };
}
function xa(r) {
  const t = X(r, "data"), e = Ou(t, 0);
  return y(e.consumed === t.length, "unexpected junk after rlp payload", "data", r), e.result;
}
function fc(r) {
  const t = [];
  for (; r; )
    t.unshift(r & 255), r >>= 8;
  return t;
}
function Iu(r) {
  if (Array.isArray(r)) {
    let n = [];
    if (r.forEach(function(i) {
      n = n.concat(Iu(i));
    }), n.length <= 55)
      return n.unshift(192 + n.length), n;
    const s = fc(n.length);
    return s.unshift(247 + s.length), s.concat(n);
  }
  const t = Array.prototype.slice.call(X(r, "object"));
  if (t.length === 1 && t[0] <= 127)
    return t;
  if (t.length <= 55)
    return t.unshift(128 + t.length), t;
  const e = fc(t.length);
  return e.unshift(183 + e.length), e.concat(t);
}
const hc = "0123456789abcdef";
function Gs(r) {
  let t = "0x";
  for (const e of Iu(r))
    t += hc[e >> 4], t += hc[e & 15];
  return t;
}
const St = 32, Jo = new Uint8Array(St), Zf = ["then"], Ei = {};
function Ts(r, t) {
  const e = new Error(`deferred error during ABI decoding triggered accessing ${r}`);
  throw e.error = t, e;
}
var gn;
const Ls = class Ls extends Array {
  /**
   *  @private
   */
  constructor(...e) {
    const n = e[0];
    let s = e[1], i = (e[2] || []).slice(), o = !0;
    n !== Ei && (s = e, i = [], o = !1);
    super(s.length);
    b(this, gn, void 0);
    s.forEach((c, u) => {
      this[u] = c;
    });
    const a = i.reduce((c, u) => (typeof u == "string" && c.set(u, (c.get(u) || 0) + 1), c), /* @__PURE__ */ new Map());
    if (d(this, gn, Object.freeze(s.map((c, u) => {
      const f = i[u];
      return f != null && a.get(f) === 1 ? f : null;
    }))), !!o)
      return Object.freeze(this), new Proxy(this, {
        get: (c, u, f) => {
          if (typeof u == "string") {
            if (u.match(/^[0-9]+$/)) {
              const g = V(u, "%index");
              if (g < 0 || g >= this.length)
                throw new RangeError("out of result range");
              const w = c[g];
              return w instanceof Error && Ts(`index ${g}`, w), w;
            }
            if (Zf.indexOf(u) >= 0)
              return Reflect.get(c, u, f);
            const h = c[u];
            if (h instanceof Function)
              return function(...g) {
                return h.apply(this === f ? c : this, g);
              };
            if (!(u in c))
              return c.getValue.apply(this === f ? c : this, [u]);
          }
          return Reflect.get(c, u, f);
        }
      });
  }
  /**
   *  Returns the Result as a normal Array.
   *
   *  This will throw if there are any outstanding deferred
   *  errors.
   */
  toArray() {
    const e = [];
    return this.forEach((n, s) => {
      n instanceof Error && Ts(`index ${s}`, n), e.push(n);
    }), e;
  }
  /**
   *  Returns the Result as an Object with each name-value pair.
   *
   *  This will throw if any value is unnamed, or if there are
   *  any outstanding deferred errors.
   */
  toObject() {
    return l(this, gn).reduce((e, n, s) => (P(n != null, "value at index ${ index } unnamed", "UNSUPPORTED_OPERATION", {
      operation: "toObject()"
    }), n in e || (e[n] = this.getValue(n)), e), {});
  }
  /**
   *  @_ignore
   */
  slice(e, n) {
    e == null && (e = 0), e < 0 && (e += this.length, e < 0 && (e = 0)), n == null && (n = this.length), n < 0 && (n += this.length, n < 0 && (n = 0)), n > this.length && (n = this.length);
    const s = [], i = [];
    for (let o = e; o < n; o++)
      s.push(this[o]), i.push(l(this, gn)[o]);
    return new Ls(Ei, s, i);
  }
  /**
   *  @_ignore
   */
  filter(e, n) {
    const s = [], i = [];
    for (let o = 0; o < this.length; o++) {
      const a = this[o];
      a instanceof Error && Ts(`index ${o}`, a), e.call(n, a, o, this) && (s.push(a), i.push(l(this, gn)[o]));
    }
    return new Ls(Ei, s, i);
  }
  /**
   *  @_ignore
   */
  map(e, n) {
    const s = [];
    for (let i = 0; i < this.length; i++) {
      const o = this[i];
      o instanceof Error && Ts(`index ${i}`, o), s.push(e.call(n, o, i, this));
    }
    return s;
  }
  /**
   *  Returns the value for %%name%%.
   *
   *  Since it is possible to have a key whose name conflicts with
   *  a method on a [[Result]] or its superclass Array, or any
   *  JavaScript keyword, this ensures all named values are still
   *  accessible by name.
   */
  getValue(e) {
    const n = l(this, gn).indexOf(e);
    if (n === -1)
      return;
    const s = this[n];
    return s instanceof Error && Ts(`property ${JSON.stringify(e)}`, s.error), s;
  }
  /**
   *  Creates a new [[Result]] for %%items%% with each entry
   *  also accessible by its corresponding name in %%keys%%.
   */
  static fromItems(e, n) {
    return new Ls(Ei, e, n);
  }
};
gn = new WeakMap();
let Mi = Ls;
function dc(r) {
  let t = Yt(r);
  return P(t.length <= St, "value out-of-bounds", "BUFFER_OVERRUN", { buffer: t, length: St, offset: t.length }), t.length !== St && (t = Ht(pt([Jo.slice(t.length % St), t]))), t;
}
class sn {
  constructor(t, e, n, s) {
    // The coder name:
    //   - address, uint256, tuple, array, etc.
    A(this, "name");
    // The fully expanded type, including composite types:
    //   - address, uint256, tuple(address,bytes), uint256[3][4][],  etc.
    A(this, "type");
    // The localName bound in the signature, in this example it is "baz":
    //   - tuple(address foo, uint bar) baz
    A(this, "localName");
    // Whether this type is dynamic:
    //  - Dynamic: bytes, string, address[], tuple(boolean[]), etc.
    //  - Not Dynamic: address, uint256, boolean[3], tuple(address, uint8)
    A(this, "dynamic");
    M(this, { name: t, type: e, localName: n, dynamic: s }, {
      name: "string",
      type: "string",
      localName: "string",
      dynamic: "boolean"
    });
  }
  _throwError(t, e) {
    y(!1, t, this.localName, e);
  }
}
var Ve, zn, Lr, Ii;
class jo {
  constructor() {
    b(this, Lr);
    // An array of WordSize lengthed objects to concatenation
    b(this, Ve, void 0);
    b(this, zn, void 0);
    d(this, Ve, []), d(this, zn, 0);
  }
  get data() {
    return pt(l(this, Ve));
  }
  get length() {
    return l(this, zn);
  }
  appendWriter(t) {
    return O(this, Lr, Ii).call(this, Ht(t.data));
  }
  // Arrayish item; pad on the right to *nearest* WordSize
  writeBytes(t) {
    let e = Ht(t);
    const n = e.length % St;
    return n && (e = Ht(pt([e, Jo.slice(n)]))), O(this, Lr, Ii).call(this, e);
  }
  // Numeric item; pad on the left *to* WordSize
  writeValue(t) {
    return O(this, Lr, Ii).call(this, dc(t));
  }
  // Inserts a numeric place-holder, returning a callback that can
  // be used to asjust the value later
  writeUpdatableValue() {
    const t = l(this, Ve).length;
    return l(this, Ve).push(Jo), d(this, zn, l(this, zn) + St), (e) => {
      l(this, Ve)[t] = dc(e);
    };
  }
}
Ve = new WeakMap(), zn = new WeakMap(), Lr = new WeakSet(), Ii = function(t) {
  return l(this, Ve).push(t), d(this, zn, l(this, zn) + t.length), t.length;
};
var zt, te, Xi, Bu;
const Va = class Va {
  constructor(t, e) {
    b(this, Xi);
    // Allows incomplete unpadded data to be read; otherwise an error
    // is raised if attempting to overrun the buffer. This is required
    // to deal with an old Solidity bug, in which event data for
    // external (not public thoguh) was tightly packed.
    A(this, "allowLoose");
    b(this, zt, void 0);
    b(this, te, void 0);
    M(this, { allowLoose: !!e }), d(this, zt, Ht(t)), d(this, te, 0);
  }
  get data() {
    return F(l(this, zt));
  }
  get dataLength() {
    return l(this, zt).length;
  }
  get consumed() {
    return l(this, te);
  }
  get bytes() {
    return new Uint8Array(l(this, zt));
  }
  // Create a sub-reader with the same underlying data, but offset
  subReader(t) {
    return new Va(l(this, zt).slice(l(this, te) + t), this.allowLoose);
  }
  // Read bytes
  readBytes(t, e) {
    let n = O(this, Xi, Bu).call(this, 0, t, !!e);
    return d(this, te, l(this, te) + n.length), n.slice(0, t);
  }
  // Read a numeric values
  readValue() {
    return Ea(this.readBytes(St));
  }
  readIndex() {
    return kf(this.readBytes(St));
  }
};
zt = new WeakMap(), te = new WeakMap(), Xi = new WeakSet(), Bu = function(t, e, n) {
  let s = Math.ceil(e / St) * St;
  return l(this, te) + s > l(this, zt).length && (this.allowLoose && n && l(this, te) + e <= l(this, zt).length ? s = e : P(!1, "data out-of-bounds", "BUFFER_OVERRUN", {
    buffer: Ht(l(this, zt)),
    length: l(this, zt).length,
    offset: l(this, te) + s
  })), l(this, zt).slice(l(this, te), l(this, te) + s);
};
let zo = Va;
function Gi(r) {
  if (!Number.isSafeInteger(r) || r < 0)
    throw new Error(`Wrong positive integer: ${r}`);
}
function Pa(r, ...t) {
  if (!(r instanceof Uint8Array))
    throw new Error("Expected Uint8Array");
  if (t.length > 0 && !t.includes(r.length))
    throw new Error(`Expected Uint8Array of length ${t}, not of length=${r.length}`);
}
function Xf(r) {
  if (typeof r != "function" || typeof r.create != "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  Gi(r.outputLen), Gi(r.blockLen);
}
function ms(r, t = !0) {
  if (r.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (t && r.finished)
    throw new Error("Hash#digest() has already been called");
}
function Ru(r, t) {
  Pa(r);
  const e = t.outputLen;
  if (r.length < e)
    throw new Error(`digestInto() expects output buffer of length at least ${e}`);
}
const Oo = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const ku = (r) => r instanceof Uint8Array, qf = (r) => new Uint32Array(r.buffer, r.byteOffset, Math.floor(r.byteLength / 4)), Io = (r) => new DataView(r.buffer, r.byteOffset, r.byteLength), ve = (r, t) => r << 32 - t | r >>> t, $f = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!$f)
  throw new Error("Non little-endian hardware is not supported");
function th(r) {
  if (typeof r != "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof r}`);
  return new Uint8Array(new TextEncoder().encode(r));
}
function ao(r) {
  if (typeof r == "string" && (r = th(r)), !ku(r))
    throw new Error(`expected Uint8Array, got ${typeof r}`);
  return r;
}
function eh(...r) {
  const t = new Uint8Array(r.reduce((n, s) => n + s.length, 0));
  let e = 0;
  return r.forEach((n) => {
    if (!ku(n))
      throw new Error("Uint8Array expected");
    t.set(n, e), e += n.length;
  }), t;
}
class Na {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
}
function Su(r) {
  const t = (n) => r().update(ao(n)).digest(), e = r();
  return t.outputLen = e.outputLen, t.blockLen = e.blockLen, t.create = () => r(), t;
}
function nh(r = 32) {
  if (Oo && typeof Oo.getRandomValues == "function")
    return Oo.getRandomValues(new Uint8Array(r));
  throw new Error("crypto.getRandomValues must be defined");
}
class Uu extends Na {
  constructor(t, e) {
    super(), this.finished = !1, this.destroyed = !1, Xf(t);
    const n = ao(e);
    if (this.iHash = t.create(), typeof this.iHash.update != "function")
      throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
    const s = this.blockLen, i = new Uint8Array(s);
    i.set(n.length > s ? t.create().update(n).digest() : n);
    for (let o = 0; o < i.length; o++)
      i[o] ^= 54;
    this.iHash.update(i), this.oHash = t.create();
    for (let o = 0; o < i.length; o++)
      i[o] ^= 106;
    this.oHash.update(i), i.fill(0);
  }
  update(t) {
    return ms(this), this.iHash.update(t), this;
  }
  digestInto(t) {
    ms(this), Pa(t, this.outputLen), this.finished = !0, this.iHash.digestInto(t), this.oHash.update(t), this.oHash.digestInto(t), this.destroy();
  }
  digest() {
    const t = new Uint8Array(this.oHash.outputLen);
    return this.digestInto(t), t;
  }
  _cloneInto(t) {
    t || (t = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash: e, iHash: n, finished: s, destroyed: i, blockLen: o, outputLen: a } = this;
    return t = t, t.finished = s, t.destroyed = i, t.blockLen = o, t.outputLen = a, t.oHash = e._cloneInto(t.oHash), t.iHash = n._cloneInto(t.iHash), t;
  }
  destroy() {
    this.destroyed = !0, this.oHash.destroy(), this.iHash.destroy();
  }
}
const Du = (r, t, e) => new Uu(r, t).update(e).digest();
Du.create = (r, t) => new Uu(r, t);
function rh(r, t, e, n) {
  if (typeof r.setBigUint64 == "function")
    return r.setBigUint64(t, e, n);
  const s = BigInt(32), i = BigInt(4294967295), o = Number(e >> s & i), a = Number(e & i), c = n ? 4 : 0, u = n ? 0 : 4;
  r.setUint32(t + c, o, n), r.setUint32(t + u, a, n);
}
class sh extends Na {
  constructor(t, e, n, s) {
    super(), this.blockLen = t, this.outputLen = e, this.padOffset = n, this.isLE = s, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(t), this.view = Io(this.buffer);
  }
  update(t) {
    ms(this);
    const { view: e, buffer: n, blockLen: s } = this;
    t = ao(t);
    const i = t.length;
    for (let o = 0; o < i; ) {
      const a = Math.min(s - this.pos, i - o);
      if (a === s) {
        const c = Io(t);
        for (; s <= i - o; o += s)
          this.process(c, o);
        continue;
      }
      n.set(t.subarray(o, o + a), this.pos), this.pos += a, o += a, this.pos === s && (this.process(e, 0), this.pos = 0);
    }
    return this.length += t.length, this.roundClean(), this;
  }
  digestInto(t) {
    ms(this), Ru(t, this), this.finished = !0;
    const { buffer: e, view: n, blockLen: s, isLE: i } = this;
    let { pos: o } = this;
    e[o++] = 128, this.buffer.subarray(o).fill(0), this.padOffset > s - o && (this.process(n, 0), o = 0);
    for (let h = o; h < s; h++)
      e[h] = 0;
    rh(n, s - 8, BigInt(this.length * 8), i), this.process(n, 0);
    const a = Io(t), c = this.outputLen;
    if (c % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const u = c / 4, f = this.get();
    if (u > f.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let h = 0; h < u; h++)
      a.setUint32(4 * h, f[h], i);
  }
  digest() {
    const { buffer: t, outputLen: e } = this;
    this.digestInto(t);
    const n = t.slice(0, e);
    return this.destroy(), n;
  }
  _cloneInto(t) {
    t || (t = new this.constructor()), t.set(...this.get());
    const { blockLen: e, buffer: n, length: s, finished: i, destroyed: o, pos: a } = this;
    return t.length = s, t.pos = a, t.finished = i, t.destroyed = o, s % e && t.buffer.set(n), t;
  }
}
const ih = (r, t, e) => r & t ^ ~r & e, oh = (r, t, e) => r & t ^ r & e ^ t & e, ah = /* @__PURE__ */ new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]), un = /* @__PURE__ */ new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]), ln = /* @__PURE__ */ new Uint32Array(64);
class ch extends sh {
  constructor() {
    super(64, 32, 8, !1), this.A = un[0] | 0, this.B = un[1] | 0, this.C = un[2] | 0, this.D = un[3] | 0, this.E = un[4] | 0, this.F = un[5] | 0, this.G = un[6] | 0, this.H = un[7] | 0;
  }
  get() {
    const { A: t, B: e, C: n, D: s, E: i, F: o, G: a, H: c } = this;
    return [t, e, n, s, i, o, a, c];
  }
  // prettier-ignore
  set(t, e, n, s, i, o, a, c) {
    this.A = t | 0, this.B = e | 0, this.C = n | 0, this.D = s | 0, this.E = i | 0, this.F = o | 0, this.G = a | 0, this.H = c | 0;
  }
  process(t, e) {
    for (let h = 0; h < 16; h++, e += 4)
      ln[h] = t.getUint32(e, !1);
    for (let h = 16; h < 64; h++) {
      const g = ln[h - 15], w = ln[h - 2], E = ve(g, 7) ^ ve(g, 18) ^ g >>> 3, m = ve(w, 17) ^ ve(w, 19) ^ w >>> 10;
      ln[h] = m + ln[h - 7] + E + ln[h - 16] | 0;
    }
    let { A: n, B: s, C: i, D: o, E: a, F: c, G: u, H: f } = this;
    for (let h = 0; h < 64; h++) {
      const g = ve(a, 6) ^ ve(a, 11) ^ ve(a, 25), w = f + g + ih(a, c, u) + ah[h] + ln[h] | 0, m = (ve(n, 2) ^ ve(n, 13) ^ ve(n, 22)) + oh(n, s, i) | 0;
      f = u, u = c, c = a, a = o + w | 0, o = i, i = s, s = n, n = w + m | 0;
    }
    n = n + this.A | 0, s = s + this.B | 0, i = i + this.C | 0, o = o + this.D | 0, a = a + this.E | 0, c = c + this.F | 0, u = u + this.G | 0, f = f + this.H | 0, this.set(n, s, i, o, a, c, u, f);
  }
  roundClean() {
    ln.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
  }
}
const uh = /* @__PURE__ */ Su(() => new ch()), vi = /* @__PURE__ */ BigInt(2 ** 32 - 1), pc = /* @__PURE__ */ BigInt(32);
function lh(r, t = !1) {
  return t ? { h: Number(r & vi), l: Number(r >> pc & vi) } : { h: Number(r >> pc & vi) | 0, l: Number(r & vi) | 0 };
}
function fh(r, t = !1) {
  let e = new Uint32Array(r.length), n = new Uint32Array(r.length);
  for (let s = 0; s < r.length; s++) {
    const { h: i, l: o } = lh(r[s], t);
    [e[s], n[s]] = [i, o];
  }
  return [e, n];
}
const hh = (r, t, e) => r << e | t >>> 32 - e, dh = (r, t, e) => t << e | r >>> 32 - e, ph = (r, t, e) => t << e - 32 | r >>> 64 - e, gh = (r, t, e) => r << e - 32 | t >>> 64 - e, [Fu, Lu, Mu] = [[], [], []], yh = /* @__PURE__ */ BigInt(0), Os = /* @__PURE__ */ BigInt(1), mh = /* @__PURE__ */ BigInt(2), wh = /* @__PURE__ */ BigInt(7), Ah = /* @__PURE__ */ BigInt(256), bh = /* @__PURE__ */ BigInt(113);
for (let r = 0, t = Os, e = 1, n = 0; r < 24; r++) {
  [e, n] = [n, (2 * e + 3 * n) % 5], Fu.push(2 * (5 * n + e)), Lu.push((r + 1) * (r + 2) / 2 % 64);
  let s = yh;
  for (let i = 0; i < 7; i++)
    t = (t << Os ^ (t >> wh) * bh) % Ah, t & mh && (s ^= Os << (Os << /* @__PURE__ */ BigInt(i)) - Os);
  Mu.push(s);
}
const [Eh, vh] = /* @__PURE__ */ fh(Mu, !0), gc = (r, t, e) => e > 32 ? ph(r, t, e) : hh(r, t, e), yc = (r, t, e) => e > 32 ? gh(r, t, e) : dh(r, t, e);
function xh(r, t = 24) {
  const e = new Uint32Array(10);
  for (let n = 24 - t; n < 24; n++) {
    for (let o = 0; o < 10; o++)
      e[o] = r[o] ^ r[o + 10] ^ r[o + 20] ^ r[o + 30] ^ r[o + 40];
    for (let o = 0; o < 10; o += 2) {
      const a = (o + 8) % 10, c = (o + 2) % 10, u = e[c], f = e[c + 1], h = gc(u, f, 1) ^ e[a], g = yc(u, f, 1) ^ e[a + 1];
      for (let w = 0; w < 50; w += 10)
        r[o + w] ^= h, r[o + w + 1] ^= g;
    }
    let s = r[2], i = r[3];
    for (let o = 0; o < 24; o++) {
      const a = Lu[o], c = gc(s, i, a), u = yc(s, i, a), f = Fu[o];
      s = r[f], i = r[f + 1], r[f] = c, r[f + 1] = u;
    }
    for (let o = 0; o < 50; o += 10) {
      for (let a = 0; a < 10; a++)
        e[a] = r[o + a];
      for (let a = 0; a < 10; a++)
        r[o + a] ^= ~e[(a + 2) % 10] & e[(a + 4) % 10];
    }
    r[0] ^= Eh[n], r[1] ^= vh[n];
  }
  e.fill(0);
}
class Ca extends Na {
  // NOTE: we accept arguments in bytes instead of bits here.
  constructor(t, e, n, s = !1, i = 24) {
    if (super(), this.blockLen = t, this.suffix = e, this.outputLen = n, this.enableXOF = s, this.rounds = i, this.pos = 0, this.posOut = 0, this.finished = !1, this.destroyed = !1, Gi(n), 0 >= this.blockLen || this.blockLen >= 200)
      throw new Error("Sha3 supports only keccak-f1600 function");
    this.state = new Uint8Array(200), this.state32 = qf(this.state);
  }
  keccak() {
    xh(this.state32, this.rounds), this.posOut = 0, this.pos = 0;
  }
  update(t) {
    ms(this);
    const { blockLen: e, state: n } = this;
    t = ao(t);
    const s = t.length;
    for (let i = 0; i < s; ) {
      const o = Math.min(e - this.pos, s - i);
      for (let a = 0; a < o; a++)
        n[this.pos++] ^= t[i++];
      this.pos === e && this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished)
      return;
    this.finished = !0;
    const { state: t, suffix: e, pos: n, blockLen: s } = this;
    t[n] ^= e, e & 128 && n === s - 1 && this.keccak(), t[s - 1] ^= 128, this.keccak();
  }
  writeInto(t) {
    ms(this, !1), Pa(t), this.finish();
    const e = this.state, { blockLen: n } = this;
    for (let s = 0, i = t.length; s < i; ) {
      this.posOut >= n && this.keccak();
      const o = Math.min(n - this.posOut, i - s);
      t.set(e.subarray(this.posOut, this.posOut + o), s), this.posOut += o, s += o;
    }
    return t;
  }
  xofInto(t) {
    if (!this.enableXOF)
      throw new Error("XOF is not possible for this instance");
    return this.writeInto(t);
  }
  xof(t) {
    return Gi(t), this.xofInto(new Uint8Array(t));
  }
  digestInto(t) {
    if (Ru(t, this), this.finished)
      throw new Error("digest() was already called");
    return this.writeInto(t), this.destroy(), t;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = !0, this.state.fill(0);
  }
  _cloneInto(t) {
    const { blockLen: e, suffix: n, outputLen: s, rounds: i, enableXOF: o } = this;
    return t || (t = new Ca(e, n, s, o, i)), t.state32.set(this.state32), t.pos = this.pos, t.posOut = this.posOut, t.finished = this.finished, t.rounds = i, t.suffix = n, t.outputLen = s, t.enableXOF = o, t.destroyed = this.destroyed, t;
  }
}
const Ph = (r, t, e) => Su(() => new Ca(t, r, e)), Nh = /* @__PURE__ */ Ph(1, 136, 256 / 8);
let Gu = !1;
const Qu = function(r) {
  return Nh(r);
};
let Hu = Qu;
function it(r) {
  const t = X(r, "data");
  return F(Hu(t));
}
it._ = Qu;
it.lock = function() {
  Gu = !0;
};
it.register = function(r) {
  if (Gu)
    throw new TypeError("keccak256 is locked");
  Hu = r;
};
Object.freeze(it);
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const _u = BigInt(0), co = BigInt(1), Ch = BigInt(2), uo = (r) => r instanceof Uint8Array, Th = /* @__PURE__ */ Array.from({ length: 256 }, (r, t) => t.toString(16).padStart(2, "0"));
function ws(r) {
  if (!uo(r))
    throw new Error("Uint8Array expected");
  let t = "";
  for (let e = 0; e < r.length; e++)
    t += Th[r[e]];
  return t;
}
function Vu(r) {
  const t = r.toString(16);
  return t.length & 1 ? `0${t}` : t;
}
function Ta(r) {
  if (typeof r != "string")
    throw new Error("hex string expected, got " + typeof r);
  return BigInt(r === "" ? "0" : `0x${r}`);
}
function As(r) {
  if (typeof r != "string")
    throw new Error("hex string expected, got " + typeof r);
  const t = r.length;
  if (t % 2)
    throw new Error("padded hex string expected, got unpadded hex of length " + t);
  const e = new Uint8Array(t / 2);
  for (let n = 0; n < e.length; n++) {
    const s = n * 2, i = r.slice(s, s + 2), o = Number.parseInt(i, 16);
    if (Number.isNaN(o) || o < 0)
      throw new Error("Invalid byte sequence");
    e[n] = o;
  }
  return e;
}
function ir(r) {
  return Ta(ws(r));
}
function Oa(r) {
  if (!uo(r))
    throw new Error("Uint8Array expected");
  return Ta(ws(Uint8Array.from(r).reverse()));
}
function bs(r, t) {
  return As(r.toString(16).padStart(t * 2, "0"));
}
function Ia(r, t) {
  return bs(r, t).reverse();
}
function Oh(r) {
  return As(Vu(r));
}
function he(r, t, e) {
  let n;
  if (typeof t == "string")
    try {
      n = As(t);
    } catch (i) {
      throw new Error(`${r} must be valid hex string, got "${t}". Cause: ${i}`);
    }
  else if (uo(t))
    n = Uint8Array.from(t);
  else
    throw new Error(`${r} must be hex string or Uint8Array`);
  const s = n.length;
  if (typeof e == "number" && s !== e)
    throw new Error(`${r} expected ${e} bytes, got ${s}`);
  return n;
}
function Qs(...r) {
  const t = new Uint8Array(r.reduce((n, s) => n + s.length, 0));
  let e = 0;
  return r.forEach((n) => {
    if (!uo(n))
      throw new Error("Uint8Array expected");
    t.set(n, e), e += n.length;
  }), t;
}
function Ih(r, t) {
  if (r.length !== t.length)
    return !1;
  for (let e = 0; e < r.length; e++)
    if (r[e] !== t[e])
      return !1;
  return !0;
}
function Bh(r) {
  if (typeof r != "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof r}`);
  return new Uint8Array(new TextEncoder().encode(r));
}
function Rh(r) {
  let t;
  for (t = 0; r > _u; r >>= co, t += 1)
    ;
  return t;
}
function kh(r, t) {
  return r >> BigInt(t) & co;
}
const Sh = (r, t, e) => r | (e ? co : _u) << BigInt(t), Ba = (r) => (Ch << BigInt(r - 1)) - co, Bo = (r) => new Uint8Array(r), mc = (r) => Uint8Array.from(r);
function Ju(r, t, e) {
  if (typeof r != "number" || r < 2)
    throw new Error("hashLen must be a number");
  if (typeof t != "number" || t < 2)
    throw new Error("qByteLen must be a number");
  if (typeof e != "function")
    throw new Error("hmacFn must be a function");
  let n = Bo(r), s = Bo(r), i = 0;
  const o = () => {
    n.fill(1), s.fill(0), i = 0;
  }, a = (...h) => e(s, n, ...h), c = (h = Bo()) => {
    s = a(mc([0]), h), n = a(), h.length !== 0 && (s = a(mc([1]), h), n = a());
  }, u = () => {
    if (i++ >= 1e3)
      throw new Error("drbg: tried 1000 values");
    let h = 0;
    const g = [];
    for (; h < t; ) {
      n = a();
      const w = n.slice();
      g.push(w), h += n.length;
    }
    return Qs(...g);
  };
  return (h, g) => {
    o(), c(h);
    let w;
    for (; !(w = g(u())); )
      c();
    return o(), w;
  };
}
const Uh = {
  bigint: (r) => typeof r == "bigint",
  function: (r) => typeof r == "function",
  boolean: (r) => typeof r == "boolean",
  string: (r) => typeof r == "string",
  stringOrUint8Array: (r) => typeof r == "string" || r instanceof Uint8Array,
  isSafeInteger: (r) => Number.isSafeInteger(r),
  array: (r) => Array.isArray(r),
  field: (r, t) => t.Fp.isValid(r),
  hash: (r) => typeof r == "function" && Number.isSafeInteger(r.outputLen)
};
function di(r, t, e = {}) {
  const n = (s, i, o) => {
    const a = Uh[i];
    if (typeof a != "function")
      throw new Error(`Invalid validator "${i}", expected function`);
    const c = r[s];
    if (!(o && c === void 0) && !a(c, r))
      throw new Error(`Invalid param ${String(s)}=${c} (${typeof c}), expected ${i}`);
  };
  for (const [s, i] of Object.entries(t))
    n(s, i, !1);
  for (const [s, i] of Object.entries(e))
    n(s, i, !0);
  return r;
}
const Dh = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  bitGet: kh,
  bitLen: Rh,
  bitMask: Ba,
  bitSet: Sh,
  bytesToHex: ws,
  bytesToNumberBE: ir,
  bytesToNumberLE: Oa,
  concatBytes: Qs,
  createHmacDrbg: Ju,
  ensureBytes: he,
  equalBytes: Ih,
  hexToBytes: As,
  hexToNumber: Ta,
  numberToBytesBE: bs,
  numberToBytesLE: Ia,
  numberToHexUnpadded: Vu,
  numberToVarBytesBE: Oh,
  utf8ToBytes: Bh,
  validateObject: di
}, Symbol.toStringTag, { value: "Module" }));
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const yt = BigInt(0), lt = BigInt(1), Dn = BigInt(2), Fh = BigInt(3), Ko = BigInt(4), wc = BigInt(5), Ac = BigInt(8);
BigInt(9);
BigInt(16);
function Mt(r, t) {
  const e = r % t;
  return e >= yt ? e : t + e;
}
function Lh(r, t, e) {
  if (e <= yt || t < yt)
    throw new Error("Expected power/modulo > 0");
  if (e === lt)
    return yt;
  let n = lt;
  for (; t > yt; )
    t & lt && (n = n * r % e), r = r * r % e, t >>= lt;
  return n;
}
function Xt(r, t, e) {
  let n = r;
  for (; t-- > yt; )
    n *= n, n %= e;
  return n;
}
function Wo(r, t) {
  if (r === yt || t <= yt)
    throw new Error(`invert: expected positive integers, got n=${r} mod=${t}`);
  let e = Mt(r, t), n = t, s = yt, i = lt;
  for (; e !== yt; ) {
    const a = n / e, c = n % e, u = s - i * a;
    n = e, e = c, s = i, i = u;
  }
  if (n !== lt)
    throw new Error("invert: does not exist");
  return Mt(s, t);
}
function Mh(r) {
  const t = (r - lt) / Dn;
  let e, n, s;
  for (e = r - lt, n = 0; e % Dn === yt; e /= Dn, n++)
    ;
  for (s = Dn; s < r && Lh(s, t, r) !== r - lt; s++)
    ;
  if (n === 1) {
    const o = (r + lt) / Ko;
    return function(c, u) {
      const f = c.pow(u, o);
      if (!c.eql(c.sqr(f), u))
        throw new Error("Cannot find square root");
      return f;
    };
  }
  const i = (e + lt) / Dn;
  return function(a, c) {
    if (a.pow(c, t) === a.neg(a.ONE))
      throw new Error("Cannot find square root");
    let u = n, f = a.pow(a.mul(a.ONE, s), e), h = a.pow(c, i), g = a.pow(c, e);
    for (; !a.eql(g, a.ONE); ) {
      if (a.eql(g, a.ZERO))
        return a.ZERO;
      let w = 1;
      for (let m = a.sqr(g); w < u && !a.eql(m, a.ONE); w++)
        m = a.sqr(m);
      const E = a.pow(f, lt << BigInt(u - w - 1));
      f = a.sqr(E), h = a.mul(h, E), g = a.mul(g, f), u = w;
    }
    return h;
  };
}
function Gh(r) {
  if (r % Ko === Fh) {
    const t = (r + lt) / Ko;
    return function(n, s) {
      const i = n.pow(s, t);
      if (!n.eql(n.sqr(i), s))
        throw new Error("Cannot find square root");
      return i;
    };
  }
  if (r % Ac === wc) {
    const t = (r - wc) / Ac;
    return function(n, s) {
      const i = n.mul(s, Dn), o = n.pow(i, t), a = n.mul(s, o), c = n.mul(n.mul(a, Dn), o), u = n.mul(a, n.sub(c, n.ONE));
      if (!n.eql(n.sqr(u), s))
        throw new Error("Cannot find square root");
      return u;
    };
  }
  return Mh(r);
}
const Qh = [
  "create",
  "isValid",
  "is0",
  "neg",
  "inv",
  "sqrt",
  "sqr",
  "eql",
  "add",
  "sub",
  "mul",
  "pow",
  "div",
  "addN",
  "subN",
  "mulN",
  "sqrN"
];
function Hh(r) {
  const t = {
    ORDER: "bigint",
    MASK: "bigint",
    BYTES: "isSafeInteger",
    BITS: "isSafeInteger"
  }, e = Qh.reduce((n, s) => (n[s] = "function", n), t);
  return di(r, e);
}
function _h(r, t, e) {
  if (e < yt)
    throw new Error("Expected power > 0");
  if (e === yt)
    return r.ONE;
  if (e === lt)
    return t;
  let n = r.ONE, s = t;
  for (; e > yt; )
    e & lt && (n = r.mul(n, s)), s = r.sqr(s), e >>= lt;
  return n;
}
function Vh(r, t) {
  const e = new Array(t.length), n = t.reduce((i, o, a) => r.is0(o) ? i : (e[a] = i, r.mul(i, o)), r.ONE), s = r.inv(n);
  return t.reduceRight((i, o, a) => r.is0(o) ? i : (e[a] = r.mul(i, e[a]), r.mul(i, o)), s), e;
}
function ju(r, t) {
  const e = t !== void 0 ? t : r.toString(2).length, n = Math.ceil(e / 8);
  return { nBitLength: e, nByteLength: n };
}
function Jh(r, t, e = !1, n = {}) {
  if (r <= yt)
    throw new Error(`Expected Field ORDER > 0, got ${r}`);
  const { nBitLength: s, nByteLength: i } = ju(r, t);
  if (i > 2048)
    throw new Error("Field lengths over 2048 bytes are not supported");
  const o = Gh(r), a = Object.freeze({
    ORDER: r,
    BITS: s,
    BYTES: i,
    MASK: Ba(s),
    ZERO: yt,
    ONE: lt,
    create: (c) => Mt(c, r),
    isValid: (c) => {
      if (typeof c != "bigint")
        throw new Error(`Invalid field element: expected bigint, got ${typeof c}`);
      return yt <= c && c < r;
    },
    is0: (c) => c === yt,
    isOdd: (c) => (c & lt) === lt,
    neg: (c) => Mt(-c, r),
    eql: (c, u) => c === u,
    sqr: (c) => Mt(c * c, r),
    add: (c, u) => Mt(c + u, r),
    sub: (c, u) => Mt(c - u, r),
    mul: (c, u) => Mt(c * u, r),
    pow: (c, u) => _h(a, c, u),
    div: (c, u) => Mt(c * Wo(u, r), r),
    // Same as above, but doesn't normalize
    sqrN: (c) => c * c,
    addN: (c, u) => c + u,
    subN: (c, u) => c - u,
    mulN: (c, u) => c * u,
    inv: (c) => Wo(c, r),
    sqrt: n.sqrt || ((c) => o(a, c)),
    invertBatch: (c) => Vh(a, c),
    // TODO: do we really need constant cmov?
    // We don't have const-time bigints anyway, so probably will be not very useful
    cmov: (c, u, f) => f ? u : c,
    toBytes: (c) => e ? Ia(c, i) : bs(c, i),
    fromBytes: (c) => {
      if (c.length !== i)
        throw new Error(`Fp.fromBytes: expected ${i}, got ${c.length}`);
      return e ? Oa(c) : ir(c);
    }
  });
  return Object.freeze(a);
}
function zu(r) {
  if (typeof r != "bigint")
    throw new Error("field order must be bigint");
  const t = r.toString(2).length;
  return Math.ceil(t / 8);
}
function Ku(r) {
  const t = zu(r);
  return t + Math.ceil(t / 2);
}
function jh(r, t, e = !1) {
  const n = r.length, s = zu(t), i = Ku(t);
  if (n < 16 || n < i || n > 1024)
    throw new Error(`expected ${i}-1024 bytes of input, got ${n}`);
  const o = e ? ir(r) : Oa(r), a = Mt(o, t - lt) + lt;
  return e ? Ia(a, s) : bs(a, s);
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const zh = BigInt(0), Ro = BigInt(1);
function Kh(r, t) {
  const e = (s, i) => {
    const o = i.negate();
    return s ? o : i;
  }, n = (s) => {
    const i = Math.ceil(t / s) + 1, o = 2 ** (s - 1);
    return { windows: i, windowSize: o };
  };
  return {
    constTimeNegate: e,
    // non-const time multiplication ladder
    unsafeLadder(s, i) {
      let o = r.ZERO, a = s;
      for (; i > zh; )
        i & Ro && (o = o.add(a)), a = a.double(), i >>= Ro;
      return o;
    },
    /**
     * Creates a wNAF precomputation window. Used for caching.
     * Default window size is set by `utils.precompute()` and is equal to 8.
     * Number of precomputed points depends on the curve size:
     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
     * - 𝑊 is the window size
     * - 𝑛 is the bitlength of the curve order.
     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
     * @returns precomputed point tables flattened to a single array
     */
    precomputeWindow(s, i) {
      const { windows: o, windowSize: a } = n(i), c = [];
      let u = s, f = u;
      for (let h = 0; h < o; h++) {
        f = u, c.push(f);
        for (let g = 1; g < a; g++)
          f = f.add(u), c.push(f);
        u = f.double();
      }
      return c;
    },
    /**
     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
     * @param W window size
     * @param precomputes precomputed tables
     * @param n scalar (we don't check here, but should be less than curve order)
     * @returns real and fake (for const-time) points
     */
    wNAF(s, i, o) {
      const { windows: a, windowSize: c } = n(s);
      let u = r.ZERO, f = r.BASE;
      const h = BigInt(2 ** s - 1), g = 2 ** s, w = BigInt(s);
      for (let E = 0; E < a; E++) {
        const m = E * c;
        let x = Number(o & h);
        o >>= w, x > c && (x -= g, o += Ro);
        const v = m, B = m + Math.abs(x) - 1, T = E % 2 !== 0, H = x < 0;
        x === 0 ? f = f.add(e(T, i[v])) : u = u.add(e(H, i[B]));
      }
      return { p: u, f };
    },
    wNAFCached(s, i, o, a) {
      const c = s._WINDOW_SIZE || 1;
      let u = i.get(s);
      return u || (u = this.precomputeWindow(s, c), c !== 1 && i.set(s, a(u))), this.wNAF(c, u, o);
    }
  };
}
function Wu(r) {
  return Hh(r.Fp), di(r, {
    n: "bigint",
    h: "bigint",
    Gx: "field",
    Gy: "field"
  }, {
    nBitLength: "isSafeInteger",
    nByteLength: "isSafeInteger"
  }), Object.freeze({
    ...ju(r.n, r.nBitLength),
    ...r,
    p: r.Fp.ORDER
  });
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function Wh(r) {
  const t = Wu(r);
  di(t, {
    a: "field",
    b: "field"
  }, {
    allowedPrivateKeyLengths: "array",
    wrapPrivateKey: "boolean",
    isTorsionFree: "function",
    clearCofactor: "function",
    allowInfinityPoint: "boolean",
    fromBytes: "function",
    toBytes: "function"
  });
  const { endo: e, Fp: n, a: s } = t;
  if (e) {
    if (!n.eql(s, n.ZERO))
      throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
    if (typeof e != "object" || typeof e.beta != "bigint" || typeof e.splitScalar != "function")
      throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
  }
  return Object.freeze({ ...t });
}
const { bytesToNumberBE: Yh, hexToBytes: Zh } = Dh, Ln = {
  // asn.1 DER encoding utils
  Err: class extends Error {
    constructor(t = "") {
      super(t);
    }
  },
  _parseInt(r) {
    const { Err: t } = Ln;
    if (r.length < 2 || r[0] !== 2)
      throw new t("Invalid signature integer tag");
    const e = r[1], n = r.subarray(2, e + 2);
    if (!e || n.length !== e)
      throw new t("Invalid signature integer: wrong length");
    if (n[0] & 128)
      throw new t("Invalid signature integer: negative");
    if (n[0] === 0 && !(n[1] & 128))
      throw new t("Invalid signature integer: unnecessary leading zero");
    return { d: Yh(n), l: r.subarray(e + 2) };
  },
  toSig(r) {
    const { Err: t } = Ln, e = typeof r == "string" ? Zh(r) : r;
    if (!(e instanceof Uint8Array))
      throw new Error("ui8a expected");
    let n = e.length;
    if (n < 2 || e[0] != 48)
      throw new t("Invalid signature tag");
    if (e[1] !== n - 2)
      throw new t("Invalid signature: incorrect length");
    const { d: s, l: i } = Ln._parseInt(e.subarray(2)), { d: o, l: a } = Ln._parseInt(i);
    if (a.length)
      throw new t("Invalid signature: left bytes after parsing");
    return { r: s, s: o };
  },
  hexFromSig(r) {
    const t = (u) => Number.parseInt(u[0], 16) & 8 ? "00" + u : u, e = (u) => {
      const f = u.toString(16);
      return f.length & 1 ? `0${f}` : f;
    }, n = t(e(r.s)), s = t(e(r.r)), i = n.length / 2, o = s.length / 2, a = e(i), c = e(o);
    return `30${e(o + i + 4)}02${c}${s}02${a}${n}`;
  }
}, $e = BigInt(0), ie = BigInt(1);
BigInt(2);
const bc = BigInt(3);
BigInt(4);
function Xh(r) {
  const t = Wh(r), { Fp: e } = t, n = t.toBytes || ((E, m, x) => {
    const v = m.toAffine();
    return Qs(Uint8Array.from([4]), e.toBytes(v.x), e.toBytes(v.y));
  }), s = t.fromBytes || ((E) => {
    const m = E.subarray(1), x = e.fromBytes(m.subarray(0, e.BYTES)), v = e.fromBytes(m.subarray(e.BYTES, 2 * e.BYTES));
    return { x, y: v };
  });
  function i(E) {
    const { a: m, b: x } = t, v = e.sqr(E), B = e.mul(v, E);
    return e.add(e.add(B, e.mul(E, m)), x);
  }
  if (!e.eql(e.sqr(t.Gy), i(t.Gx)))
    throw new Error("bad generator point: equation left != right");
  function o(E) {
    return typeof E == "bigint" && $e < E && E < t.n;
  }
  function a(E) {
    if (!o(E))
      throw new Error("Expected valid bigint: 0 < bigint < curve.n");
  }
  function c(E) {
    const { allowedPrivateKeyLengths: m, nByteLength: x, wrapPrivateKey: v, n: B } = t;
    if (m && typeof E != "bigint") {
      if (E instanceof Uint8Array && (E = ws(E)), typeof E != "string" || !m.includes(E.length))
        throw new Error("Invalid key");
      E = E.padStart(x * 2, "0");
    }
    let T;
    try {
      T = typeof E == "bigint" ? E : ir(he("private key", E, x));
    } catch {
      throw new Error(`private key must be ${x} bytes, hex or bigint, not ${typeof E}`);
    }
    return v && (T = Mt(T, B)), a(T), T;
  }
  const u = /* @__PURE__ */ new Map();
  function f(E) {
    if (!(E instanceof h))
      throw new Error("ProjectivePoint expected");
  }
  class h {
    constructor(m, x, v) {
      if (this.px = m, this.py = x, this.pz = v, m == null || !e.isValid(m))
        throw new Error("x required");
      if (x == null || !e.isValid(x))
        throw new Error("y required");
      if (v == null || !e.isValid(v))
        throw new Error("z required");
    }
    // Does not validate if the point is on-curve.
    // Use fromHex instead, or call assertValidity() later.
    static fromAffine(m) {
      const { x, y: v } = m || {};
      if (!m || !e.isValid(x) || !e.isValid(v))
        throw new Error("invalid affine point");
      if (m instanceof h)
        throw new Error("projective point not allowed");
      const B = (T) => e.eql(T, e.ZERO);
      return B(x) && B(v) ? h.ZERO : new h(x, v, e.ONE);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    /**
     * Takes a bunch of Projective Points but executes only one
     * inversion on all of them. Inversion is very slow operation,
     * so this improves performance massively.
     * Optimization: converts a list of projective points to a list of identical points with Z=1.
     */
    static normalizeZ(m) {
      const x = e.invertBatch(m.map((v) => v.pz));
      return m.map((v, B) => v.toAffine(x[B])).map(h.fromAffine);
    }
    /**
     * Converts hash string or Uint8Array to Point.
     * @param hex short/long ECDSA hex
     */
    static fromHex(m) {
      const x = h.fromAffine(s(he("pointHex", m)));
      return x.assertValidity(), x;
    }
    // Multiplies generator point by privateKey.
    static fromPrivateKey(m) {
      return h.BASE.multiply(c(m));
    }
    // "Private method", don't use it directly
    _setWindowSize(m) {
      this._WINDOW_SIZE = m, u.delete(this);
    }
    // A point on curve is valid if it conforms to equation.
    assertValidity() {
      if (this.is0()) {
        if (t.allowInfinityPoint && !e.is0(this.py))
          return;
        throw new Error("bad point: ZERO");
      }
      const { x: m, y: x } = this.toAffine();
      if (!e.isValid(m) || !e.isValid(x))
        throw new Error("bad point: x or y not FE");
      const v = e.sqr(x), B = i(m);
      if (!e.eql(v, B))
        throw new Error("bad point: equation left != right");
      if (!this.isTorsionFree())
        throw new Error("bad point: not in prime-order subgroup");
    }
    hasEvenY() {
      const { y: m } = this.toAffine();
      if (e.isOdd)
        return !e.isOdd(m);
      throw new Error("Field doesn't support isOdd");
    }
    /**
     * Compare one point to another.
     */
    equals(m) {
      f(m);
      const { px: x, py: v, pz: B } = this, { px: T, py: H, pz: G } = m, U = e.eql(e.mul(x, G), e.mul(T, B)), D = e.eql(e.mul(v, G), e.mul(H, B));
      return U && D;
    }
    /**
     * Flips point to one corresponding to (x, -y) in Affine coordinates.
     */
    negate() {
      return new h(this.px, e.neg(this.py), this.pz);
    }
    // Renes-Costello-Batina exception-free doubling formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 3
    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
    double() {
      const { a: m, b: x } = t, v = e.mul(x, bc), { px: B, py: T, pz: H } = this;
      let G = e.ZERO, U = e.ZERO, D = e.ZERO, S = e.mul(B, B), nt = e.mul(T, T), Y = e.mul(H, H), K = e.mul(B, T);
      return K = e.add(K, K), D = e.mul(B, H), D = e.add(D, D), G = e.mul(m, D), U = e.mul(v, Y), U = e.add(G, U), G = e.sub(nt, U), U = e.add(nt, U), U = e.mul(G, U), G = e.mul(K, G), D = e.mul(v, D), Y = e.mul(m, Y), K = e.sub(S, Y), K = e.mul(m, K), K = e.add(K, D), D = e.add(S, S), S = e.add(D, S), S = e.add(S, Y), S = e.mul(S, K), U = e.add(U, S), Y = e.mul(T, H), Y = e.add(Y, Y), S = e.mul(Y, K), G = e.sub(G, S), D = e.mul(Y, nt), D = e.add(D, D), D = e.add(D, D), new h(G, U, D);
    }
    // Renes-Costello-Batina exception-free addition formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 1
    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
    add(m) {
      f(m);
      const { px: x, py: v, pz: B } = this, { px: T, py: H, pz: G } = m;
      let U = e.ZERO, D = e.ZERO, S = e.ZERO;
      const nt = t.a, Y = e.mul(t.b, bc);
      let K = e.mul(x, T), Ot = e.mul(v, H), bt = e.mul(B, G), ht = e.add(x, v), C = e.add(T, H);
      ht = e.mul(ht, C), C = e.add(K, Ot), ht = e.sub(ht, C), C = e.add(x, B);
      let k = e.add(T, G);
      return C = e.mul(C, k), k = e.add(K, bt), C = e.sub(C, k), k = e.add(v, B), U = e.add(H, G), k = e.mul(k, U), U = e.add(Ot, bt), k = e.sub(k, U), S = e.mul(nt, C), U = e.mul(Y, bt), S = e.add(U, S), U = e.sub(Ot, S), S = e.add(Ot, S), D = e.mul(U, S), Ot = e.add(K, K), Ot = e.add(Ot, K), bt = e.mul(nt, bt), C = e.mul(Y, C), Ot = e.add(Ot, bt), bt = e.sub(K, bt), bt = e.mul(nt, bt), C = e.add(C, bt), K = e.mul(Ot, C), D = e.add(D, K), K = e.mul(k, C), U = e.mul(ht, U), U = e.sub(U, K), K = e.mul(ht, Ot), S = e.mul(k, S), S = e.add(S, K), new h(U, D, S);
    }
    subtract(m) {
      return this.add(m.negate());
    }
    is0() {
      return this.equals(h.ZERO);
    }
    wNAF(m) {
      return w.wNAFCached(this, u, m, (x) => {
        const v = e.invertBatch(x.map((B) => B.pz));
        return x.map((B, T) => B.toAffine(v[T])).map(h.fromAffine);
      });
    }
    /**
     * Non-constant-time multiplication. Uses double-and-add algorithm.
     * It's faster, but should only be used when you don't care about
     * an exposed private key e.g. sig verification, which works over *public* keys.
     */
    multiplyUnsafe(m) {
      const x = h.ZERO;
      if (m === $e)
        return x;
      if (a(m), m === ie)
        return this;
      const { endo: v } = t;
      if (!v)
        return w.unsafeLadder(this, m);
      let { k1neg: B, k1: T, k2neg: H, k2: G } = v.splitScalar(m), U = x, D = x, S = this;
      for (; T > $e || G > $e; )
        T & ie && (U = U.add(S)), G & ie && (D = D.add(S)), S = S.double(), T >>= ie, G >>= ie;
      return B && (U = U.negate()), H && (D = D.negate()), D = new h(e.mul(D.px, v.beta), D.py, D.pz), U.add(D);
    }
    /**
     * Constant time multiplication.
     * Uses wNAF method. Windowed method may be 10% faster,
     * but takes 2x longer to generate and consumes 2x memory.
     * Uses precomputes when available.
     * Uses endomorphism for Koblitz curves.
     * @param scalar by which the point would be multiplied
     * @returns New point
     */
    multiply(m) {
      a(m);
      let x = m, v, B;
      const { endo: T } = t;
      if (T) {
        const { k1neg: H, k1: G, k2neg: U, k2: D } = T.splitScalar(x);
        let { p: S, f: nt } = this.wNAF(G), { p: Y, f: K } = this.wNAF(D);
        S = w.constTimeNegate(H, S), Y = w.constTimeNegate(U, Y), Y = new h(e.mul(Y.px, T.beta), Y.py, Y.pz), v = S.add(Y), B = nt.add(K);
      } else {
        const { p: H, f: G } = this.wNAF(x);
        v = H, B = G;
      }
      return h.normalizeZ([v, B])[0];
    }
    /**
     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
     * Not using Strauss-Shamir trick: precomputation tables are faster.
     * The trick could be useful if both P and Q are not G (not in our case).
     * @returns non-zero affine point
     */
    multiplyAndAddUnsafe(m, x, v) {
      const B = h.BASE, T = (G, U) => U === $e || U === ie || !G.equals(B) ? G.multiplyUnsafe(U) : G.multiply(U), H = T(this, x).add(T(m, v));
      return H.is0() ? void 0 : H;
    }
    // Converts Projective point to affine (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.
    // (x, y, z) ∋ (x=x/z, y=y/z)
    toAffine(m) {
      const { px: x, py: v, pz: B } = this, T = this.is0();
      m == null && (m = T ? e.ONE : e.inv(B));
      const H = e.mul(x, m), G = e.mul(v, m), U = e.mul(B, m);
      if (T)
        return { x: e.ZERO, y: e.ZERO };
      if (!e.eql(U, e.ONE))
        throw new Error("invZ was invalid");
      return { x: H, y: G };
    }
    isTorsionFree() {
      const { h: m, isTorsionFree: x } = t;
      if (m === ie)
        return !0;
      if (x)
        return x(h, this);
      throw new Error("isTorsionFree() has not been declared for the elliptic curve");
    }
    clearCofactor() {
      const { h: m, clearCofactor: x } = t;
      return m === ie ? this : x ? x(h, this) : this.multiplyUnsafe(t.h);
    }
    toRawBytes(m = !0) {
      return this.assertValidity(), n(h, this, m);
    }
    toHex(m = !0) {
      return ws(this.toRawBytes(m));
    }
  }
  h.BASE = new h(t.Gx, t.Gy, e.ONE), h.ZERO = new h(e.ZERO, e.ONE, e.ZERO);
  const g = t.nBitLength, w = Kh(h, t.endo ? Math.ceil(g / 2) : g);
  return {
    CURVE: t,
    ProjectivePoint: h,
    normPrivateKeyToScalar: c,
    weierstrassEquation: i,
    isWithinCurveOrder: o
  };
}
function qh(r) {
  const t = Wu(r);
  return di(t, {
    hash: "hash",
    hmac: "function",
    randomBytes: "function"
  }, {
    bits2int: "function",
    bits2int_modN: "function",
    lowS: "boolean"
  }), Object.freeze({ lowS: !0, ...t });
}
function $h(r) {
  const t = qh(r), { Fp: e, n } = t, s = e.BYTES + 1, i = 2 * e.BYTES + 1;
  function o(C) {
    return $e < C && C < e.ORDER;
  }
  function a(C) {
    return Mt(C, n);
  }
  function c(C) {
    return Wo(C, n);
  }
  const { ProjectivePoint: u, normPrivateKeyToScalar: f, weierstrassEquation: h, isWithinCurveOrder: g } = Xh({
    ...t,
    toBytes(C, k, _) {
      const $ = k.toAffine(), Z = e.toBytes($.x), ct = Qs;
      return _ ? ct(Uint8Array.from([k.hasEvenY() ? 2 : 3]), Z) : ct(Uint8Array.from([4]), Z, e.toBytes($.y));
    },
    fromBytes(C) {
      const k = C.length, _ = C[0], $ = C.subarray(1);
      if (k === s && (_ === 2 || _ === 3)) {
        const Z = ir($);
        if (!o(Z))
          throw new Error("Point is not on curve");
        const ct = h(Z);
        let Et = e.sqrt(ct);
        const vt = (Et & ie) === ie;
        return (_ & 1) === 1 !== vt && (Et = e.neg(Et)), { x: Z, y: Et };
      } else if (k === i && _ === 4) {
        const Z = e.fromBytes($.subarray(0, e.BYTES)), ct = e.fromBytes($.subarray(e.BYTES, 2 * e.BYTES));
        return { x: Z, y: ct };
      } else
        throw new Error(`Point of length ${k} was invalid. Expected ${s} compressed bytes or ${i} uncompressed bytes`);
    }
  }), w = (C) => ws(bs(C, t.nByteLength));
  function E(C) {
    const k = n >> ie;
    return C > k;
  }
  function m(C) {
    return E(C) ? a(-C) : C;
  }
  const x = (C, k, _) => ir(C.slice(k, _));
  class v {
    constructor(k, _, $) {
      this.r = k, this.s = _, this.recovery = $, this.assertValidity();
    }
    // pair (bytes of r, bytes of s)
    static fromCompact(k) {
      const _ = t.nByteLength;
      return k = he("compactSignature", k, _ * 2), new v(x(k, 0, _), x(k, _, 2 * _));
    }
    // DER encoded ECDSA signature
    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
    static fromDER(k) {
      const { r: _, s: $ } = Ln.toSig(he("DER", k));
      return new v(_, $);
    }
    assertValidity() {
      if (!g(this.r))
        throw new Error("r must be 0 < r < CURVE.n");
      if (!g(this.s))
        throw new Error("s must be 0 < s < CURVE.n");
    }
    addRecoveryBit(k) {
      return new v(this.r, this.s, k);
    }
    recoverPublicKey(k) {
      const { r: _, s: $, recovery: Z } = this, ct = D(he("msgHash", k));
      if (Z == null || ![0, 1, 2, 3].includes(Z))
        throw new Error("recovery id invalid");
      const Et = Z === 2 || Z === 3 ? _ + t.n : _;
      if (Et >= e.ORDER)
        throw new Error("recovery id 2 or 3 invalid");
      const vt = Z & 1 ? "03" : "02", ce = u.fromHex(vt + w(Et)), Ee = c(Et), on = a(-ct * Ee), Se = a($ * Ee), Zt = u.BASE.multiplyAndAddUnsafe(ce, on, Se);
      if (!Zt)
        throw new Error("point at infinify");
      return Zt.assertValidity(), Zt;
    }
    // Signatures should be low-s, to prevent malleability.
    hasHighS() {
      return E(this.s);
    }
    normalizeS() {
      return this.hasHighS() ? new v(this.r, a(-this.s), this.recovery) : this;
    }
    // DER-encoded
    toDERRawBytes() {
      return As(this.toDERHex());
    }
    toDERHex() {
      return Ln.hexFromSig({ r: this.r, s: this.s });
    }
    // padded bytes of r, then padded bytes of s
    toCompactRawBytes() {
      return As(this.toCompactHex());
    }
    toCompactHex() {
      return w(this.r) + w(this.s);
    }
  }
  const B = {
    isValidPrivateKey(C) {
      try {
        return f(C), !0;
      } catch {
        return !1;
      }
    },
    normPrivateKeyToScalar: f,
    /**
     * Produces cryptographically secure private key from random of size
     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
     */
    randomPrivateKey: () => {
      const C = Ku(t.n);
      return jh(t.randomBytes(C), t.n);
    },
    /**
     * Creates precompute table for an arbitrary EC point. Makes point "cached".
     * Allows to massively speed-up `point.multiply(scalar)`.
     * @returns cached point
     * @example
     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
     * fast.multiply(privKey); // much faster ECDH now
     */
    precompute(C = 8, k = u.BASE) {
      return k._setWindowSize(C), k.multiply(BigInt(3)), k;
    }
  };
  function T(C, k = !0) {
    return u.fromPrivateKey(C).toRawBytes(k);
  }
  function H(C) {
    const k = C instanceof Uint8Array, _ = typeof C == "string", $ = (k || _) && C.length;
    return k ? $ === s || $ === i : _ ? $ === 2 * s || $ === 2 * i : C instanceof u;
  }
  function G(C, k, _ = !0) {
    if (H(C))
      throw new Error("first arg must be private key");
    if (!H(k))
      throw new Error("second arg must be public key");
    return u.fromHex(k).multiply(f(C)).toRawBytes(_);
  }
  const U = t.bits2int || function(C) {
    const k = ir(C), _ = C.length * 8 - t.nBitLength;
    return _ > 0 ? k >> BigInt(_) : k;
  }, D = t.bits2int_modN || function(C) {
    return a(U(C));
  }, S = Ba(t.nBitLength);
  function nt(C) {
    if (typeof C != "bigint")
      throw new Error("bigint expected");
    if (!($e <= C && C < S))
      throw new Error(`bigint expected < 2^${t.nBitLength}`);
    return bs(C, t.nByteLength);
  }
  function Y(C, k, _ = K) {
    if (["recovered", "canonical"].some((ue) => ue in _))
      throw new Error("sign() legacy options not supported");
    const { hash: $, randomBytes: Z } = t;
    let { lowS: ct, prehash: Et, extraEntropy: vt } = _;
    ct == null && (ct = !0), C = he("msgHash", C), Et && (C = he("prehashed msgHash", $(C)));
    const ce = D(C), Ee = f(k), on = [nt(Ee), nt(ce)];
    if (vt != null) {
      const ue = vt === !0 ? Z(e.BYTES) : vt;
      on.push(he("extraEntropy", ue));
    }
    const Se = Qs(...on), Zt = ce;
    function an(ue) {
      const le = U(ue);
      if (!g(le))
        return;
      const mi = c(le), Ue = u.BASE.multiply(le).toAffine(), Ft = a(Ue.x);
      if (Ft === $e)
        return;
      const cn = a(mi * a(Zt + Ft * Ee));
      if (cn === $e)
        return;
      let Sn = (Ue.x === Ft ? 0 : 2) | Number(Ue.y & ie), Ps = cn;
      return ct && E(cn) && (Ps = m(cn), Sn ^= 1), new v(Ft, Ps, Sn);
    }
    return { seed: Se, k2sig: an };
  }
  const K = { lowS: t.lowS, prehash: !1 }, Ot = { lowS: t.lowS, prehash: !1 };
  function bt(C, k, _ = K) {
    const { seed: $, k2sig: Z } = Y(C, k, _), ct = t;
    return Ju(ct.hash.outputLen, ct.nByteLength, ct.hmac)($, Z);
  }
  u.BASE._setWindowSize(8);
  function ht(C, k, _, $ = Ot) {
    var Ue;
    const Z = C;
    if (k = he("msgHash", k), _ = he("publicKey", _), "strict" in $)
      throw new Error("options.strict was renamed to lowS");
    const { lowS: ct, prehash: Et } = $;
    let vt, ce;
    try {
      if (typeof Z == "string" || Z instanceof Uint8Array)
        try {
          vt = v.fromDER(Z);
        } catch (Ft) {
          if (!(Ft instanceof Ln.Err))
            throw Ft;
          vt = v.fromCompact(Z);
        }
      else if (typeof Z == "object" && typeof Z.r == "bigint" && typeof Z.s == "bigint") {
        const { r: Ft, s: cn } = Z;
        vt = new v(Ft, cn);
      } else
        throw new Error("PARSE");
      ce = u.fromHex(_);
    } catch (Ft) {
      if (Ft.message === "PARSE")
        throw new Error("signature must be Signature instance, Uint8Array or hex string");
      return !1;
    }
    if (ct && vt.hasHighS())
      return !1;
    Et && (k = t.hash(k));
    const { r: Ee, s: on } = vt, Se = D(k), Zt = c(on), an = a(Se * Zt), ue = a(Ee * Zt), le = (Ue = u.BASE.multiplyAndAddUnsafe(ce, an, ue)) == null ? void 0 : Ue.toAffine();
    return le ? a(le.x) === Ee : !1;
  }
  return {
    CURVE: t,
    getPublicKey: T,
    getSharedSecret: G,
    sign: bt,
    verify: ht,
    ProjectivePoint: u,
    Signature: v,
    utils: B
  };
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function td(r) {
  return {
    hash: r,
    hmac: (t, ...e) => Du(r, t, eh(...e)),
    randomBytes: nh
  };
}
function ed(r, t) {
  const e = (n) => $h({ ...r, ...td(n) });
  return Object.freeze({ ...e(t), create: e });
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const Yu = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"), Ec = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"), nd = BigInt(1), Yo = BigInt(2), vc = (r, t) => (r + t / Yo) / t;
function rd(r) {
  const t = Yu, e = BigInt(3), n = BigInt(6), s = BigInt(11), i = BigInt(22), o = BigInt(23), a = BigInt(44), c = BigInt(88), u = r * r * r % t, f = u * u * r % t, h = Xt(f, e, t) * f % t, g = Xt(h, e, t) * f % t, w = Xt(g, Yo, t) * u % t, E = Xt(w, s, t) * w % t, m = Xt(E, i, t) * E % t, x = Xt(m, a, t) * m % t, v = Xt(x, c, t) * x % t, B = Xt(v, a, t) * m % t, T = Xt(B, e, t) * f % t, H = Xt(T, o, t) * E % t, G = Xt(H, n, t) * u % t, U = Xt(G, Yo, t);
  if (!Zo.eql(Zo.sqr(U), r))
    throw new Error("Cannot find square root");
  return U;
}
const Zo = Jh(Yu, void 0, void 0, { sqrt: rd }), fn = ed({
  a: BigInt(0),
  b: BigInt(7),
  Fp: Zo,
  n: Ec,
  // Base point (x, y) aka generator point
  Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
  Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
  h: BigInt(1),
  lowS: !0,
  /**
   * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
   * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
   * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
   * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
   */
  endo: {
    beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
    splitScalar: (r) => {
      const t = Ec, e = BigInt("0x3086d221a7d46bcde86c90e49284eb15"), n = -nd * BigInt("0xe4437ed6010e88286f547fa90abfe4c3"), s = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"), i = e, o = BigInt("0x100000000000000000000000000000000"), a = vc(i * r, t), c = vc(-n * r, t);
      let u = Mt(r - a * e - c * s, t), f = Mt(-a * n - c * i, t);
      const h = u > o, g = f > o;
      if (h && (u = t - u), g && (f = t - f), u > o || f > o)
        throw new Error("splitScalar: Endomorphism failed, k=" + r);
      return { k1neg: h, k1: u, k2neg: g, k2: f };
    }
  }
}, uh);
BigInt(0);
fn.ProjectivePoint;
const Xo = "0x0000000000000000000000000000000000000000", xc = "0x0000000000000000000000000000000000000000000000000000000000000000", Pc = BigInt(0), Nc = BigInt(1), Cc = BigInt(2), Tc = BigInt(27), Oc = BigInt(28), xi = BigInt(35), yr = {};
function Ic(r) {
  return ar(Yt(r), 32);
}
var Mr, Gr, Qr, Kn;
const fe = class fe {
  /**
   *  @private
   */
  constructor(t, e, n, s) {
    b(this, Mr, void 0);
    b(this, Gr, void 0);
    b(this, Qr, void 0);
    b(this, Kn, void 0);
    so(t, yr, "Signature"), d(this, Mr, e), d(this, Gr, n), d(this, Qr, s), d(this, Kn, null);
  }
  /**
   *  The ``r`` value for a signautre.
   *
   *  This represents the ``x`` coordinate of a "reference" or
   *  challenge point, from which the ``y`` can be computed.
   */
  get r() {
    return l(this, Mr);
  }
  set r(t) {
    y(Ir(t) === 32, "invalid r", "value", t), d(this, Mr, F(t));
  }
  /**
   *  The ``s`` value for a signature.
   */
  get s() {
    return l(this, Gr);
  }
  set s(t) {
    y(Ir(t) === 32, "invalid s", "value", t);
    const e = F(t);
    y(parseInt(e.substring(0, 3)) < 8, "non-canonical s", "value", e), d(this, Gr, e);
  }
  /**
   *  The ``v`` value for a signature.
   *
   *  Since a given ``x`` value for ``r`` has two possible values for
   *  its correspondin ``y``, the ``v`` indicates which of the two ``y``
   *  values to use.
   *
   *  It is normalized to the values ``27`` or ``28`` for legacy
   *  purposes.
   */
  get v() {
    return l(this, Qr);
  }
  set v(t) {
    const e = V(t, "value");
    y(e === 27 || e === 28, "invalid v", "v", t), d(this, Qr, e);
  }
  /**
   *  The EIP-155 ``v`` for legacy transactions. For non-legacy
   *  transactions, this value is ``null``.
   */
  get networkV() {
    return l(this, Kn);
  }
  /**
   *  The chain ID for EIP-155 legacy transactions. For non-legacy
   *  transactions, this value is ``null``.
   */
  get legacyChainId() {
    const t = this.networkV;
    return t == null ? null : fe.getChainId(t);
  }
  /**
   *  The ``yParity`` for the signature.
   *
   *  See ``v`` for more details on how this value is used.
   */
  get yParity() {
    return this.v === 27 ? 0 : 1;
  }
  /**
   *  The [[link-eip-2098]] compact representation of the ``yParity``
   *  and ``s`` compacted into a single ``bytes32``.
   */
  get yParityAndS() {
    const t = X(this.s);
    return this.yParity && (t[0] |= 128), F(t);
  }
  /**
   *  The [[link-eip-2098]] compact representation.
   */
  get compactSerialized() {
    return pt([this.r, this.yParityAndS]);
  }
  /**
   *  The serialized representation.
   */
  get serialized() {
    return pt([this.r, this.s, this.yParity ? "0x1c" : "0x1b"]);
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return `Signature { r: "${this.r}", s: "${this.s}", yParity: ${this.yParity}, networkV: ${this.networkV} }`;
  }
  /**
   *  Returns a new identical [[Signature]].
   */
  clone() {
    const t = new fe(yr, this.r, this.s, this.v);
    return this.networkV && d(t, Kn, this.networkV), t;
  }
  /**
   *  Returns a representation that is compatible with ``JSON.stringify``.
   */
  toJSON() {
    const t = this.networkV;
    return {
      _type: "signature",
      networkV: t != null ? t.toString() : null,
      r: this.r,
      s: this.s,
      v: this.v
    };
  }
  /**
   *  Compute the chain ID from the ``v`` in a legacy EIP-155 transactions.
   *
   *  @example:
   *    Signature.getChainId(45)
   *    //_result:
   *
   *    Signature.getChainId(46)
   *    //_result:
   */
  static getChainId(t) {
    const e = L(t, "v");
    return e == Tc || e == Oc ? Pc : (y(e >= xi, "invalid EIP-155 v", "v", t), (e - xi) / Cc);
  }
  /**
   *  Compute the ``v`` for a chain ID for a legacy EIP-155 transactions.
   *
   *  Legacy transactions which use [[link-eip-155]] hijack the ``v``
   *  property to include the chain ID.
   *
   *  @example:
   *    Signature.getChainIdV(5, 27)
   *    //_result:
   *
   *    Signature.getChainIdV(5, 28)
   *    //_result:
   *
   */
  static getChainIdV(t, e) {
    return L(t) * Cc + BigInt(35 + e - 27);
  }
  /**
   *  Compute the normalized legacy transaction ``v`` from a ``yParirty``,
   *  a legacy transaction ``v`` or a legacy [[link-eip-155]] transaction.
   *
   *  @example:
   *    // The values 0 and 1 imply v is actually yParity
   *    Signature.getNormalizedV(0)
   *    //_result:
   *
   *    // Legacy non-EIP-1559 transaction (i.e. 27 or 28)
   *    Signature.getNormalizedV(27)
   *    //_result:
   *
   *    // Legacy EIP-155 transaction (i.e. >= 35)
   *    Signature.getNormalizedV(46)
   *    //_result:
   *
   *    // Invalid values throw
   *    Signature.getNormalizedV(5)
   *    //_error:
   */
  static getNormalizedV(t) {
    const e = L(t);
    return e === Pc || e === Tc ? 27 : e === Nc || e === Oc ? 28 : (y(e >= xi, "invalid v", "v", t), e & Nc ? 27 : 28);
  }
  /**
   *  Creates a new [[Signature]].
   *
   *  If no %%sig%% is provided, a new [[Signature]] is created
   *  with default values.
   *
   *  If %%sig%% is a string, it is parsed.
   */
  static from(t) {
    function e(u, f) {
      y(u, f, "signature", t);
    }
    if (t == null)
      return new fe(yr, xc, xc, 27);
    if (typeof t == "string") {
      const u = X(t, "signature");
      if (u.length === 64) {
        const f = F(u.slice(0, 32)), h = u.slice(32, 64), g = h[0] & 128 ? 28 : 27;
        return h[0] &= 127, new fe(yr, f, F(h), g);
      }
      if (u.length === 65) {
        const f = F(u.slice(0, 32)), h = u.slice(32, 64);
        e((h[0] & 128) === 0, "non-canonical s");
        const g = fe.getNormalizedV(u[64]);
        return new fe(yr, f, F(h), g);
      }
      e(!1, "invalid raw signature length");
    }
    if (t instanceof fe)
      return t.clone();
    const n = t.r;
    e(n != null, "missing r");
    const s = Ic(n), i = function(u, f) {
      if (u != null)
        return Ic(u);
      if (f != null) {
        e(ot(f, 32), "invalid yParityAndS");
        const h = X(f);
        return h[0] &= 127, F(h);
      }
      e(!1, "missing s");
    }(t.s, t.yParityAndS);
    e((X(i)[0] & 128) == 0, "non-canonical s");
    const { networkV: o, v: a } = function(u, f, h) {
      if (u != null) {
        const g = L(u);
        return {
          networkV: g >= xi ? g : void 0,
          v: fe.getNormalizedV(g)
        };
      }
      if (f != null)
        return e(ot(f, 32), "invalid yParityAndS"), { v: X(f)[0] & 128 ? 28 : 27 };
      if (h != null) {
        switch (V(h, "sig.yParity")) {
          case 0:
            return { v: 27 };
          case 1:
            return { v: 28 };
        }
        e(!1, "invalid yParity");
      }
      e(!1, "missing v");
    }(t.v, t.yParityAndS, t.yParity), c = new fe(yr, s, i, a);
    return o && d(c, Kn, o), e(t.yParity == null || V(t.yParity, "sig.yParity") === c.yParity, "yParity mismatch"), e(t.yParityAndS == null || t.yParityAndS === c.yParityAndS, "yParityAndS mismatch"), c;
  }
};
Mr = new WeakMap(), Gr = new WeakMap(), Qr = new WeakMap(), Kn = new WeakMap();
let we = fe;
var Je;
const Fn = class Fn {
  /**
   *  Creates a new **SigningKey** for %%privateKey%%.
   */
  constructor(t) {
    b(this, Je, void 0);
    y(Ir(t) === 32, "invalid private key", "privateKey", "[REDACTED]"), d(this, Je, F(t));
  }
  /**
   *  The private key.
   */
  get privateKey() {
    return l(this, Je);
  }
  /**
   *  The uncompressed public key.
   *
   * This will always begin with the prefix ``0x04`` and be 132
   * characters long (the ``0x`` prefix and 130 hexadecimal nibbles).
   */
  get publicKey() {
    return Fn.computePublicKey(l(this, Je));
  }
  /**
   *  The compressed public key.
   *
   *  This will always begin with either the prefix ``0x02`` or ``0x03``
   *  and be 68 characters long (the ``0x`` prefix and 33 hexadecimal
   *  nibbles)
   */
  get compressedPublicKey() {
    return Fn.computePublicKey(l(this, Je), !0);
  }
  /**
   *  Return the signature of the signed %%digest%%.
   */
  sign(t) {
    y(Ir(t) === 32, "invalid digest length", "digest", t);
    const e = fn.sign(Ht(t), Ht(l(this, Je)), {
      lowS: !0
    });
    return we.from({
      r: Bn(e.r, 32),
      s: Bn(e.s, 32),
      v: e.recovery ? 28 : 27
    });
  }
  /**
   *  Returns the [[link-wiki-ecdh]] shared secret between this
   *  private key and the %%other%% key.
   *
   *  The %%other%% key may be any type of key, a raw public key,
   *  a compressed/uncompressed pubic key or aprivate key.
   *
   *  Best practice is usually to use a cryptographic hash on the
   *  returned value before using it as a symetric secret.
   *
   *  @example:
   *    sign1 = new SigningKey(id("some-secret-1"))
   *    sign2 = new SigningKey(id("some-secret-2"))
   *
   *    // Notice that privA.computeSharedSecret(pubB)...
   *    sign1.computeSharedSecret(sign2.publicKey)
   *    //_result:
   *
   *    // ...is equal to privB.computeSharedSecret(pubA).
   *    sign2.computeSharedSecret(sign1.publicKey)
   *    //_result:
   */
  computeSharedSecret(t) {
    const e = Fn.computePublicKey(t);
    return F(fn.getSharedSecret(Ht(l(this, Je)), X(e), !1));
  }
  /**
   *  Compute the public key for %%key%%, optionally %%compressed%%.
   *
   *  The %%key%% may be any type of key, a raw public key, a
   *  compressed/uncompressed public key or private key.
   *
   *  @example:
   *    sign = new SigningKey(id("some-secret"));
   *
   *    // Compute the uncompressed public key for a private key
   *    SigningKey.computePublicKey(sign.privateKey)
   *    //_result:
   *
   *    // Compute the compressed public key for a private key
   *    SigningKey.computePublicKey(sign.privateKey, true)
   *    //_result:
   *
   *    // Compute the uncompressed public key
   *    SigningKey.computePublicKey(sign.publicKey, false);
   *    //_result:
   *
   *    // Compute the Compressed a public key
   *    SigningKey.computePublicKey(sign.publicKey, true);
   *    //_result:
   */
  static computePublicKey(t, e) {
    let n = X(t, "key");
    if (n.length === 32) {
      const i = fn.getPublicKey(n, !!e);
      return F(i);
    }
    if (n.length === 64) {
      const i = new Uint8Array(65);
      i[0] = 4, i.set(n, 1), n = i;
    }
    const s = fn.ProjectivePoint.fromHex(n);
    return F(s.toRawBytes(e));
  }
  /**
   *  Returns the public key for the private key which produced the
   *  %%signature%% for the given %%digest%%.
   *
   *  @example:
   *    key = new SigningKey(id("some-secret"))
   *    digest = id("hello world")
   *    sig = key.sign(digest)
   *
   *    // Notice the signer public key...
   *    key.publicKey
   *    //_result:
   *
   *    // ...is equal to the recovered public key
   *    SigningKey.recoverPublicKey(digest, sig)
   *    //_result:
   *
   */
  static recoverPublicKey(t, e) {
    y(Ir(t) === 32, "invalid digest length", "digest", t);
    const n = we.from(e);
    let s = fn.Signature.fromCompact(Ht(pt([n.r, n.s])));
    s = s.addRecoveryBit(n.yParity);
    const i = s.recoverPublicKey(Ht(t));
    return y(i != null, "invalid signautre for digest", "signature", e), "0x" + i.toHex(!1);
  }
  /**
   *  Returns the point resulting from adding the ellipic curve points
   *  %%p0%% and %%p1%%.
   *
   *  This is not a common function most developers should require, but
   *  can be useful for certain privacy-specific techniques.
   *
   *  For example, it is used by [[HDNodeWallet]] to compute child
   *  addresses from parent public keys and chain codes.
   */
  static addPoints(t, e, n) {
    const s = fn.ProjectivePoint.fromHex(Fn.computePublicKey(t).substring(2)), i = fn.ProjectivePoint.fromHex(Fn.computePublicKey(e).substring(2));
    return "0x" + s.add(i).toHex(!!n);
  }
};
Je = new WeakMap();
let Hs = Fn;
const sd = BigInt(0), id = BigInt(36);
function Bc(r) {
  r = r.toLowerCase();
  const t = r.substring(2).split(""), e = new Uint8Array(40);
  for (let s = 0; s < 40; s++)
    e[s] = t[s].charCodeAt(0);
  const n = X(it(e));
  for (let s = 0; s < 40; s += 2)
    n[s >> 1] >> 4 >= 8 && (t[s] = t[s].toUpperCase()), (n[s >> 1] & 15) >= 8 && (t[s + 1] = t[s + 1].toUpperCase());
  return "0x" + t.join("");
}
const Ra = {};
for (let r = 0; r < 10; r++)
  Ra[String(r)] = String(r);
for (let r = 0; r < 26; r++)
  Ra[String.fromCharCode(65 + r)] = String(10 + r);
const Rc = 15;
function od(r) {
  r = r.toUpperCase(), r = r.substring(4) + r.substring(0, 2) + "00";
  let t = r.split("").map((n) => Ra[n]).join("");
  for (; t.length >= Rc; ) {
    let n = t.substring(0, Rc);
    t = parseInt(n, 10) % 97 + t.substring(n.length);
  }
  let e = String(98 - parseInt(t, 10) % 97);
  for (; e.length < 2; )
    e = "0" + e;
  return e;
}
const ad = function() {
  const r = {};
  for (let t = 0; t < 36; t++) {
    const e = "0123456789abcdefghijklmnopqrstuvwxyz"[t];
    r[e] = BigInt(t);
  }
  return r;
}();
function cd(r) {
  r = r.toLowerCase();
  let t = sd;
  for (let e = 0; e < r.length; e++)
    t = t * id + ad[r[e]];
  return t;
}
function W(r) {
  if (y(typeof r == "string", "invalid address", "address", r), r.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
    r.startsWith("0x") || (r = "0x" + r);
    const t = Bc(r);
    return y(!r.match(/([A-F].*[a-f])|([a-f].*[A-F])/) || t === r, "bad address checksum", "address", r), t;
  }
  if (r.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
    y(r.substring(2, 4) === od(r), "bad icap checksum", "address", r);
    let t = cd(r.substring(4)).toString(16);
    for (; t.length < 40; )
      t = "0" + t;
    return Bc("0x" + t);
  }
  y(!1, "invalid address", "address", r);
}
function ud(r) {
  const t = W(r.from);
  let n = L(r.nonce, "tx.nonce").toString(16);
  return n === "0" ? n = "0x" : n.length % 2 ? n = "0x0" + n : n = "0x" + n, W(at(it(Gs([t, n])), 12));
}
function Zu(r) {
  return r && typeof r.getAddress == "function";
}
async function ko(r, t) {
  const e = await t;
  return (e == null || e === "0x0000000000000000000000000000000000000000") && (P(typeof r != "string", "unconfigured name", "UNCONFIGURED_NAME", { value: r }), y(!1, "invalid AddressLike value; did not resolve to a value address", "target", r)), W(e);
}
function Ut(r, t) {
  if (typeof r == "string")
    return r.match(/^0x[0-9a-f]{40}$/i) ? W(r) : (P(t != null, "ENS resolution requires a provider", "UNSUPPORTED_OPERATION", { operation: "resolveName" }), ko(r, t.resolveName(r)));
  if (Zu(r))
    return ko(r, r.getAddress());
  if (r && typeof r.then == "function")
    return ko(r, r);
  y(!1, "unsupported addressable value", "target", r);
}
const Le = {};
function R(r, t) {
  let e = !1;
  return t < 0 && (e = !0, t *= -1), new Tt(Le, `${e ? "" : "u"}int${t}`, r, { signed: e, width: t });
}
function z(r, t) {
  return new Tt(Le, `bytes${t || ""}`, r, { size: t });
}
const kc = Symbol.for("_ethers_typed");
var Wn;
const Me = class Me {
  /**
   *  @_ignore:
   */
  constructor(t, e, n, s) {
    /**
     *  The type, as a Solidity-compatible type.
     */
    A(this, "type");
    /**
     *  The actual value.
     */
    A(this, "value");
    b(this, Wn, void 0);
    /**
     *  @_ignore:
     */
    A(this, "_typedSymbol");
    s == null && (s = null), so(Le, t, "Typed"), M(this, { _typedSymbol: kc, type: e, value: n }), d(this, Wn, s), this.format();
  }
  /**
   *  Format the type as a Human-Readable type.
   */
  format() {
    if (this.type === "array")
      throw new Error("");
    if (this.type === "dynamicArray")
      throw new Error("");
    return this.type === "tuple" ? `tuple(${this.value.map((t) => t.format()).join(",")})` : this.type;
  }
  /**
   *  The default value returned by this type.
   */
  defaultValue() {
    return 0;
  }
  /**
   *  The minimum value for numeric types.
   */
  minValue() {
    return 0;
  }
  /**
   *  The maximum value for numeric types.
   */
  maxValue() {
    return 0;
  }
  /**
   *  Returns ``true`` and provides a type guard is this is a [[TypedBigInt]].
   */
  isBigInt() {
    return !!this.type.match(/^u?int[0-9]+$/);
  }
  /**
   *  Returns ``true`` and provides a type guard is this is a [[TypedData]].
   */
  isData() {
    return this.type.startsWith("bytes");
  }
  /**
   *  Returns ``true`` and provides a type guard is this is a [[TypedString]].
   */
  isString() {
    return this.type === "string";
  }
  /**
   *  Returns the tuple name, if this is a tuple. Throws otherwise.
   */
  get tupleName() {
    if (this.type !== "tuple")
      throw TypeError("not a tuple");
    return l(this, Wn);
  }
  // Returns the length of this type as an array
  // - `null` indicates the length is unforced, it could be dynamic
  // - `-1` indicates the length is dynamic
  // - any other value indicates it is a static array and is its length
  /**
   *  Returns the length of the array type or ``-1`` if it is dynamic.
   *
   *  Throws if the type is not an array.
   */
  get arrayLength() {
    if (this.type !== "array")
      throw TypeError("not an array");
    return l(this, Wn) === !0 ? -1 : l(this, Wn) === !1 ? this.value.length : null;
  }
  /**
   *  Returns a new **Typed** of %%type%% with the %%value%%.
   */
  static from(t, e) {
    return new Me(Le, t, e);
  }
  /**
   *  Return a new ``uint8`` type for %%v%%.
   */
  static uint8(t) {
    return R(t, 8);
  }
  /**
   *  Return a new ``uint16`` type for %%v%%.
   */
  static uint16(t) {
    return R(t, 16);
  }
  /**
   *  Return a new ``uint24`` type for %%v%%.
   */
  static uint24(t) {
    return R(t, 24);
  }
  /**
   *  Return a new ``uint32`` type for %%v%%.
   */
  static uint32(t) {
    return R(t, 32);
  }
  /**
   *  Return a new ``uint40`` type for %%v%%.
   */
  static uint40(t) {
    return R(t, 40);
  }
  /**
   *  Return a new ``uint48`` type for %%v%%.
   */
  static uint48(t) {
    return R(t, 48);
  }
  /**
   *  Return a new ``uint56`` type for %%v%%.
   */
  static uint56(t) {
    return R(t, 56);
  }
  /**
   *  Return a new ``uint64`` type for %%v%%.
   */
  static uint64(t) {
    return R(t, 64);
  }
  /**
   *  Return a new ``uint72`` type for %%v%%.
   */
  static uint72(t) {
    return R(t, 72);
  }
  /**
   *  Return a new ``uint80`` type for %%v%%.
   */
  static uint80(t) {
    return R(t, 80);
  }
  /**
   *  Return a new ``uint88`` type for %%v%%.
   */
  static uint88(t) {
    return R(t, 88);
  }
  /**
   *  Return a new ``uint96`` type for %%v%%.
   */
  static uint96(t) {
    return R(t, 96);
  }
  /**
   *  Return a new ``uint104`` type for %%v%%.
   */
  static uint104(t) {
    return R(t, 104);
  }
  /**
   *  Return a new ``uint112`` type for %%v%%.
   */
  static uint112(t) {
    return R(t, 112);
  }
  /**
   *  Return a new ``uint120`` type for %%v%%.
   */
  static uint120(t) {
    return R(t, 120);
  }
  /**
   *  Return a new ``uint128`` type for %%v%%.
   */
  static uint128(t) {
    return R(t, 128);
  }
  /**
   *  Return a new ``uint136`` type for %%v%%.
   */
  static uint136(t) {
    return R(t, 136);
  }
  /**
   *  Return a new ``uint144`` type for %%v%%.
   */
  static uint144(t) {
    return R(t, 144);
  }
  /**
   *  Return a new ``uint152`` type for %%v%%.
   */
  static uint152(t) {
    return R(t, 152);
  }
  /**
   *  Return a new ``uint160`` type for %%v%%.
   */
  static uint160(t) {
    return R(t, 160);
  }
  /**
   *  Return a new ``uint168`` type for %%v%%.
   */
  static uint168(t) {
    return R(t, 168);
  }
  /**
   *  Return a new ``uint176`` type for %%v%%.
   */
  static uint176(t) {
    return R(t, 176);
  }
  /**
   *  Return a new ``uint184`` type for %%v%%.
   */
  static uint184(t) {
    return R(t, 184);
  }
  /**
   *  Return a new ``uint192`` type for %%v%%.
   */
  static uint192(t) {
    return R(t, 192);
  }
  /**
   *  Return a new ``uint200`` type for %%v%%.
   */
  static uint200(t) {
    return R(t, 200);
  }
  /**
   *  Return a new ``uint208`` type for %%v%%.
   */
  static uint208(t) {
    return R(t, 208);
  }
  /**
   *  Return a new ``uint216`` type for %%v%%.
   */
  static uint216(t) {
    return R(t, 216);
  }
  /**
   *  Return a new ``uint224`` type for %%v%%.
   */
  static uint224(t) {
    return R(t, 224);
  }
  /**
   *  Return a new ``uint232`` type for %%v%%.
   */
  static uint232(t) {
    return R(t, 232);
  }
  /**
   *  Return a new ``uint240`` type for %%v%%.
   */
  static uint240(t) {
    return R(t, 240);
  }
  /**
   *  Return a new ``uint248`` type for %%v%%.
   */
  static uint248(t) {
    return R(t, 248);
  }
  /**
   *  Return a new ``uint256`` type for %%v%%.
   */
  static uint256(t) {
    return R(t, 256);
  }
  /**
   *  Return a new ``uint256`` type for %%v%%.
   */
  static uint(t) {
    return R(t, 256);
  }
  /**
   *  Return a new ``int8`` type for %%v%%.
   */
  static int8(t) {
    return R(t, -8);
  }
  /**
   *  Return a new ``int16`` type for %%v%%.
   */
  static int16(t) {
    return R(t, -16);
  }
  /**
   *  Return a new ``int24`` type for %%v%%.
   */
  static int24(t) {
    return R(t, -24);
  }
  /**
   *  Return a new ``int32`` type for %%v%%.
   */
  static int32(t) {
    return R(t, -32);
  }
  /**
   *  Return a new ``int40`` type for %%v%%.
   */
  static int40(t) {
    return R(t, -40);
  }
  /**
   *  Return a new ``int48`` type for %%v%%.
   */
  static int48(t) {
    return R(t, -48);
  }
  /**
   *  Return a new ``int56`` type for %%v%%.
   */
  static int56(t) {
    return R(t, -56);
  }
  /**
   *  Return a new ``int64`` type for %%v%%.
   */
  static int64(t) {
    return R(t, -64);
  }
  /**
   *  Return a new ``int72`` type for %%v%%.
   */
  static int72(t) {
    return R(t, -72);
  }
  /**
   *  Return a new ``int80`` type for %%v%%.
   */
  static int80(t) {
    return R(t, -80);
  }
  /**
   *  Return a new ``int88`` type for %%v%%.
   */
  static int88(t) {
    return R(t, -88);
  }
  /**
   *  Return a new ``int96`` type for %%v%%.
   */
  static int96(t) {
    return R(t, -96);
  }
  /**
   *  Return a new ``int104`` type for %%v%%.
   */
  static int104(t) {
    return R(t, -104);
  }
  /**
   *  Return a new ``int112`` type for %%v%%.
   */
  static int112(t) {
    return R(t, -112);
  }
  /**
   *  Return a new ``int120`` type for %%v%%.
   */
  static int120(t) {
    return R(t, -120);
  }
  /**
   *  Return a new ``int128`` type for %%v%%.
   */
  static int128(t) {
    return R(t, -128);
  }
  /**
   *  Return a new ``int136`` type for %%v%%.
   */
  static int136(t) {
    return R(t, -136);
  }
  /**
   *  Return a new ``int144`` type for %%v%%.
   */
  static int144(t) {
    return R(t, -144);
  }
  /**
   *  Return a new ``int52`` type for %%v%%.
   */
  static int152(t) {
    return R(t, -152);
  }
  /**
   *  Return a new ``int160`` type for %%v%%.
   */
  static int160(t) {
    return R(t, -160);
  }
  /**
   *  Return a new ``int168`` type for %%v%%.
   */
  static int168(t) {
    return R(t, -168);
  }
  /**
   *  Return a new ``int176`` type for %%v%%.
   */
  static int176(t) {
    return R(t, -176);
  }
  /**
   *  Return a new ``int184`` type for %%v%%.
   */
  static int184(t) {
    return R(t, -184);
  }
  /**
   *  Return a new ``int92`` type for %%v%%.
   */
  static int192(t) {
    return R(t, -192);
  }
  /**
   *  Return a new ``int200`` type for %%v%%.
   */
  static int200(t) {
    return R(t, -200);
  }
  /**
   *  Return a new ``int208`` type for %%v%%.
   */
  static int208(t) {
    return R(t, -208);
  }
  /**
   *  Return a new ``int216`` type for %%v%%.
   */
  static int216(t) {
    return R(t, -216);
  }
  /**
   *  Return a new ``int224`` type for %%v%%.
   */
  static int224(t) {
    return R(t, -224);
  }
  /**
   *  Return a new ``int232`` type for %%v%%.
   */
  static int232(t) {
    return R(t, -232);
  }
  /**
   *  Return a new ``int240`` type for %%v%%.
   */
  static int240(t) {
    return R(t, -240);
  }
  /**
   *  Return a new ``int248`` type for %%v%%.
   */
  static int248(t) {
    return R(t, -248);
  }
  /**
   *  Return a new ``int256`` type for %%v%%.
   */
  static int256(t) {
    return R(t, -256);
  }
  /**
   *  Return a new ``int256`` type for %%v%%.
   */
  static int(t) {
    return R(t, -256);
  }
  /**
   *  Return a new ``bytes1`` type for %%v%%.
   */
  static bytes1(t) {
    return z(t, 1);
  }
  /**
   *  Return a new ``bytes2`` type for %%v%%.
   */
  static bytes2(t) {
    return z(t, 2);
  }
  /**
   *  Return a new ``bytes3`` type for %%v%%.
   */
  static bytes3(t) {
    return z(t, 3);
  }
  /**
   *  Return a new ``bytes4`` type for %%v%%.
   */
  static bytes4(t) {
    return z(t, 4);
  }
  /**
   *  Return a new ``bytes5`` type for %%v%%.
   */
  static bytes5(t) {
    return z(t, 5);
  }
  /**
   *  Return a new ``bytes6`` type for %%v%%.
   */
  static bytes6(t) {
    return z(t, 6);
  }
  /**
   *  Return a new ``bytes7`` type for %%v%%.
   */
  static bytes7(t) {
    return z(t, 7);
  }
  /**
   *  Return a new ``bytes8`` type for %%v%%.
   */
  static bytes8(t) {
    return z(t, 8);
  }
  /**
   *  Return a new ``bytes9`` type for %%v%%.
   */
  static bytes9(t) {
    return z(t, 9);
  }
  /**
   *  Return a new ``bytes10`` type for %%v%%.
   */
  static bytes10(t) {
    return z(t, 10);
  }
  /**
   *  Return a new ``bytes11`` type for %%v%%.
   */
  static bytes11(t) {
    return z(t, 11);
  }
  /**
   *  Return a new ``bytes12`` type for %%v%%.
   */
  static bytes12(t) {
    return z(t, 12);
  }
  /**
   *  Return a new ``bytes13`` type for %%v%%.
   */
  static bytes13(t) {
    return z(t, 13);
  }
  /**
   *  Return a new ``bytes14`` type for %%v%%.
   */
  static bytes14(t) {
    return z(t, 14);
  }
  /**
   *  Return a new ``bytes15`` type for %%v%%.
   */
  static bytes15(t) {
    return z(t, 15);
  }
  /**
   *  Return a new ``bytes16`` type for %%v%%.
   */
  static bytes16(t) {
    return z(t, 16);
  }
  /**
   *  Return a new ``bytes17`` type for %%v%%.
   */
  static bytes17(t) {
    return z(t, 17);
  }
  /**
   *  Return a new ``bytes18`` type for %%v%%.
   */
  static bytes18(t) {
    return z(t, 18);
  }
  /**
   *  Return a new ``bytes19`` type for %%v%%.
   */
  static bytes19(t) {
    return z(t, 19);
  }
  /**
   *  Return a new ``bytes20`` type for %%v%%.
   */
  static bytes20(t) {
    return z(t, 20);
  }
  /**
   *  Return a new ``bytes21`` type for %%v%%.
   */
  static bytes21(t) {
    return z(t, 21);
  }
  /**
   *  Return a new ``bytes22`` type for %%v%%.
   */
  static bytes22(t) {
    return z(t, 22);
  }
  /**
   *  Return a new ``bytes23`` type for %%v%%.
   */
  static bytes23(t) {
    return z(t, 23);
  }
  /**
   *  Return a new ``bytes24`` type for %%v%%.
   */
  static bytes24(t) {
    return z(t, 24);
  }
  /**
   *  Return a new ``bytes25`` type for %%v%%.
   */
  static bytes25(t) {
    return z(t, 25);
  }
  /**
   *  Return a new ``bytes26`` type for %%v%%.
   */
  static bytes26(t) {
    return z(t, 26);
  }
  /**
   *  Return a new ``bytes27`` type for %%v%%.
   */
  static bytes27(t) {
    return z(t, 27);
  }
  /**
   *  Return a new ``bytes28`` type for %%v%%.
   */
  static bytes28(t) {
    return z(t, 28);
  }
  /**
   *  Return a new ``bytes29`` type for %%v%%.
   */
  static bytes29(t) {
    return z(t, 29);
  }
  /**
   *  Return a new ``bytes30`` type for %%v%%.
   */
  static bytes30(t) {
    return z(t, 30);
  }
  /**
   *  Return a new ``bytes31`` type for %%v%%.
   */
  static bytes31(t) {
    return z(t, 31);
  }
  /**
   *  Return a new ``bytes32`` type for %%v%%.
   */
  static bytes32(t) {
    return z(t, 32);
  }
  /**
   *  Return a new ``address`` type for %%v%%.
   */
  static address(t) {
    return new Me(Le, "address", t);
  }
  /**
   *  Return a new ``bool`` type for %%v%%.
   */
  static bool(t) {
    return new Me(Le, "bool", !!t);
  }
  /**
   *  Return a new ``bytes`` type for %%v%%.
   */
  static bytes(t) {
    return new Me(Le, "bytes", t);
  }
  /**
   *  Return a new ``string`` type for %%v%%.
   */
  static string(t) {
    return new Me(Le, "string", t);
  }
  /**
   *  Return a new ``array`` type for %%v%%, allowing %%dynamic%% length.
   */
  static array(t, e) {
    throw new Error("not implemented yet");
  }
  /**
   *  Return a new ``tuple`` type for %%v%%, with the optional %%name%%.
   */
  static tuple(t, e) {
    throw new Error("not implemented yet");
  }
  /**
   *  Return a new ``uint8`` type for %%v%%.
   */
  static overrides(t) {
    return new Me(Le, "overrides", Object.assign({}, t));
  }
  /**
   *  Returns true only if %%value%% is a [[Typed]] instance.
   */
  static isTyped(t) {
    return t && typeof t == "object" && "_typedSymbol" in t && t._typedSymbol === kc;
  }
  /**
   *  If the value is a [[Typed]] instance, validates the underlying value
   *  and returns it, otherwise returns value directly.
   *
   *  This is useful for functions that with to accept either a [[Typed]]
   *  object or values.
   */
  static dereference(t, e) {
    if (Me.isTyped(t)) {
      if (t.type !== e)
        throw new Error(`invalid type: expecetd ${e}, got ${t.type}`);
      return t.value;
    }
    return t;
  }
};
Wn = new WeakMap();
let Tt = Me;
class ld extends sn {
  constructor(t) {
    super("address", "address", t, !1);
  }
  defaultValue() {
    return "0x0000000000000000000000000000000000000000";
  }
  encode(t, e) {
    let n = Tt.dereference(e, "string");
    try {
      n = W(n);
    } catch (s) {
      return this._throwError(s.message, e);
    }
    return t.writeValue(n);
  }
  decode(t) {
    return W(Bn(t.readValue(), 20));
  }
}
class fd extends sn {
  constructor(e) {
    super(e.name, e.type, "_", e.dynamic);
    A(this, "coder");
    this.coder = e;
  }
  defaultValue() {
    return this.coder.defaultValue();
  }
  encode(e, n) {
    return this.coder.encode(e, n);
  }
  decode(e) {
    return this.coder.decode(e);
  }
}
function Xu(r, t, e) {
  let n = [];
  if (Array.isArray(e))
    n = e;
  else if (e && typeof e == "object") {
    let c = {};
    n = t.map((u) => {
      const f = u.localName;
      return P(f, "cannot encode object for signature with missing names", "INVALID_ARGUMENT", { argument: "values", info: { coder: u }, value: e }), P(!c[f], "cannot encode object for signature with duplicate names", "INVALID_ARGUMENT", { argument: "values", info: { coder: u }, value: e }), c[f] = !0, e[f];
    });
  } else
    y(!1, "invalid tuple value", "tuple", e);
  y(t.length === n.length, "types/value length mismatch", "tuple", e);
  let s = new jo(), i = new jo(), o = [];
  t.forEach((c, u) => {
    let f = n[u];
    if (c.dynamic) {
      let h = i.length;
      c.encode(i, f);
      let g = s.writeUpdatableValue();
      o.push((w) => {
        g(w + h);
      });
    } else
      c.encode(s, f);
  }), o.forEach((c) => {
    c(s.length);
  });
  let a = r.appendWriter(s);
  return a += r.appendWriter(i), a;
}
function qu(r, t) {
  let e = [], n = [], s = r.subReader(0);
  return t.forEach((i) => {
    let o = null;
    if (i.dynamic) {
      let a = r.readIndex(), c = s.subReader(a);
      try {
        o = i.decode(c);
      } catch (u) {
        if (oe(u, "BUFFER_OVERRUN"))
          throw u;
        o = u, o.baseType = i.name, o.name = i.localName, o.type = i.type;
      }
    } else
      try {
        o = i.decode(r);
      } catch (a) {
        if (oe(a, "BUFFER_OVERRUN"))
          throw a;
        o = a, o.baseType = i.name, o.name = i.localName, o.type = i.type;
      }
    if (o == null)
      throw new Error("investigate");
    e.push(o), n.push(i.localName || null);
  }), Mi.fromItems(e, n);
}
class hd extends sn {
  constructor(e, n, s) {
    const i = e.type + "[" + (n >= 0 ? n : "") + "]", o = n === -1 || e.dynamic;
    super("array", i, s, o);
    A(this, "coder");
    A(this, "length");
    M(this, { coder: e, length: n });
  }
  defaultValue() {
    const e = this.coder.defaultValue(), n = [];
    for (let s = 0; s < this.length; s++)
      n.push(e);
    return n;
  }
  encode(e, n) {
    const s = Tt.dereference(n, "array");
    Array.isArray(s) || this._throwError("expected array value", s);
    let i = this.length;
    i === -1 && (i = s.length, e.writeValue(s.length)), wu(s.length, i, "coder array" + (this.localName ? " " + this.localName : ""));
    let o = [];
    for (let a = 0; a < s.length; a++)
      o.push(this.coder);
    return Xu(e, o, s);
  }
  decode(e) {
    let n = this.length;
    n === -1 && (n = e.readIndex(), P(n * St <= e.dataLength, "insufficient data length", "BUFFER_OVERRUN", { buffer: e.bytes, offset: n * St, length: e.dataLength }));
    let s = [];
    for (let i = 0; i < n; i++)
      s.push(new fd(this.coder));
    return qu(e, s);
  }
}
class dd extends sn {
  constructor(t) {
    super("bool", "bool", t, !1);
  }
  defaultValue() {
    return !1;
  }
  encode(t, e) {
    const n = Tt.dereference(e, "bool");
    return t.writeValue(n ? 1 : 0);
  }
  decode(t) {
    return !!t.readValue();
  }
}
class $u extends sn {
  constructor(t, e) {
    super(t, t, e, !0);
  }
  defaultValue() {
    return "0x";
  }
  encode(t, e) {
    e = Ht(e);
    let n = t.writeValue(e.length);
    return n += t.writeBytes(e), n;
  }
  decode(t) {
    return t.readBytes(t.readIndex(), !0);
  }
}
class pd extends $u {
  constructor(t) {
    super("bytes", t);
  }
  decode(t) {
    return F(super.decode(t));
  }
}
class gd extends sn {
  constructor(e, n) {
    let s = "bytes" + String(e);
    super(s, s, n, !1);
    A(this, "size");
    M(this, { size: e }, { size: "number" });
  }
  defaultValue() {
    return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + this.size * 2);
  }
  encode(e, n) {
    let s = Ht(Tt.dereference(n, this.type));
    return s.length !== this.size && this._throwError("incorrect data length", n), e.writeBytes(s);
  }
  decode(e) {
    return F(e.readBytes(this.size));
  }
}
const yd = new Uint8Array([]);
class md extends sn {
  constructor(t) {
    super("null", "", t, !1);
  }
  defaultValue() {
    return null;
  }
  encode(t, e) {
    return e != null && this._throwError("not null", e), t.writeBytes(yd);
  }
  decode(t) {
    return t.readBytes(0), null;
  }
}
const wd = BigInt(0), Ad = BigInt(1), bd = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
class Ed extends sn {
  constructor(e, n, s) {
    const i = (n ? "int" : "uint") + e * 8;
    super(i, i, s, !1);
    A(this, "size");
    A(this, "signed");
    M(this, { size: e, signed: n }, { size: "number", signed: "boolean" });
  }
  defaultValue() {
    return 0;
  }
  encode(e, n) {
    let s = L(Tt.dereference(n, this.type)), i = Is(bd, St * 8);
    if (this.signed) {
      let o = Is(i, this.size * 8 - 1);
      (s > o || s < -(o + Ad)) && this._throwError("value out-of-bounds", n), s = Eu(s, 8 * St);
    } else
      (s < wd || s > Is(i, this.size * 8)) && this._throwError("value out-of-bounds", n);
    return e.writeValue(s);
  }
  decode(e) {
    let n = Is(e.readValue(), this.size * 8);
    return this.signed && (n = Rf(n, this.size * 8)), n;
  }
}
class vd extends $u {
  constructor(t) {
    super("string", t);
  }
  defaultValue() {
    return "";
  }
  encode(t, e) {
    return super.encode(t, en(Tt.dereference(e, "string")));
  }
  decode(t) {
    return va(super.decode(t));
  }
}
class Pi extends sn {
  constructor(e, n) {
    let s = !1;
    const i = [];
    e.forEach((a) => {
      a.dynamic && (s = !0), i.push(a.type);
    });
    const o = "tuple(" + i.join(",") + ")";
    super("tuple", o, n, s);
    A(this, "coders");
    M(this, { coders: Object.freeze(e.slice()) });
  }
  defaultValue() {
    const e = [];
    this.coders.forEach((s) => {
      e.push(s.defaultValue());
    });
    const n = this.coders.reduce((s, i) => {
      const o = i.localName;
      return o && (s[o] || (s[o] = 0), s[o]++), s;
    }, {});
    return this.coders.forEach((s, i) => {
      let o = s.localName;
      !o || n[o] !== 1 || (o === "length" && (o = "_length"), e[o] == null && (e[o] = e[i]));
    }), Object.freeze(e);
  }
  encode(e, n) {
    const s = Tt.dereference(n, "tuple");
    return Xu(e, this.coders, s);
  }
  decode(e) {
    return qu(e, this.coders);
  }
}
function cr(r) {
  return it(en(r));
}
var xd = "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";
const Sc = /* @__PURE__ */ new Map([[8217, "apostrophe"], [8260, "fraction slash"], [12539, "middle dot"]]), Uc = 4;
function Pd(r) {
  let t = 0;
  function e() {
    return r[t++] << 8 | r[t++];
  }
  let n = e(), s = 1, i = [0, 1];
  for (let G = 1; G < n; G++)
    i.push(s += e());
  let o = e(), a = t;
  t += o;
  let c = 0, u = 0;
  function f() {
    return c == 0 && (u = u << 8 | r[t++], c = 8), u >> --c & 1;
  }
  const h = 31, g = 2 ** h, w = g >>> 1, E = w >> 1, m = g - 1;
  let x = 0;
  for (let G = 0; G < h; G++)
    x = x << 1 | f();
  let v = [], B = 0, T = g;
  for (; ; ) {
    let G = Math.floor(((x - B + 1) * s - 1) / T), U = 0, D = n;
    for (; D - U > 1; ) {
      let Y = U + D >>> 1;
      G < i[Y] ? D = Y : U = Y;
    }
    if (U == 0)
      break;
    v.push(U);
    let S = B + Math.floor(T * i[U] / s), nt = B + Math.floor(T * i[U + 1] / s) - 1;
    for (; !((S ^ nt) & w); )
      x = x << 1 & m | f(), S = S << 1 & m, nt = nt << 1 & m | 1;
    for (; S & ~nt & E; )
      x = x & w | x << 1 & m >>> 1 | f(), S = S << 1 ^ w, nt = (nt ^ w) << 1 | w | 1;
    B = S, T = 1 + nt - S;
  }
  let H = n - 4;
  return v.map((G) => {
    switch (G - H) {
      case 3:
        return H + 65792 + (r[a++] << 16 | r[a++] << 8 | r[a++]);
      case 2:
        return H + 256 + (r[a++] << 8 | r[a++]);
      case 1:
        return H + r[a++];
      default:
        return G - 1;
    }
  });
}
function Nd(r) {
  let t = 0;
  return () => r[t++];
}
function tl(r) {
  return Nd(Pd(Cd(r)));
}
function Cd(r) {
  let t = [];
  [..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"].forEach((s, i) => t[s.charCodeAt(0)] = i);
  let e = r.length, n = new Uint8Array(6 * e >> 3);
  for (let s = 0, i = 0, o = 0, a = 0; s < e; s++)
    a = a << 6 | t[r.charCodeAt(s)], o += 6, o >= 8 && (n[i++] = a >> (o -= 8));
  return n;
}
function Td(r) {
  return r & 1 ? ~r >> 1 : r >> 1;
}
function Od(r, t) {
  let e = Array(r);
  for (let n = 0, s = 0; n < r; n++)
    e[n] = s += Td(t());
  return e;
}
function _s(r, t = 0) {
  let e = [];
  for (; ; ) {
    let n = r(), s = r();
    if (!s)
      break;
    t += n;
    for (let i = 0; i < s; i++)
      e.push(t + i);
    t += s + 1;
  }
  return e;
}
function el(r) {
  return Vs(() => {
    let t = _s(r);
    if (t.length)
      return t;
  });
}
function nl(r) {
  let t = [];
  for (; ; ) {
    let e = r();
    if (e == 0)
      break;
    t.push(Id(e, r));
  }
  for (; ; ) {
    let e = r() - 1;
    if (e < 0)
      break;
    t.push(Bd(e, r));
  }
  return t.flat();
}
function Vs(r) {
  let t = [];
  for (; ; ) {
    let e = r(t.length);
    if (!e)
      break;
    t.push(e);
  }
  return t;
}
function rl(r, t, e) {
  let n = Array(r).fill().map(() => []);
  for (let s = 0; s < t; s++)
    Od(r, e).forEach((i, o) => n[o].push(i));
  return n;
}
function Id(r, t) {
  let e = 1 + t(), n = t(), s = Vs(t);
  return rl(s.length, 1 + r, t).flatMap((o, a) => {
    let [c, ...u] = o;
    return Array(s[a]).fill().map((f, h) => {
      let g = h * n;
      return [c + h * e, u.map((w) => w + g)];
    });
  });
}
function Bd(r, t) {
  let e = 1 + t();
  return rl(e, 1 + r, t).map((s) => [s[0], s.slice(1)]);
}
function Rd(r) {
  let t = [], e = _s(r);
  return s(n([]), []), t;
  function n(i) {
    let o = r(), a = Vs(() => {
      let c = _s(r).map((u) => e[u]);
      if (c.length)
        return n(c);
    });
    return { S: o, B: a, Q: i };
  }
  function s({ S: i, B: o }, a, c) {
    if (!(i & 4 && c === a[a.length - 1])) {
      i & 2 && (c = a[a.length - 1]), i & 1 && t.push(a);
      for (let u of o)
        for (let f of u.Q)
          s(u, [...a, f], c);
    }
  }
}
function kd(r) {
  return r.toString(16).toUpperCase().padStart(2, "0");
}
function sl(r) {
  return `{${kd(r)}}`;
}
function Sd(r) {
  let t = [];
  for (let e = 0, n = r.length; e < n; ) {
    let s = r.codePointAt(e);
    e += s < 65536 ? 1 : 2, t.push(s);
  }
  return t;
}
function Es(r) {
  let e = r.length;
  if (e < 4096)
    return String.fromCodePoint(...r);
  let n = [];
  for (let s = 0; s < e; )
    n.push(String.fromCodePoint(...r.slice(s, s += 4096)));
  return n.join("");
}
function Ud(r, t) {
  let e = r.length, n = e - t.length;
  for (let s = 0; n == 0 && s < e; s++)
    n = r[s] - t[s];
  return n;
}
var Dd = "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";
const Js = 44032, Qi = 4352, Hi = 4449, _i = 4519, il = 19, ol = 21, vs = 28, Vi = ol * vs, Fd = il * Vi, Ld = Js + Fd, Md = Qi + il, Gd = Hi + ol, Qd = _i + vs;
function Rs(r) {
  return r >> 24 & 255;
}
function al(r) {
  return r & 16777215;
}
let qo, Dc, $o, Bi;
function Hd() {
  let r = tl(Dd);
  qo = new Map(el(r).flatMap((t, e) => t.map((n) => [n, e + 1 << 24]))), Dc = new Set(_s(r)), $o = /* @__PURE__ */ new Map(), Bi = /* @__PURE__ */ new Map();
  for (let [t, e] of nl(r)) {
    if (!Dc.has(t) && e.length == 2) {
      let [n, s] = e, i = Bi.get(n);
      i || (i = /* @__PURE__ */ new Map(), Bi.set(n, i)), i.set(s, t);
    }
    $o.set(t, e.reverse());
  }
}
function cl(r) {
  return r >= Js && r < Ld;
}
function _d(r, t) {
  if (r >= Qi && r < Md && t >= Hi && t < Gd)
    return Js + (r - Qi) * Vi + (t - Hi) * vs;
  if (cl(r) && t > _i && t < Qd && (r - Js) % vs == 0)
    return r + (t - _i);
  {
    let e = Bi.get(r);
    return e && (e = e.get(t), e) ? e : -1;
  }
}
function ul(r) {
  qo || Hd();
  let t = [], e = [], n = !1;
  function s(i) {
    let o = qo.get(i);
    o && (n = !0, i |= o), t.push(i);
  }
  for (let i of r)
    for (; ; ) {
      if (i < 128)
        t.push(i);
      else if (cl(i)) {
        let o = i - Js, a = o / Vi | 0, c = o % Vi / vs | 0, u = o % vs;
        s(Qi + a), s(Hi + c), u > 0 && s(_i + u);
      } else {
        let o = $o.get(i);
        o ? e.push(...o) : s(i);
      }
      if (!e.length)
        break;
      i = e.pop();
    }
  if (n && t.length > 1) {
    let i = Rs(t[0]);
    for (let o = 1; o < t.length; o++) {
      let a = Rs(t[o]);
      if (a == 0 || i <= a) {
        i = a;
        continue;
      }
      let c = o - 1;
      for (; ; ) {
        let u = t[c + 1];
        if (t[c + 1] = t[c], t[c] = u, !c || (i = Rs(t[--c]), i <= a))
          break;
      }
      i = Rs(t[o]);
    }
  }
  return t;
}
function Vd(r) {
  let t = [], e = [], n = -1, s = 0;
  for (let i of r) {
    let o = Rs(i), a = al(i);
    if (n == -1)
      o == 0 ? n = a : t.push(a);
    else if (s > 0 && s >= o)
      o == 0 ? (t.push(n, ...e), e.length = 0, n = a) : e.push(a), s = o;
    else {
      let c = _d(n, a);
      c >= 0 ? n = c : s == 0 && o == 0 ? (t.push(n), n = a) : (e.push(a), s = o);
    }
  }
  return n >= 0 && t.push(n, ...e), t;
}
function ll(r) {
  return ul(r).map(al);
}
function Jd(r) {
  return Vd(ul(r));
}
const Fc = 45, fl = ".", hl = 65039, dl = 1, Nr = (r) => Array.from(r);
function js(r, t) {
  return r.P.has(t) || r.Q.has(t);
}
class jd extends Array {
  get is_emoji() {
    return !0;
  }
  // free tagging system
}
let ta, pl, Mn, ea, gl, Br, So, Ar, yl, Lc, na;
function ka() {
  if (ta)
    return;
  let r = tl(xd);
  const t = () => _s(r), e = () => new Set(t());
  ta = new Map(nl(r)), pl = e(), Mn = t(), ea = new Set(t().map((f) => Mn[f])), Mn = new Set(Mn), gl = e(), e();
  let n = el(r), s = r();
  const i = () => new Set(t().flatMap((f) => n[f]).concat(t()));
  Br = Vs((f) => {
    let h = Vs(r).map((g) => g + 96);
    if (h.length) {
      let g = f >= s;
      h[0] -= 32, h = Es(h), g && (h = `Restricted[${h}]`);
      let w = i(), E = i(), m = !r();
      return { N: h, P: w, Q: E, M: m, R: g };
    }
  }), So = e(), Ar = /* @__PURE__ */ new Map();
  let o = t().concat(Nr(So)).sort((f, h) => f - h);
  o.forEach((f, h) => {
    let g = r(), w = o[h] = g ? o[h - g] : { V: [], M: /* @__PURE__ */ new Map() };
    w.V.push(f), So.has(f) || Ar.set(f, w);
  });
  for (let { V: f, M: h } of new Set(Ar.values())) {
    let g = [];
    for (let E of f) {
      let m = Br.filter((v) => js(v, E)), x = g.find(({ G: v }) => m.some((B) => v.has(B)));
      x || (x = { G: /* @__PURE__ */ new Set(), V: [] }, g.push(x)), x.V.push(E), m.forEach((v) => x.G.add(v));
    }
    let w = g.flatMap((E) => Nr(E.G));
    for (let { G: E, V: m } of g) {
      let x = new Set(w.filter((v) => !E.has(v)));
      for (let v of m)
        h.set(v, x);
    }
  }
  let a = /* @__PURE__ */ new Set(), c = /* @__PURE__ */ new Set();
  const u = (f) => a.has(f) ? c.add(f) : a.add(f);
  for (let f of Br) {
    for (let h of f.P)
      u(h);
    for (let h of f.Q)
      u(h);
  }
  for (let f of a)
    !Ar.has(f) && !c.has(f) && Ar.set(f, dl);
  yl = new Set(Nr(a).concat(Nr(ll(a)))), Lc = Rd(r).map((f) => jd.from(f)).sort(Ud), na = /* @__PURE__ */ new Map();
  for (let f of Lc) {
    let h = [na];
    for (let g of f) {
      let w = h.map((E) => {
        let m = E.get(g);
        return m || (m = /* @__PURE__ */ new Map(), E.set(g, m)), m;
      });
      g === hl ? h.push(...w) : h = w;
    }
    for (let g of h)
      g.V = f;
  }
}
function Sa(r) {
  return (ml(r) ? "" : `${Ua(lo([r]))} `) + sl(r);
}
function Ua(r) {
  return `"${r}"‎`;
}
function zd(r) {
  if (r.length >= 4 && r[2] == Fc && r[3] == Fc)
    throw new Error(`invalid label extension: "${Es(r.slice(0, 4))}"`);
}
function Kd(r) {
  for (let e = r.lastIndexOf(95); e > 0; )
    if (r[--e] !== 95)
      throw new Error("underscore allowed only at start");
}
function Wd(r) {
  let t = r[0], e = Sc.get(t);
  if (e)
    throw Ds(`leading ${e}`);
  let n = r.length, s = -1;
  for (let i = 1; i < n; i++) {
    t = r[i];
    let o = Sc.get(t);
    if (o) {
      if (s == i)
        throw Ds(`${e} + ${o}`);
      s = i + 1, e = o;
    }
  }
  if (s == n)
    throw Ds(`trailing ${e}`);
}
function lo(r, t = sl) {
  let e = [];
  Yd(r[0]) && e.push("◌");
  let n = 0, s = r.length;
  for (let i = 0; i < s; i++) {
    let o = r[i];
    ml(o) && (e.push(Es(r.slice(n, i))), e.push(t(o)), n = i + 1);
  }
  return e.push(Es(r.slice(n, s))), e.join("");
}
function Yd(r) {
  return ka(), Mn.has(r);
}
function ml(r) {
  return ka(), gl.has(r);
}
function Zd(r) {
  return tp(Xd(r, Jd, rp));
}
function Xd(r, t, e) {
  if (!r)
    return [];
  ka();
  let n = 0;
  return r.split(fl).map((s) => {
    let i = Sd(s), o = {
      input: i,
      offset: n
      // codepoint, not substring!
    };
    n += i.length + 1;
    try {
      let a = o.tokens = np(i, t, e), c = a.length, u;
      if (!c)
        throw new Error("empty label");
      let f = o.output = a.flat();
      if (Kd(f), !(o.emoji = c > 1 || a[0].is_emoji) && f.every((g) => g < 128))
        zd(f), u = "ASCII";
      else {
        let g = a.flatMap((w) => w.is_emoji ? [] : w);
        if (!g.length)
          u = "Emoji";
        else {
          if (Mn.has(f[0]))
            throw Ds("leading combining mark");
          for (let m = 1; m < c; m++) {
            let x = a[m];
            if (!x.is_emoji && Mn.has(x[0]))
              throw Ds(`emoji + combining mark: "${Es(a[m - 1])} + ${lo([x[0]])}"`);
          }
          Wd(f);
          let w = Nr(new Set(g)), [E] = $d(w);
          ep(E, g), qd(E, w), u = E.N;
        }
      }
      o.type = u;
    } catch (a) {
      o.error = a;
    }
    return o;
  });
}
function qd(r, t) {
  let e, n = [];
  for (let s of t) {
    let i = Ar.get(s);
    if (i === dl)
      return;
    if (i) {
      let o = i.M.get(s);
      if (e = e ? e.filter((a) => o.has(a)) : Nr(o), !e.length)
        return;
    } else
      n.push(s);
  }
  if (e) {
    for (let s of e)
      if (n.every((i) => js(s, i)))
        throw new Error(`whole-script confusable: ${r.N}/${s.N}`);
  }
}
function $d(r) {
  let t = Br;
  for (let e of r) {
    let n = t.filter((s) => js(s, e));
    if (!n.length)
      throw Br.some((s) => js(s, e)) ? Al(t[0], e) : wl(e);
    if (t = n, n.length == 1)
      break;
  }
  return t;
}
function tp(r) {
  return r.map(({ input: t, error: e, output: n }) => {
    if (e) {
      let s = e.message;
      throw new Error(r.length == 1 ? s : `Invalid label ${Ua(lo(t))}: ${s}`);
    }
    return Es(n);
  }).join(fl);
}
function wl(r) {
  return new Error(`disallowed character: ${Sa(r)}`);
}
function Al(r, t) {
  let e = Sa(t), n = Br.find((s) => s.P.has(t));
  return n && (e = `${n.N} ${e}`), new Error(`illegal mixture: ${r.N} + ${e}`);
}
function Ds(r) {
  return new Error(`illegal placement: ${r}`);
}
function ep(r, t) {
  for (let e of t)
    if (!js(r, e))
      throw Al(r, e);
  if (r.M) {
    let e = ll(t);
    for (let n = 1, s = e.length; n < s; n++)
      if (ea.has(e[n])) {
        let i = n + 1;
        for (let o; i < s && ea.has(o = e[i]); i++)
          for (let a = n; a < i; a++)
            if (e[a] == o)
              throw new Error(`duplicate non-spacing marks: ${Sa(o)}`);
        if (i - n > Uc)
          throw new Error(`excessive non-spacing marks: ${Ua(lo(e.slice(n - 1, i)))} (${i - n}/${Uc})`);
        n = i;
      }
  }
}
function np(r, t, e) {
  let n = [], s = [];
  for (r = r.slice().reverse(); r.length; ) {
    let i = sp(r);
    if (i)
      s.length && (n.push(t(s)), s = []), n.push(e(i));
    else {
      let o = r.pop();
      if (yl.has(o))
        s.push(o);
      else {
        let a = ta.get(o);
        if (a)
          s.push(...a);
        else if (!pl.has(o))
          throw wl(o);
      }
    }
  }
  return s.length && n.push(t(s)), n;
}
function rp(r) {
  return r.filter((t) => t != hl);
}
function sp(r, t) {
  let e = na, n, s = r.length;
  for (; s && (e = e.get(r[--s]), !!e); ) {
    let { V: i } = e;
    i && (n = i, t && t.push(...r.slice(s).reverse()), r.length = s);
  }
  return n;
}
const bl = new Uint8Array(32);
bl.fill(0);
function Mc(r) {
  return y(r.length !== 0, "invalid ENS name; empty component", "comp", r), r;
}
function El(r) {
  const t = en(ip(r)), e = [];
  if (r.length === 0)
    return e;
  let n = 0;
  for (let s = 0; s < t.length; s++)
    t[s] === 46 && (e.push(Mc(t.slice(n, s))), n = s + 1);
  return y(n < t.length, "invalid ENS name; empty component", "name", r), e.push(Mc(t.slice(n))), e;
}
function ip(r) {
  try {
    if (r.length === 0)
      throw new Error("empty label");
    return Zd(r);
  } catch (t) {
    y(!1, `invalid ENS name (${t.message})`, "name", r);
  }
}
function ra(r) {
  y(typeof r == "string", "invalid ENS name; not a string", "name", r), y(r.length, "invalid ENS name (empty label)", "name", r);
  let t = bl;
  const e = El(r);
  for (; e.length; )
    t = it(pt([t, it(e.pop())]));
  return F(t);
}
function op(r) {
  return F(pt(El(r).map((t) => {
    if (t.length > 63)
      throw new Error("invalid DNS encoded entry; length exceeds 63 bytes");
    const e = new Uint8Array(t.length + 1);
    return e.set(t, 1), e[0] = e.length - 1, e;
  }))) + "00";
}
function Uo(r, t) {
  return {
    address: W(r),
    storageKeys: t.map((e, n) => (y(ot(e, 32), "invalid slot", `storageKeys[${n}]`, e), e.toLowerCase()))
  };
}
function hr(r) {
  if (Array.isArray(r))
    return r.map((e, n) => Array.isArray(e) ? (y(e.length === 2, "invalid slot set", `value[${n}]`, e), Uo(e[0], e[1])) : (y(e != null && typeof e == "object", "invalid address-slot set", "value", r), Uo(e.address, e.storageKeys)));
  y(r != null && typeof r == "object", "invalid access list", "value", r);
  const t = Object.keys(r).map((e) => {
    const n = r[e].reduce((s, i) => (s[i] = !0, s), {});
    return Uo(e, Object.keys(n).sort());
  });
  return t.sort((e, n) => e.address.localeCompare(n.address)), t;
}
function ap(r) {
  let t;
  return typeof r == "string" ? t = Hs.computePublicKey(r, !1) : t = r.publicKey, W(it("0x" + t.substring(4)).substring(26));
}
function cp(r, t) {
  return ap(Hs.recoverPublicKey(r, t));
}
const Gt = BigInt(0), up = BigInt(2), lp = BigInt(27), fp = BigInt(28), hp = BigInt(35), dp = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
function Da(r) {
  return r === "0x" ? null : W(r);
}
function vl(r, t) {
  try {
    return hr(r);
  } catch (e) {
    y(!1, e.message, t, r);
  }
}
function fo(r, t) {
  return r === "0x" ? 0 : V(r, t);
}
function kt(r, t) {
  if (r === "0x")
    return Gt;
  const e = L(r, t);
  return y(e <= dp, "value exceeds uint size", t, e), e;
}
function wt(r, t) {
  const e = L(r, "value"), n = Yt(e);
  return y(n.length <= 32, "value too large", `tx.${t}`, e), n;
}
function xl(r) {
  return hr(r).map((t) => [t.address, t.storageKeys]);
}
function pp(r) {
  const t = xa(r);
  y(Array.isArray(t) && (t.length === 9 || t.length === 6), "invalid field count for legacy transaction", "data", r);
  const e = {
    type: 0,
    nonce: fo(t[0], "nonce"),
    gasPrice: kt(t[1], "gasPrice"),
    gasLimit: kt(t[2], "gasLimit"),
    to: Da(t[3]),
    value: kt(t[4], "value"),
    data: F(t[5]),
    chainId: Gt
  };
  if (t.length === 6)
    return e;
  const n = kt(t[6], "v"), s = kt(t[7], "r"), i = kt(t[8], "s");
  if (s === Gt && i === Gt)
    e.chainId = n;
  else {
    let o = (n - hp) / up;
    o < Gt && (o = Gt), e.chainId = o, y(o !== Gt || n === lp || n === fp, "non-canonical legacy v", "v", t[6]), e.signature = we.from({
      r: ar(t[7], 32),
      s: ar(t[8], 32),
      v: n
    }), e.hash = it(r);
  }
  return e;
}
function Gc(r, t) {
  const e = [
    wt(r.nonce || 0, "nonce"),
    wt(r.gasPrice || 0, "gasPrice"),
    wt(r.gasLimit || 0, "gasLimit"),
    r.to != null ? W(r.to) : "0x",
    wt(r.value || 0, "value"),
    r.data || "0x"
  ];
  let n = Gt;
  if (r.chainId != Gt)
    n = L(r.chainId, "tx.chainId"), y(!t || t.networkV == null || t.legacyChainId === n, "tx.chainId/sig.v mismatch", "sig", t);
  else if (r.signature) {
    const i = r.signature.legacyChainId;
    i != null && (n = i);
  }
  if (!t)
    return n !== Gt && (e.push(Yt(n)), e.push("0x"), e.push("0x")), Gs(e);
  let s = BigInt(27 + t.yParity);
  return n !== Gt ? s = we.getChainIdV(n, t.v) : BigInt(t.v) !== s && y(!1, "tx.chainId/sig.v mismatch", "sig", t), e.push(Yt(s)), e.push(Yt(t.r)), e.push(Yt(t.s)), Gs(e);
}
function Pl(r, t) {
  let e;
  try {
    if (e = fo(t[0], "yParity"), e !== 0 && e !== 1)
      throw new Error("bad yParity");
  } catch {
    y(!1, "invalid yParity", "yParity", t[0]);
  }
  const n = ar(t[1], 32), s = ar(t[2], 32), i = we.from({ r: n, s, yParity: e });
  r.signature = i;
}
function gp(r) {
  const t = xa(X(r).slice(1));
  y(Array.isArray(t) && (t.length === 9 || t.length === 12), "invalid field count for transaction type: 2", "data", F(r));
  const e = kt(t[2], "maxPriorityFeePerGas"), n = kt(t[3], "maxFeePerGas"), s = {
    type: 2,
    chainId: kt(t[0], "chainId"),
    nonce: fo(t[1], "nonce"),
    maxPriorityFeePerGas: e,
    maxFeePerGas: n,
    gasPrice: null,
    gasLimit: kt(t[4], "gasLimit"),
    to: Da(t[5]),
    value: kt(t[6], "value"),
    data: F(t[7]),
    accessList: vl(t[8], "accessList")
  };
  return t.length === 9 || (s.hash = it(r), Pl(s, t.slice(9))), s;
}
function Qc(r, t) {
  const e = [
    wt(r.chainId || 0, "chainId"),
    wt(r.nonce || 0, "nonce"),
    wt(r.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
    wt(r.maxFeePerGas || 0, "maxFeePerGas"),
    wt(r.gasLimit || 0, "gasLimit"),
    r.to != null ? W(r.to) : "0x",
    wt(r.value || 0, "value"),
    r.data || "0x",
    xl(r.accessList || [])
  ];
  return t && (e.push(wt(t.yParity, "yParity")), e.push(Yt(t.r)), e.push(Yt(t.s))), pt(["0x02", Gs(e)]);
}
function yp(r) {
  const t = xa(X(r).slice(1));
  y(Array.isArray(t) && (t.length === 8 || t.length === 11), "invalid field count for transaction type: 1", "data", F(r));
  const e = {
    type: 1,
    chainId: kt(t[0], "chainId"),
    nonce: fo(t[1], "nonce"),
    gasPrice: kt(t[2], "gasPrice"),
    gasLimit: kt(t[3], "gasLimit"),
    to: Da(t[4]),
    value: kt(t[5], "value"),
    data: F(t[6]),
    accessList: vl(t[7], "accessList")
  };
  return t.length === 8 || (e.hash = it(r), Pl(e, t.slice(8))), e;
}
function Hc(r, t) {
  const e = [
    wt(r.chainId || 0, "chainId"),
    wt(r.nonce || 0, "nonce"),
    wt(r.gasPrice || 0, "gasPrice"),
    wt(r.gasLimit || 0, "gasLimit"),
    r.to != null ? W(r.to) : "0x",
    wt(r.value || 0, "value"),
    r.data || "0x",
    xl(r.accessList || [])
  ];
  return t && (e.push(wt(t.yParity, "recoveryParam")), e.push(Yt(t.r)), e.push(Yt(t.s))), pt(["0x01", Gs(e)]);
}
var je, Hr, _r, Vr, Jr, jr, zr, Kr, Wr, Yr, Zr, Xr;
const hn = class hn {
  /**
   *  Creates a new Transaction with default values.
   */
  constructor() {
    b(this, je, void 0);
    b(this, Hr, void 0);
    b(this, _r, void 0);
    b(this, Vr, void 0);
    b(this, Jr, void 0);
    b(this, jr, void 0);
    b(this, zr, void 0);
    b(this, Kr, void 0);
    b(this, Wr, void 0);
    b(this, Yr, void 0);
    b(this, Zr, void 0);
    b(this, Xr, void 0);
    d(this, je, null), d(this, Hr, null), d(this, Vr, 0), d(this, Jr, BigInt(0)), d(this, jr, null), d(this, zr, null), d(this, Kr, null), d(this, _r, "0x"), d(this, Wr, BigInt(0)), d(this, Yr, BigInt(0)), d(this, Zr, null), d(this, Xr, null);
  }
  /**
   *  The transaction type.
   *
   *  If null, the type will be automatically inferred based on
   *  explicit properties.
   */
  get type() {
    return l(this, je);
  }
  set type(t) {
    switch (t) {
      case null:
        d(this, je, null);
        break;
      case 0:
      case "legacy":
        d(this, je, 0);
        break;
      case 1:
      case "berlin":
      case "eip-2930":
        d(this, je, 1);
        break;
      case 2:
      case "london":
      case "eip-1559":
        d(this, je, 2);
        break;
      default:
        y(!1, "unsupported transaction type", "type", t);
    }
  }
  /**
   *  The name of the transaction type.
   */
  get typeName() {
    switch (this.type) {
      case 0:
        return "legacy";
      case 1:
        return "eip-2930";
      case 2:
        return "eip-1559";
    }
    return null;
  }
  /**
   *  The ``to`` address for the transaction or ``null`` if the
   *  transaction is an ``init`` transaction.
   */
  get to() {
    return l(this, Hr);
  }
  set to(t) {
    d(this, Hr, t == null ? null : W(t));
  }
  /**
   *  The transaction nonce.
   */
  get nonce() {
    return l(this, Vr);
  }
  set nonce(t) {
    d(this, Vr, V(t, "value"));
  }
  /**
   *  The gas limit.
   */
  get gasLimit() {
    return l(this, Jr);
  }
  set gasLimit(t) {
    d(this, Jr, L(t));
  }
  /**
   *  The gas price.
   *
   *  On legacy networks this defines the fee that will be paid. On
   *  EIP-1559 networks, this should be ``null``.
   */
  get gasPrice() {
    const t = l(this, jr);
    return t == null && (this.type === 0 || this.type === 1) ? Gt : t;
  }
  set gasPrice(t) {
    d(this, jr, t == null ? null : L(t, "gasPrice"));
  }
  /**
   *  The maximum priority fee per unit of gas to pay. On legacy
   *  networks this should be ``null``.
   */
  get maxPriorityFeePerGas() {
    const t = l(this, zr);
    return t ?? (this.type === 2 ? Gt : null);
  }
  set maxPriorityFeePerGas(t) {
    d(this, zr, t == null ? null : L(t, "maxPriorityFeePerGas"));
  }
  /**
   *  The maximum total fee per unit of gas to pay. On legacy
   *  networks this should be ``null``.
   */
  get maxFeePerGas() {
    const t = l(this, Kr);
    return t ?? (this.type === 2 ? Gt : null);
  }
  set maxFeePerGas(t) {
    d(this, Kr, t == null ? null : L(t, "maxFeePerGas"));
  }
  /**
   *  The transaction data. For ``init`` transactions this is the
   *  deployment code.
   */
  get data() {
    return l(this, _r);
  }
  set data(t) {
    d(this, _r, F(t));
  }
  /**
   *  The amount of ether (in wei) to send in this transactions.
   */
  get value() {
    return l(this, Wr);
  }
  set value(t) {
    d(this, Wr, L(t, "value"));
  }
  /**
   *  The chain ID this transaction is valid on.
   */
  get chainId() {
    return l(this, Yr);
  }
  set chainId(t) {
    d(this, Yr, L(t));
  }
  /**
   *  If signed, the signature for this transaction.
   */
  get signature() {
    return l(this, Zr) || null;
  }
  set signature(t) {
    d(this, Zr, t == null ? null : we.from(t));
  }
  /**
   *  The access list.
   *
   *  An access list permits discounted (but pre-paid) access to
   *  bytecode and state variable access within contract execution.
   */
  get accessList() {
    const t = l(this, Xr) || null;
    return t ?? (this.type === 1 || this.type === 2 ? [] : null);
  }
  set accessList(t) {
    d(this, Xr, t == null ? null : hr(t));
  }
  /**
   *  The transaction hash, if signed. Otherwise, ``null``.
   */
  get hash() {
    return this.signature == null ? null : it(this.serialized);
  }
  /**
   *  The pre-image hash of this transaction.
   *
   *  This is the digest that a [[Signer]] must sign to authorize
   *  this transaction.
   */
  get unsignedHash() {
    return it(this.unsignedSerialized);
  }
  /**
   *  The sending address, if signed. Otherwise, ``null``.
   */
  get from() {
    return this.signature == null ? null : cp(this.unsignedHash, this.signature);
  }
  /**
   *  The public key of the sender, if signed. Otherwise, ``null``.
   */
  get fromPublicKey() {
    return this.signature == null ? null : Hs.recoverPublicKey(this.unsignedHash, this.signature);
  }
  /**
   *  Returns true if signed.
   *
   *  This provides a Type Guard that properties requiring a signed
   *  transaction are non-null.
   */
  isSigned() {
    return this.signature != null;
  }
  /**
   *  The serialized transaction.
   *
   *  This throws if the transaction is unsigned. For the pre-image,
   *  use [[unsignedSerialized]].
   */
  get serialized() {
    switch (P(this.signature != null, "cannot serialize unsigned transaction; maybe you meant .unsignedSerialized", "UNSUPPORTED_OPERATION", { operation: ".serialized" }), this.inferType()) {
      case 0:
        return Gc(this, this.signature);
      case 1:
        return Hc(this, this.signature);
      case 2:
        return Qc(this, this.signature);
    }
    P(!1, "unsupported transaction type", "UNSUPPORTED_OPERATION", { operation: ".serialized" });
  }
  /**
   *  The transaction pre-image.
   *
   *  The hash of this is the digest which needs to be signed to
   *  authorize this transaction.
   */
  get unsignedSerialized() {
    switch (this.inferType()) {
      case 0:
        return Gc(this);
      case 1:
        return Hc(this);
      case 2:
        return Qc(this);
    }
    P(!1, "unsupported transaction type", "UNSUPPORTED_OPERATION", { operation: ".unsignedSerialized" });
  }
  /**
   *  Return the most "likely" type; currently the highest
   *  supported transaction type.
   */
  inferType() {
    return this.inferTypes().pop();
  }
  /**
   *  Validates the explicit properties and returns a list of compatible
   *  transaction types.
   */
  inferTypes() {
    const t = this.gasPrice != null, e = this.maxFeePerGas != null || this.maxPriorityFeePerGas != null, n = this.accessList != null;
    this.maxFeePerGas != null && this.maxPriorityFeePerGas != null && P(this.maxFeePerGas >= this.maxPriorityFeePerGas, "priorityFee cannot be more than maxFee", "BAD_DATA", { value: this }), P(!e || this.type !== 0 && this.type !== 1, "transaction type cannot have maxFeePerGas or maxPriorityFeePerGas", "BAD_DATA", { value: this }), P(this.type !== 0 || !n, "legacy transaction cannot have accessList", "BAD_DATA", { value: this });
    const s = [];
    return this.type != null ? s.push(this.type) : e ? s.push(2) : t ? (s.push(1), n || s.push(0)) : n ? (s.push(1), s.push(2)) : (s.push(0), s.push(1), s.push(2)), s.sort(), s;
  }
  /**
   *  Returns true if this transaction is a legacy transaction (i.e.
   *  ``type === 0``).
   *
   *  This provides a Type Guard that the related properties are
   *  non-null.
   */
  isLegacy() {
    return this.type === 0;
  }
  /**
   *  Returns true if this transaction is berlin hardform transaction (i.e.
   *  ``type === 1``).
   *
   *  This provides a Type Guard that the related properties are
   *  non-null.
   */
  isBerlin() {
    return this.type === 1;
  }
  /**
   *  Returns true if this transaction is london hardform transaction (i.e.
   *  ``type === 2``).
   *
   *  This provides a Type Guard that the related properties are
   *  non-null.
   */
  isLondon() {
    return this.type === 2;
  }
  /**
   *  Create a copy of this transaciton.
   */
  clone() {
    return hn.from(this);
  }
  /**
   *  Return a JSON-friendly object.
   */
  toJSON() {
    const t = (e) => e == null ? null : e.toString();
    return {
      type: this.type,
      to: this.to,
      //            from: this.from,
      data: this.data,
      nonce: this.nonce,
      gasLimit: t(this.gasLimit),
      gasPrice: t(this.gasPrice),
      maxPriorityFeePerGas: t(this.maxPriorityFeePerGas),
      maxFeePerGas: t(this.maxFeePerGas),
      value: t(this.value),
      chainId: t(this.chainId),
      sig: this.signature ? this.signature.toJSON() : null,
      accessList: this.accessList
    };
  }
  /**
   *  Create a **Transaction** from a serialized transaction or a
   *  Transaction-like object.
   */
  static from(t) {
    if (t == null)
      return new hn();
    if (typeof t == "string") {
      const n = X(t);
      if (n[0] >= 127)
        return hn.from(pp(n));
      switch (n[0]) {
        case 1:
          return hn.from(yp(n));
        case 2:
          return hn.from(gp(n));
      }
      P(!1, "unsupported transaction type", "UNSUPPORTED_OPERATION", { operation: "from" });
    }
    const e = new hn();
    return t.type != null && (e.type = t.type), t.to != null && (e.to = t.to), t.nonce != null && (e.nonce = t.nonce), t.gasLimit != null && (e.gasLimit = t.gasLimit), t.gasPrice != null && (e.gasPrice = t.gasPrice), t.maxPriorityFeePerGas != null && (e.maxPriorityFeePerGas = t.maxPriorityFeePerGas), t.maxFeePerGas != null && (e.maxFeePerGas = t.maxFeePerGas), t.data != null && (e.data = t.data), t.value != null && (e.value = t.value), t.chainId != null && (e.chainId = t.chainId), t.signature != null && (e.signature = we.from(t.signature)), t.accessList != null && (e.accessList = t.accessList), t.hash != null && (y(e.isSigned(), "unsigned transaction cannot define hash", "tx", t), y(e.hash === t.hash, "hash mismatch", "tx", t)), t.from != null && (y(e.isSigned(), "unsigned transaction cannot define from", "tx", t), y(e.from.toLowerCase() === (t.from || "").toLowerCase(), "from mismatch", "tx", t)), e;
  }
};
je = new WeakMap(), Hr = new WeakMap(), _r = new WeakMap(), Vr = new WeakMap(), Jr = new WeakMap(), jr = new WeakMap(), zr = new WeakMap(), Kr = new WeakMap(), Wr = new WeakMap(), Yr = new WeakMap(), Zr = new WeakMap(), Xr = new WeakMap();
let Ji = hn;
const Nl = new Uint8Array(32);
Nl.fill(0);
const mp = BigInt(-1), Cl = BigInt(0), Tl = BigInt(1), wp = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
function Ap(r) {
  const t = X(r), e = t.length % 32;
  return e ? pt([t, Nl.slice(e)]) : F(t);
}
const bp = Bn(Tl, 32), Ep = Bn(Cl, 32), _c = {
  name: "string",
  version: "string",
  chainId: "uint256",
  verifyingContract: "address",
  salt: "bytes32"
}, Do = [
  "name",
  "version",
  "chainId",
  "verifyingContract",
  "salt"
];
function Vc(r) {
  return function(t) {
    return y(typeof t == "string", `invalid domain value for ${JSON.stringify(r)}`, `domain.${r}`, t), t;
  };
}
const vp = {
  name: Vc("name"),
  version: Vc("version"),
  chainId: function(r) {
    const t = L(r, "domain.chainId");
    return y(t >= 0, "invalid chain ID", "domain.chainId", r), Number.isSafeInteger(t) ? Number(t) : Pr(t);
  },
  verifyingContract: function(r) {
    try {
      return W(r).toLowerCase();
    } catch {
    }
    y(!1, 'invalid domain value "verifyingContract"', "domain.verifyingContract", r);
  },
  salt: function(r) {
    const t = X(r, "domain.salt");
    return y(t.length === 32, 'invalid domain value "salt"', "domain.salt", r), F(t);
  }
};
function Fo(r) {
  {
    const t = r.match(/^(u?)int(\d*)$/);
    if (t) {
      const e = t[1] === "", n = parseInt(t[2] || "256");
      y(n % 8 === 0 && n !== 0 && n <= 256 && (t[2] == null || t[2] === String(n)), "invalid numeric width", "type", r);
      const s = Is(wp, e ? n - 1 : n), i = e ? (s + Tl) * mp : Cl;
      return function(o) {
        const a = L(o, "value");
        return y(a >= i && a <= s, `value out-of-bounds for ${r}`, "value", a), Bn(e ? Eu(a, 256) : a, 32);
      };
    }
  }
  {
    const t = r.match(/^bytes(\d+)$/);
    if (t) {
      const e = parseInt(t[1]);
      return y(e !== 0 && e <= 32 && t[1] === String(e), "invalid bytes width", "type", r), function(n) {
        const s = X(n);
        return y(s.length === e, `invalid length for ${r}`, "value", n), Ap(n);
      };
    }
  }
  switch (r) {
    case "address":
      return function(t) {
        return ar(W(t), 32);
      };
    case "bool":
      return function(t) {
        return t ? bp : Ep;
      };
    case "bytes":
      return function(t) {
        return it(t);
      };
    case "string":
      return function(t) {
        return cr(t);
      };
  }
  return null;
}
function Jc(r, t) {
  return `${r}(${t.map(({ name: e, type: n }) => n + " " + e).join(",")})`;
}
var $s, ze, qr, qi, Ol;
const qt = class qt {
  /**
   *  Create a new **TypedDataEncoder** for %%types%%.
   *
   *  This performs all necessary checking that types are valid and
   *  do not violate the [[link-eip-712]] structural constraints as
   *  well as computes the [[primaryType]].
   */
  constructor(t) {
    b(this, qi);
    /**
     *  The primary type for the structured [[types]].
     *
     *  This is derived automatically from the [[types]], since no
     *  recursion is possible, once the DAG for the types is consturcted
     *  internally, the primary type must be the only remaining type with
     *  no parent nodes.
     */
    A(this, "primaryType");
    b(this, $s, void 0);
    b(this, ze, void 0);
    b(this, qr, void 0);
    d(this, $s, JSON.stringify(t)), d(this, ze, /* @__PURE__ */ new Map()), d(this, qr, /* @__PURE__ */ new Map());
    const e = /* @__PURE__ */ new Map(), n = /* @__PURE__ */ new Map(), s = /* @__PURE__ */ new Map();
    Object.keys(t).forEach((a) => {
      e.set(a, /* @__PURE__ */ new Set()), n.set(a, []), s.set(a, /* @__PURE__ */ new Set());
    });
    for (const a in t) {
      const c = /* @__PURE__ */ new Set();
      for (const u of t[a]) {
        y(!c.has(u.name), `duplicate variable name ${JSON.stringify(u.name)} in ${JSON.stringify(a)}`, "types", t), c.add(u.name);
        const f = u.type.match(/^([^\x5b]*)(\x5b|$)/)[1] || null;
        y(f !== a, `circular type reference to ${JSON.stringify(f)}`, "types", t), !Fo(f) && (y(n.has(f), `unknown type ${JSON.stringify(f)}`, "types", t), n.get(f).push(a), e.get(a).add(f));
      }
    }
    const i = Array.from(n.keys()).filter((a) => n.get(a).length === 0);
    y(i.length !== 0, "missing primary type", "types", t), y(i.length === 1, `ambiguous primary types or unused types: ${i.map((a) => JSON.stringify(a)).join(", ")}`, "types", t), M(this, { primaryType: i[0] });
    function o(a, c) {
      y(!c.has(a), `circular type reference to ${JSON.stringify(a)}`, "types", t), c.add(a);
      for (const u of e.get(a))
        if (n.has(u)) {
          o(u, c);
          for (const f of c)
            s.get(f).add(u);
        }
      c.delete(a);
    }
    o(this.primaryType, /* @__PURE__ */ new Set());
    for (const [a, c] of s) {
      const u = Array.from(c);
      u.sort(), l(this, ze).set(a, Jc(a, t[a]) + u.map((f) => Jc(f, t[f])).join(""));
    }
  }
  /**
   *  The types.
   */
  get types() {
    return JSON.parse(l(this, $s));
  }
  /**
   *  Returnthe encoder for the specific %%type%%.
   */
  getEncoder(t) {
    let e = l(this, qr).get(t);
    return e || (e = O(this, qi, Ol).call(this, t), l(this, qr).set(t, e)), e;
  }
  /**
   *  Return the full type for %%name%%.
   */
  encodeType(t) {
    const e = l(this, ze).get(t);
    return y(e, `unknown type: ${JSON.stringify(t)}`, "name", t), e;
  }
  /**
   *  Return the encoded %%value%% for the %%type%%.
   */
  encodeData(t, e) {
    return this.getEncoder(t)(e);
  }
  /**
   *  Returns the hash of %%value%% for the type of %%name%%.
   */
  hashStruct(t, e) {
    return it(this.encodeData(t, e));
  }
  /**
   *  Return the fulled encoded %%value%% for the [[types]].
   */
  encode(t) {
    return this.encodeData(this.primaryType, t);
  }
  /**
   *  Return the hash of the fully encoded %%value%% for the [[types]].
   */
  hash(t) {
    return this.hashStruct(this.primaryType, t);
  }
  /**
   *  @_ignore:
   */
  _visit(t, e, n) {
    if (Fo(t))
      return n(t, e);
    const s = t.match(/^(.*)(\x5b(\d*)\x5d)$/);
    if (s)
      return y(!s[3] || parseInt(s[3]) === e.length, `array length mismatch; expected length ${parseInt(s[3])}`, "value", e), e.map((o) => this._visit(s[1], o, n));
    const i = this.types[t];
    if (i)
      return i.reduce((o, { name: a, type: c }) => (o[a] = this._visit(c, e[a], n), o), {});
    y(!1, `unknown type: ${t}`, "type", t);
  }
  /**
   *  Call %%calback%% for each value in %%value%%, passing the type and
   *  component within %%value%%.
   *
   *  This is useful for replacing addresses or other transformation that
   *  may be desired on each component, based on its type.
   */
  visit(t, e) {
    return this._visit(this.primaryType, t, e);
  }
  /**
   *  Create a new **TypedDataEncoder** for %%types%%.
   */
  static from(t) {
    return new qt(t);
  }
  /**
   *  Return the primary type for %%types%%.
   */
  static getPrimaryType(t) {
    return qt.from(t).primaryType;
  }
  /**
   *  Return the hashed struct for %%value%% using %%types%% and %%name%%.
   */
  static hashStruct(t, e, n) {
    return qt.from(e).hashStruct(t, n);
  }
  /**
   *  Return the domain hash for %%domain%%.
   */
  static hashDomain(t) {
    const e = [];
    for (const n in t) {
      if (t[n] == null)
        continue;
      const s = _c[n];
      y(s, `invalid typed-data domain key: ${JSON.stringify(n)}`, "domain", t), e.push({ name: n, type: s });
    }
    return e.sort((n, s) => Do.indexOf(n.name) - Do.indexOf(s.name)), qt.hashStruct("EIP712Domain", { EIP712Domain: e }, t);
  }
  /**
   *  Return the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.
   */
  static encode(t, e, n) {
    return pt([
      "0x1901",
      qt.hashDomain(t),
      qt.from(e).hash(n)
    ]);
  }
  /**
   *  Return the hash of the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.
   */
  static hash(t, e, n) {
    return it(qt.encode(t, e, n));
  }
  // Replaces all address types with ENS names with their looked up address
  /**
   * Resolves to the value from resolving all addresses in %%value%% for
   * %%types%% and the %%domain%%.
   */
  static async resolveNames(t, e, n, s) {
    t = Object.assign({}, t);
    for (const a in t)
      t[a] == null && delete t[a];
    const i = {};
    t.verifyingContract && !ot(t.verifyingContract, 20) && (i[t.verifyingContract] = "0x");
    const o = qt.from(e);
    o.visit(n, (a, c) => (a === "address" && !ot(c, 20) && (i[c] = "0x"), c));
    for (const a in i)
      i[a] = await s(a);
    return t.verifyingContract && i[t.verifyingContract] && (t.verifyingContract = i[t.verifyingContract]), n = o.visit(n, (a, c) => a === "address" && i[c] ? i[c] : c), { domain: t, value: n };
  }
  /**
   *  Returns the JSON-encoded payload expected by nodes which implement
   *  the JSON-RPC [[link-eip-712]] method.
   */
  static getPayload(t, e, n) {
    qt.hashDomain(t);
    const s = {}, i = [];
    Do.forEach((c) => {
      const u = t[c];
      u != null && (s[c] = vp[c](u), i.push({ name: c, type: _c[c] }));
    });
    const o = qt.from(e), a = Object.assign({}, e);
    return y(a.EIP712Domain == null, "types must not contain EIP712Domain type", "types.EIP712Domain", e), a.EIP712Domain = i, o.encode(n), {
      types: a,
      domain: s,
      primaryType: o.primaryType,
      message: o.visit(n, (c, u) => {
        if (c.match(/^bytes(\d*)/))
          return F(X(u));
        if (c.match(/^u?int/))
          return L(u).toString();
        switch (c) {
          case "address":
            return u.toLowerCase();
          case "bool":
            return !!u;
          case "string":
            return y(typeof u == "string", "invalid string", "value", u), u;
        }
        y(!1, "unsupported type", "type", c);
      })
    };
  }
};
$s = new WeakMap(), ze = new WeakMap(), qr = new WeakMap(), qi = new WeakSet(), Ol = function(t) {
  {
    const s = Fo(t);
    if (s)
      return s;
  }
  const e = t.match(/^(.*)(\x5b(\d*)\x5d)$/);
  if (e) {
    const s = e[1], i = this.getEncoder(s);
    return (o) => {
      y(!e[3] || parseInt(e[3]) === o.length, `array length mismatch; expected length ${parseInt(e[3])}`, "value", o);
      let a = o.map(i);
      return l(this, ze).has(s) && (a = a.map(it)), it(pt(a));
    };
  }
  const n = this.types[t];
  if (n) {
    const s = cr(l(this, ze).get(t));
    return (i) => {
      const o = n.map(({ name: a, type: c }) => {
        const u = this.getEncoder(c)(i[a]);
        return l(this, ze).has(c) ? it(u) : u;
      });
      return o.unshift(s), pt(o);
    };
  }
  y(!1, `unknown type: ${t}`, "type", t);
};
let ji = qt;
function Dt(r) {
  const t = /* @__PURE__ */ new Set();
  return r.forEach((e) => t.add(e)), Object.freeze(t);
}
const xp = "external public payable", Pp = Dt(xp.split(" ")), Il = "constant external internal payable private public pure view", Np = Dt(Il.split(" ")), Bl = "constructor error event fallback function receive struct", Rl = Dt(Bl.split(" ")), kl = "calldata memory storage payable indexed", Cp = Dt(kl.split(" ")), Tp = "tuple returns", Op = [Bl, kl, Tp, Il].join(" "), Ip = Dt(Op.split(" ")), Bp = {
  "(": "OPEN_PAREN",
  ")": "CLOSE_PAREN",
  "[": "OPEN_BRACKET",
  "]": "CLOSE_BRACKET",
  ",": "COMMA",
  "@": "AT"
}, Rp = new RegExp("^(\\s*)"), kp = new RegExp("^([0-9]+)"), Sp = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)"), Sl = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)$"), Ul = new RegExp("^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$");
var mt, ge, ti, sa;
const $i = class $i {
  constructor(t) {
    b(this, ti);
    b(this, mt, void 0);
    b(this, ge, void 0);
    d(this, mt, 0), d(this, ge, t.slice());
  }
  get offset() {
    return l(this, mt);
  }
  get length() {
    return l(this, ge).length - l(this, mt);
  }
  clone() {
    return new $i(l(this, ge));
  }
  reset() {
    d(this, mt, 0);
  }
  // Pops and returns the value of the next token, if it is a keyword in allowed; throws if out of tokens
  popKeyword(t) {
    const e = this.peek();
    if (e.type !== "KEYWORD" || !t.has(e.text))
      throw new Error(`expected keyword ${e.text}`);
    return this.pop().text;
  }
  // Pops and returns the value of the next token if it is `type`; throws if out of tokens
  popType(t) {
    if (this.peek().type !== t)
      throw new Error(`expected ${t}; got ${JSON.stringify(this.peek())}`);
    return this.pop().text;
  }
  // Pops and returns a "(" TOKENS ")"
  popParen() {
    const t = this.peek();
    if (t.type !== "OPEN_PAREN")
      throw new Error("bad start");
    const e = O(this, ti, sa).call(this, l(this, mt) + 1, t.match + 1);
    return d(this, mt, t.match + 1), e;
  }
  // Pops and returns the items within "(" ITEM1 "," ITEM2 "," ... ")"
  popParams() {
    const t = this.peek();
    if (t.type !== "OPEN_PAREN")
      throw new Error("bad start");
    const e = [];
    for (; l(this, mt) < t.match - 1; ) {
      const n = this.peek().linkNext;
      e.push(O(this, ti, sa).call(this, l(this, mt) + 1, n)), d(this, mt, n);
    }
    return d(this, mt, t.match + 1), e;
  }
  // Returns the top Token, throwing if out of tokens
  peek() {
    if (l(this, mt) >= l(this, ge).length)
      throw new Error("out-of-bounds");
    return l(this, ge)[l(this, mt)];
  }
  // Returns the next value, if it is a keyword in `allowed`
  peekKeyword(t) {
    const e = this.peekType("KEYWORD");
    return e != null && t.has(e) ? e : null;
  }
  // Returns the value of the next token if it is `type`
  peekType(t) {
    if (this.length === 0)
      return null;
    const e = this.peek();
    return e.type === t ? e.text : null;
  }
  // Returns the next token; throws if out of tokens
  pop() {
    const t = this.peek();
    return Cs(this, mt)._++, t;
  }
  toString() {
    const t = [];
    for (let e = l(this, mt); e < l(this, ge).length; e++) {
      const n = l(this, ge)[e];
      t.push(`${n.type}:${n.text}`);
    }
    return `<TokenString ${t.join(" ")}>`;
  }
};
mt = new WeakMap(), ge = new WeakMap(), ti = new WeakSet(), sa = function(t = 0, e = 0) {
  return new $i(l(this, ge).slice(t, e).map((n) => Object.freeze(Object.assign({}, n, {
    match: n.match - t,
    linkBack: n.linkBack - t,
    linkNext: n.linkNext - t
  }))));
};
let Ae = $i;
function kn(r) {
  const t = [], e = (o) => {
    const a = i < r.length ? JSON.stringify(r[i]) : "$EOI";
    throw new Error(`invalid token ${a} at ${i}: ${o}`);
  };
  let n = [], s = [], i = 0;
  for (; i < r.length; ) {
    let o = r.substring(i), a = o.match(Rp);
    a && (i += a[1].length, o = r.substring(i));
    const c = { depth: n.length, linkBack: -1, linkNext: -1, match: -1, type: "", text: "", offset: i, value: -1 };
    t.push(c);
    let u = Bp[o[0]] || "";
    if (u) {
      if (c.type = u, c.text = o[0], i++, u === "OPEN_PAREN")
        n.push(t.length - 1), s.push(t.length - 1);
      else if (u == "CLOSE_PAREN")
        n.length === 0 && e("no matching open bracket"), c.match = n.pop(), t[c.match].match = t.length - 1, c.depth--, c.linkBack = s.pop(), t[c.linkBack].linkNext = t.length - 1;
      else if (u === "COMMA")
        c.linkBack = s.pop(), t[c.linkBack].linkNext = t.length - 1, s.push(t.length - 1);
      else if (u === "OPEN_BRACKET")
        c.type = "BRACKET";
      else if (u === "CLOSE_BRACKET") {
        let f = t.pop().text;
        if (t.length > 0 && t[t.length - 1].type === "NUMBER") {
          const h = t.pop().text;
          f = h + f, t[t.length - 1].value = V(h);
        }
        if (t.length === 0 || t[t.length - 1].type !== "BRACKET")
          throw new Error("missing opening bracket");
        t[t.length - 1].text += f;
      }
      continue;
    }
    if (a = o.match(Sp), a) {
      if (c.text = a[1], i += c.text.length, Ip.has(c.text)) {
        c.type = "KEYWORD";
        continue;
      }
      if (c.text.match(Ul)) {
        c.type = "TYPE";
        continue;
      }
      c.type = "ID";
      continue;
    }
    if (a = o.match(kp), a) {
      c.text = a[1], c.type = "NUMBER", i += c.text.length;
      continue;
    }
    throw new Error(`unexpected token ${JSON.stringify(o[0])} at position ${i}`);
  }
  return new Ae(t.map((o) => Object.freeze(o)));
}
function jc(r, t) {
  let e = [];
  for (const n in t.keys())
    r.has(n) && e.push(n);
  if (e.length > 1)
    throw new Error(`conflicting types: ${e.join(", ")}`);
}
function ho(r, t) {
  if (t.peekKeyword(Rl)) {
    const e = t.pop().text;
    if (e !== r)
      throw new Error(`expected ${r}, got ${e}`);
  }
  return t.popType("ID");
}
function rn(r, t) {
  const e = /* @__PURE__ */ new Set();
  for (; ; ) {
    const n = r.peekType("KEYWORD");
    if (n == null || t && !t.has(n))
      break;
    if (r.pop(), e.has(n))
      throw new Error(`duplicate keywords: ${JSON.stringify(n)}`);
    e.add(n);
  }
  return Object.freeze(e);
}
function Dl(r) {
  let t = rn(r, Np);
  return jc(t, Dt("constant payable nonpayable".split(" "))), jc(t, Dt("pure view payable nonpayable".split(" "))), t.has("view") ? "view" : t.has("pure") ? "pure" : t.has("payable") ? "payable" : t.has("nonpayable") ? "nonpayable" : t.has("constant") ? "view" : "nonpayable";
}
function nn(r, t) {
  return r.popParams().map((e) => At.from(e, t));
}
function Fl(r) {
  if (r.peekType("AT")) {
    if (r.pop(), r.peekType("NUMBER"))
      return L(r.pop().text);
    throw new Error("invalid gas");
  }
  return null;
}
function ur(r) {
  if (r.length)
    throw new Error(`unexpected tokens: ${r.toString()}`);
}
const Up = new RegExp(/^(.*)\[([0-9]*)\]$/);
function zc(r) {
  const t = r.match(Ul);
  if (y(t, "invalid type", "type", r), r === "uint")
    return "uint256";
  if (r === "int")
    return "int256";
  if (t[2]) {
    const e = parseInt(t[2]);
    y(e !== 0 && e <= 32, "invalid bytes length", "type", r);
  } else if (t[3]) {
    const e = parseInt(t[3]);
    y(e !== 0 && e <= 256 && e % 8 === 0, "invalid numeric width", "type", r);
  }
  return r;
}
const st = {}, _t = Symbol.for("_ethers_internal"), Kc = "_ParamTypeInternal", Wc = "_ErrorInternal", Yc = "_EventInternal", Zc = "_ConstructorInternal", Xc = "_FallbackInternal", qc = "_FunctionInternal", $c = "_StructInternal";
var $r, Ri;
const $t = class $t {
  /**
   *  @private
   */
  constructor(t, e, n, s, i, o, a, c) {
    b(this, $r);
    /**
     *  The local name of the parameter (or ``""`` if unbound)
     */
    A(this, "name");
    /**
     *  The fully qualified type (e.g. ``"address"``, ``"tuple(address)"``,
     *  ``"uint256[3][]"``)
     */
    A(this, "type");
    /**
     *  The base type (e.g. ``"address"``, ``"tuple"``, ``"array"``)
     */
    A(this, "baseType");
    /**
     *  True if the parameters is indexed.
     *
     *  For non-indexable types this is ``null``.
     */
    A(this, "indexed");
    /**
     *  The components for the tuple.
     *
     *  For non-tuple types this is ``null``.
     */
    A(this, "components");
    /**
     *  The array length, or ``-1`` for dynamic-lengthed arrays.
     *
     *  For non-array types this is ``null``.
     */
    A(this, "arrayLength");
    /**
     *  The type of each child in the array.
     *
     *  For non-array types this is ``null``.
     */
    A(this, "arrayChildren");
    if (so(t, st, "ParamType"), Object.defineProperty(this, _t, { value: Kc }), o && (o = Object.freeze(o.slice())), s === "array") {
      if (a == null || c == null)
        throw new Error("");
    } else if (a != null || c != null)
      throw new Error("");
    if (s === "tuple") {
      if (o == null)
        throw new Error("");
    } else if (o != null)
      throw new Error("");
    M(this, {
      name: e,
      type: n,
      baseType: s,
      indexed: i,
      components: o,
      arrayLength: a,
      arrayChildren: c
    });
  }
  /**
   *  Return a string representation of this type.
   *
   *  For example,
   *
   *  ``sighash" => "(uint256,address)"``
   *
   *  ``"minimal" => "tuple(uint256,address) indexed"``
   *
   *  ``"full" => "tuple(uint256 foo, address bar) indexed baz"``
   */
  format(t) {
    if (t == null && (t = "sighash"), t === "json") {
      const n = this.name || "";
      if (this.isArray()) {
        const i = JSON.parse(this.arrayChildren.format("json"));
        return i.name = n, i.type += `[${this.arrayLength < 0 ? "" : String(this.arrayLength)}]`, JSON.stringify(i);
      }
      const s = {
        type: this.baseType === "tuple" ? "tuple" : this.type,
        name: n
      };
      return typeof this.indexed == "boolean" && (s.indexed = this.indexed), this.isTuple() && (s.components = this.components.map((i) => JSON.parse(i.format(t)))), JSON.stringify(s);
    }
    let e = "";
    return this.isArray() ? (e += this.arrayChildren.format(t), e += `[${this.arrayLength < 0 ? "" : String(this.arrayLength)}]`) : this.isTuple() ? e += "(" + this.components.map((n) => n.format(t)).join(t === "full" ? ", " : ",") + ")" : e += this.type, t !== "sighash" && (this.indexed === !0 && (e += " indexed"), t === "full" && this.name && (e += " " + this.name)), e;
  }
  /**
   *  Returns true if %%this%% is an Array type.
   *
   *  This provides a type gaurd ensuring that [[arrayChildren]]
   *  and [[arrayLength]] are non-null.
   */
  isArray() {
    return this.baseType === "array";
  }
  /**
   *  Returns true if %%this%% is a Tuple type.
   *
   *  This provides a type gaurd ensuring that [[components]]
   *  is non-null.
   */
  isTuple() {
    return this.baseType === "tuple";
  }
  /**
   *  Returns true if %%this%% is an Indexable type.
   *
   *  This provides a type gaurd ensuring that [[indexed]]
   *  is non-null.
   */
  isIndexable() {
    return this.indexed != null;
  }
  /**
   *  Walks the **ParamType** with %%value%%, calling %%process%%
   *  on each type, destructing the %%value%% recursively.
   */
  walk(t, e) {
    if (this.isArray()) {
      if (!Array.isArray(t))
        throw new Error("invalid array value");
      if (this.arrayLength !== -1 && t.length !== this.arrayLength)
        throw new Error("array is wrong length");
      const n = this;
      return t.map((s) => n.arrayChildren.walk(s, e));
    }
    if (this.isTuple()) {
      if (!Array.isArray(t))
        throw new Error("invalid tuple value");
      if (t.length !== this.components.length)
        throw new Error("array is wrong length");
      const n = this;
      return t.map((s, i) => n.components[i].walk(s, e));
    }
    return e(this.type, t);
  }
  /**
   *  Walks the **ParamType** with %%value%%, asynchronously calling
   *  %%process%% on each type, destructing the %%value%% recursively.
   *
   *  This can be used to resolve ENS naes by walking and resolving each
   *  ``"address"`` type.
   */
  async walkAsync(t, e) {
    const n = [], s = [t];
    return O(this, $r, Ri).call(this, n, t, e, (i) => {
      s[0] = i;
    }), n.length && await Promise.all(n), s[0];
  }
  /**
   *  Creates a new **ParamType** for %%obj%%.
   *
   *  If %%allowIndexed%% then the ``indexed`` keyword is permitted,
   *  otherwise the ``indexed`` keyword will throw an error.
   */
  static from(t, e) {
    if ($t.isParamType(t))
      return t;
    if (typeof t == "string")
      try {
        return $t.from(kn(t), e);
      } catch {
        y(!1, "invalid param type", "obj", t);
      }
    else if (t instanceof Ae) {
      let a = "", c = "", u = null;
      rn(t, Dt(["tuple"])).has("tuple") || t.peekType("OPEN_PAREN") ? (c = "tuple", u = t.popParams().map((m) => $t.from(m)), a = `tuple(${u.map((m) => m.format()).join(",")})`) : (a = zc(t.popType("TYPE")), c = a);
      let f = null, h = null;
      for (; t.length && t.peekType("BRACKET"); ) {
        const m = t.pop();
        f = new $t(st, "", a, c, null, u, h, f), h = m.value, a += m.text, c = "array", u = null;
      }
      let g = null;
      if (rn(t, Cp).has("indexed")) {
        if (!e)
          throw new Error("");
        g = !0;
      }
      const E = t.peekType("ID") ? t.pop().text : "";
      if (t.length)
        throw new Error("leftover tokens");
      return new $t(st, E, a, c, g, u, h, f);
    }
    const n = t.name;
    y(!n || typeof n == "string" && n.match(Sl), "invalid name", "obj.name", n);
    let s = t.indexed;
    s != null && (y(e, "parameter cannot be indexed", "obj.indexed", t.indexed), s = !!s);
    let i = t.type, o = i.match(Up);
    if (o) {
      const a = parseInt(o[2] || "-1"), c = $t.from({
        type: o[1],
        components: t.components
      });
      return new $t(st, n || "", i, "array", s, null, a, c);
    }
    if (i === "tuple" || i.startsWith(
      "tuple("
      /* fix: ) */
    ) || i.startsWith(
      "("
      /* fix: ) */
    )) {
      const a = t.components != null ? t.components.map((u) => $t.from(u)) : null;
      return new $t(st, n || "", i, "tuple", s, a, null, null);
    }
    return i = zc(t.type), new $t(st, n || "", i, i, s, null, null, null);
  }
  /**
   *  Returns true if %%value%% is a **ParamType**.
   */
  static isParamType(t) {
    return t && t[_t] === Kc;
  }
};
$r = new WeakSet(), Ri = function(t, e, n, s) {
  if (this.isArray()) {
    if (!Array.isArray(e))
      throw new Error("invalid array value");
    if (this.arrayLength !== -1 && e.length !== this.arrayLength)
      throw new Error("array is wrong length");
    const o = this.arrayChildren, a = e.slice();
    a.forEach((c, u) => {
      var f;
      O(f = o, $r, Ri).call(f, t, c, n, (h) => {
        a[u] = h;
      });
    }), s(a);
    return;
  }
  if (this.isTuple()) {
    const o = this.components;
    let a;
    if (Array.isArray(e))
      a = e.slice();
    else {
      if (e == null || typeof e != "object")
        throw new Error("invalid tuple value");
      a = o.map((c) => {
        if (!c.name)
          throw new Error("cannot use object value with unnamed components");
        if (!(c.name in e))
          throw new Error(`missing value for component ${c.name}`);
        return e[c.name];
      });
    }
    if (a.length !== this.components.length)
      throw new Error("array is wrong length");
    a.forEach((c, u) => {
      var f;
      O(f = o[u], $r, Ri).call(f, t, c, n, (h) => {
        a[u] = h;
      });
    }), s(a);
    return;
  }
  const i = n(this.type, e);
  i.then ? t.push(async function() {
    s(await i);
  }()) : s(i);
};
let At = $t;
class lr {
  /**
   *  @private
   */
  constructor(t, e, n) {
    /**
     *  The type of the fragment.
     */
    A(this, "type");
    /**
     *  The inputs for the fragment.
     */
    A(this, "inputs");
    so(t, st, "Fragment"), n = Object.freeze(n.slice()), M(this, { type: e, inputs: n });
  }
  /**
   *  Creates a new **Fragment** for %%obj%%, wich can be any supported
   *  ABI frgament type.
   */
  static from(t) {
    if (typeof t == "string") {
      try {
        lr.from(JSON.parse(t));
      } catch {
      }
      return lr.from(kn(t));
    }
    if (t instanceof Ae)
      switch (t.peekKeyword(Rl)) {
        case "constructor":
          return tn.from(t);
        case "error":
          return Qt.from(t);
        case "event":
          return Be.from(t);
        case "fallback":
        case "receive":
          return Ge.from(t);
        case "function":
          return Re.from(t);
        case "struct":
          return or.from(t);
      }
    else if (typeof t == "object") {
      switch (t.type) {
        case "constructor":
          return tn.from(t);
        case "error":
          return Qt.from(t);
        case "event":
          return Be.from(t);
        case "fallback":
        case "receive":
          return Ge.from(t);
        case "function":
          return Re.from(t);
        case "struct":
          return or.from(t);
      }
      P(!1, `unsupported type: ${t.type}`, "UNSUPPORTED_OPERATION", {
        operation: "Fragment.from"
      });
    }
    y(!1, "unsupported frgament object", "obj", t);
  }
  /**
   *  Returns true if %%value%% is a [[ConstructorFragment]].
   */
  static isConstructor(t) {
    return tn.isFragment(t);
  }
  /**
   *  Returns true if %%value%% is an [[ErrorFragment]].
   */
  static isError(t) {
    return Qt.isFragment(t);
  }
  /**
   *  Returns true if %%value%% is an [[EventFragment]].
   */
  static isEvent(t) {
    return Be.isFragment(t);
  }
  /**
   *  Returns true if %%value%% is a [[FunctionFragment]].
   */
  static isFunction(t) {
    return Re.isFragment(t);
  }
  /**
   *  Returns true if %%value%% is a [[StructFragment]].
   */
  static isStruct(t) {
    return or.isFragment(t);
  }
}
class po extends lr {
  /**
   *  @private
   */
  constructor(e, n, s, i) {
    super(e, n, i);
    /**
     *  The name of the fragment.
     */
    A(this, "name");
    y(typeof s == "string" && s.match(Sl), "invalid identifier", "name", s), i = Object.freeze(i.slice()), M(this, { name: s });
  }
}
function zs(r, t) {
  return "(" + t.map((e) => e.format(r)).join(r === "full" ? ", " : ",") + ")";
}
class Qt extends po {
  /**
   *  @private
   */
  constructor(t, e, n) {
    super(t, "error", e, n), Object.defineProperty(this, _t, { value: Wc });
  }
  /**
   *  The Custom Error selector.
   */
  get selector() {
    return cr(this.format("sighash")).substring(0, 10);
  }
  /**
   *  Returns a string representation of this fragment as %%format%%.
   */
  format(t) {
    if (t == null && (t = "sighash"), t === "json")
      return JSON.stringify({
        type: "error",
        name: this.name,
        inputs: this.inputs.map((n) => JSON.parse(n.format(t)))
      });
    const e = [];
    return t !== "sighash" && e.push("error"), e.push(this.name + zs(t, this.inputs)), e.join(" ");
  }
  /**
   *  Returns a new **ErrorFragment** for %%obj%%.
   */
  static from(t) {
    if (Qt.isFragment(t))
      return t;
    if (typeof t == "string")
      return Qt.from(kn(t));
    if (t instanceof Ae) {
      const e = ho("error", t), n = nn(t);
      return ur(t), new Qt(st, e, n);
    }
    return new Qt(st, t.name, t.inputs ? t.inputs.map(At.from) : []);
  }
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is an
   *  **ErrorFragment**.
   */
  static isFragment(t) {
    return t && t[_t] === Wc;
  }
}
class Be extends po {
  /**
   *  @private
   */
  constructor(e, n, s, i) {
    super(e, "event", n, s);
    /**
     *  Whether this event is anonymous.
     */
    A(this, "anonymous");
    Object.defineProperty(this, _t, { value: Yc }), M(this, { anonymous: i });
  }
  /**
   *  The Event topic hash.
   */
  get topicHash() {
    return cr(this.format("sighash"));
  }
  /**
   *  Returns a string representation of this event as %%format%%.
   */
  format(e) {
    if (e == null && (e = "sighash"), e === "json")
      return JSON.stringify({
        type: "event",
        anonymous: this.anonymous,
        name: this.name,
        inputs: this.inputs.map((s) => JSON.parse(s.format(e)))
      });
    const n = [];
    return e !== "sighash" && n.push("event"), n.push(this.name + zs(e, this.inputs)), e !== "sighash" && this.anonymous && n.push("anonymous"), n.join(" ");
  }
  /**
   *  Return the topic hash for an event with %%name%% and %%params%%.
   */
  static getTopicHash(e, n) {
    return n = (n || []).map((i) => At.from(i)), new Be(st, e, n, !1).topicHash;
  }
  /**
   *  Returns a new **EventFragment** for %%obj%%.
   */
  static from(e) {
    if (Be.isFragment(e))
      return e;
    if (typeof e == "string")
      try {
        return Be.from(kn(e));
      } catch {
        y(!1, "invalid event fragment", "obj", e);
      }
    else if (e instanceof Ae) {
      const n = ho("event", e), s = nn(e, !0), i = !!rn(e, Dt(["anonymous"])).has("anonymous");
      return ur(e), new Be(st, n, s, i);
    }
    return new Be(st, e.name, e.inputs ? e.inputs.map((n) => At.from(n, !0)) : [], !!e.anonymous);
  }
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is an
   *  **EventFragment**.
   */
  static isFragment(e) {
    return e && e[_t] === Yc;
  }
}
class tn extends lr {
  /**
   *  @private
   */
  constructor(e, n, s, i, o) {
    super(e, n, s);
    /**
     *  Whether the constructor can receive an endowment.
     */
    A(this, "payable");
    /**
     *  The recommended gas limit for deployment or ``null``.
     */
    A(this, "gas");
    Object.defineProperty(this, _t, { value: Zc }), M(this, { payable: i, gas: o });
  }
  /**
   *  Returns a string representation of this constructor as %%format%%.
   */
  format(e) {
    if (P(e != null && e !== "sighash", "cannot format a constructor for sighash", "UNSUPPORTED_OPERATION", { operation: "format(sighash)" }), e === "json")
      return JSON.stringify({
        type: "constructor",
        stateMutability: this.payable ? "payable" : "undefined",
        payable: this.payable,
        gas: this.gas != null ? this.gas : void 0,
        inputs: this.inputs.map((s) => JSON.parse(s.format(e)))
      });
    const n = [`constructor${zs(e, this.inputs)}`];
    return this.payable && n.push("payable"), this.gas != null && n.push(`@${this.gas.toString()}`), n.join(" ");
  }
  /**
   *  Returns a new **ConstructorFragment** for %%obj%%.
   */
  static from(e) {
    if (tn.isFragment(e))
      return e;
    if (typeof e == "string")
      try {
        return tn.from(kn(e));
      } catch {
        y(!1, "invalid constuctor fragment", "obj", e);
      }
    else if (e instanceof Ae) {
      rn(e, Dt(["constructor"]));
      const n = nn(e), s = !!rn(e, Pp).has("payable"), i = Fl(e);
      return ur(e), new tn(st, "constructor", n, s, i);
    }
    return new tn(st, "constructor", e.inputs ? e.inputs.map(At.from) : [], !!e.payable, e.gas != null ? e.gas : null);
  }
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is a
   *  **ConstructorFragment**.
   */
  static isFragment(e) {
    return e && e[_t] === Zc;
  }
}
class Ge extends lr {
  constructor(e, n, s) {
    super(e, "fallback", n);
    /**
     *  If the function can be sent value during invocation.
     */
    A(this, "payable");
    Object.defineProperty(this, _t, { value: Xc }), M(this, { payable: s });
  }
  /**
   *  Returns a string representation of this fallback as %%format%%.
   */
  format(e) {
    const n = this.inputs.length === 0 ? "receive" : "fallback";
    if (e === "json") {
      const s = this.payable ? "payable" : "nonpayable";
      return JSON.stringify({ type: n, stateMutability: s });
    }
    return `${n}()${this.payable ? " payable" : ""}`;
  }
  /**
   *  Returns a new **FallbackFragment** for %%obj%%.
   */
  static from(e) {
    if (Ge.isFragment(e))
      return e;
    if (typeof e == "string")
      try {
        return Ge.from(kn(e));
      } catch {
        y(!1, "invalid fallback fragment", "obj", e);
      }
    else if (e instanceof Ae) {
      const n = e.toString(), s = e.peekKeyword(Dt(["fallback", "receive"]));
      if (y(s, "type must be fallback or receive", "obj", n), e.popKeyword(Dt(["fallback", "receive"])) === "receive") {
        const c = nn(e);
        return y(c.length === 0, "receive cannot have arguments", "obj.inputs", c), rn(e, Dt(["payable"])), ur(e), new Ge(st, [], !0);
      }
      let o = nn(e);
      o.length ? y(o.length === 1 && o[0].type === "bytes", "invalid fallback inputs", "obj.inputs", o.map((c) => c.format("minimal")).join(", ")) : o = [At.from("bytes")];
      const a = Dl(e);
      if (y(a === "nonpayable" || a === "payable", "fallback cannot be constants", "obj.stateMutability", a), rn(e, Dt(["returns"])).has("returns")) {
        const c = nn(e);
        y(c.length === 1 && c[0].type === "bytes", "invalid fallback outputs", "obj.outputs", c.map((u) => u.format("minimal")).join(", "));
      }
      return ur(e), new Ge(st, o, a === "payable");
    }
    if (e.type === "receive")
      return new Ge(st, [], !0);
    if (e.type === "fallback") {
      const n = [At.from("bytes")], s = e.stateMutability === "payable";
      return new Ge(st, n, s);
    }
    y(!1, "invalid fallback description", "obj", e);
  }
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is a
   *  **FallbackFragment**.
   */
  static isFragment(e) {
    return e && e[_t] === Xc;
  }
}
class Re extends po {
  /**
   *  @private
   */
  constructor(e, n, s, i, o, a) {
    super(e, "function", n, i);
    /**
     *  If the function is constant (e.g. ``pure`` or ``view`` functions).
     */
    A(this, "constant");
    /**
     *  The returned types for the result of calling this function.
     */
    A(this, "outputs");
    /**
     *  The state mutability (e.g. ``payable``, ``nonpayable``, ``view``
     *  or ``pure``)
     */
    A(this, "stateMutability");
    /**
     *  If the function can be sent value during invocation.
     */
    A(this, "payable");
    /**
     *  The recommended gas limit to send when calling this function.
     */
    A(this, "gas");
    Object.defineProperty(this, _t, { value: qc }), o = Object.freeze(o.slice()), M(this, { constant: s === "view" || s === "pure", gas: a, outputs: o, payable: s === "payable", stateMutability: s });
  }
  /**
   *  The Function selector.
   */
  get selector() {
    return cr(this.format("sighash")).substring(0, 10);
  }
  /**
   *  Returns a string representation of this function as %%format%%.
   */
  format(e) {
    if (e == null && (e = "sighash"), e === "json")
      return JSON.stringify({
        type: "function",
        name: this.name,
        constant: this.constant,
        stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
        payable: this.payable,
        gas: this.gas != null ? this.gas : void 0,
        inputs: this.inputs.map((s) => JSON.parse(s.format(e))),
        outputs: this.outputs.map((s) => JSON.parse(s.format(e)))
      });
    const n = [];
    return e !== "sighash" && n.push("function"), n.push(this.name + zs(e, this.inputs)), e !== "sighash" && (this.stateMutability !== "nonpayable" && n.push(this.stateMutability), this.outputs && this.outputs.length && (n.push("returns"), n.push(zs(e, this.outputs))), this.gas != null && n.push(`@${this.gas.toString()}`)), n.join(" ");
  }
  /**
   *  Return the selector for a function with %%name%% and %%params%%.
   */
  static getSelector(e, n) {
    return n = (n || []).map((i) => At.from(i)), new Re(st, e, "view", n, [], null).selector;
  }
  /**
   *  Returns a new **FunctionFragment** for %%obj%%.
   */
  static from(e) {
    if (Re.isFragment(e))
      return e;
    if (typeof e == "string")
      try {
        return Re.from(kn(e));
      } catch {
        y(!1, "invalid function fragment", "obj", e);
      }
    else if (e instanceof Ae) {
      const s = ho("function", e), i = nn(e), o = Dl(e);
      let a = [];
      rn(e, Dt(["returns"])).has("returns") && (a = nn(e));
      const c = Fl(e);
      return ur(e), new Re(st, s, o, i, a, c);
    }
    let n = e.stateMutability;
    return n == null && (n = "payable", typeof e.constant == "boolean" ? (n = "view", e.constant || (n = "payable", typeof e.payable == "boolean" && !e.payable && (n = "nonpayable"))) : typeof e.payable == "boolean" && !e.payable && (n = "nonpayable")), new Re(st, e.name, n, e.inputs ? e.inputs.map(At.from) : [], e.outputs ? e.outputs.map(At.from) : [], e.gas != null ? e.gas : null);
  }
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is a
   *  **FunctionFragment**.
   */
  static isFragment(e) {
    return e && e[_t] === qc;
  }
}
class or extends po {
  /**
   *  @private
   */
  constructor(t, e, n) {
    super(t, "struct", e, n), Object.defineProperty(this, _t, { value: $c });
  }
  /**
   *  Returns a string representation of this struct as %%format%%.
   */
  format() {
    throw new Error("@TODO");
  }
  /**
   *  Returns a new **StructFragment** for %%obj%%.
   */
  static from(t) {
    if (typeof t == "string")
      try {
        return or.from(kn(t));
      } catch {
        y(!1, "invalid struct fragment", "obj", t);
      }
    else if (t instanceof Ae) {
      const e = ho("struct", t), n = nn(t);
      return ur(t), new or(st, e, n);
    }
    return new or(st, t.name, t.inputs ? t.inputs.map(At.from) : []);
  }
  // @TODO: fix this return type
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is a
   *  **StructFragment**.
   */
  static isFragment(t) {
    return t && t[_t] === $c;
  }
}
const be = /* @__PURE__ */ new Map();
be.set(0, "GENERIC_PANIC");
be.set(1, "ASSERT_FALSE");
be.set(17, "OVERFLOW");
be.set(18, "DIVIDE_BY_ZERO");
be.set(33, "ENUM_RANGE_ERROR");
be.set(34, "BAD_STORAGE_DATA");
be.set(49, "STACK_UNDERFLOW");
be.set(50, "ARRAY_RANGE_ERROR");
be.set(65, "OUT_OF_MEMORY");
be.set(81, "UNINITIALIZED_FUNCTION_CALL");
const Dp = new RegExp(/^bytes([0-9]*)$/), Fp = new RegExp(/^(u?int)([0-9]*)$/);
let Lo = null;
function Lp(r, t, e, n) {
  let s = "missing revert data", i = null;
  const o = null;
  let a = null;
  if (e) {
    s = "execution reverted";
    const u = X(e);
    if (e = F(e), u.length === 0)
      s += " (no data present; likely require(false) occurred", i = "require(false)";
    else if (u.length % 32 !== 4)
      s += " (could not decode reason; invalid data length)";
    else if (F(u.slice(0, 4)) === "0x08c379a0")
      try {
        i = n.decode(["string"], u.slice(4))[0], a = {
          signature: "Error(string)",
          name: "Error",
          args: [i]
        }, s += `: ${JSON.stringify(i)}`;
      } catch {
        s += " (could not decode reason; invalid string data)";
      }
    else if (F(u.slice(0, 4)) === "0x4e487b71")
      try {
        const f = Number(n.decode(["uint256"], u.slice(4))[0]);
        a = {
          signature: "Panic(uint256)",
          name: "Panic",
          args: [f]
        }, i = `Panic due to ${be.get(f) || "UNKNOWN"}(${f})`, s += `: ${i}`;
      } catch {
        s += " (could not decode panic code)";
      }
    else
      s += " (unknown custom error)";
  }
  const c = {
    to: t.to ? W(t.to) : null,
    data: t.data || "0x"
  };
  return t.from && (c.from = W(t.from)), dt(s, "CALL_EXCEPTION", {
    action: r,
    data: e,
    reason: i,
    transaction: c,
    invocation: o,
    revert: a
  });
}
var yn, br;
const to = class to {
  constructor() {
    b(this, yn);
  }
  /**
   *  Get the default values for the given %%types%%.
   *
   *  For example, a ``uint`` is by default ``0`` and ``bool``
   *  is by default ``false``.
   */
  getDefaultValue(t) {
    const e = t.map((s) => O(this, yn, br).call(this, At.from(s)));
    return new Pi(e, "_").defaultValue();
  }
  /**
   *  Encode the %%values%% as the %%types%% into ABI data.
   *
   *  @returns DataHexstring
   */
  encode(t, e) {
    wu(e.length, t.length, "types/values length mismatch");
    const n = t.map((o) => O(this, yn, br).call(this, At.from(o))), s = new Pi(n, "_"), i = new jo();
    return s.encode(i, e), i.data;
  }
  /**
   *  Decode the ABI %%data%% as the %%types%% into values.
   *
   *  If %%loose%% decoding is enabled, then strict padding is
   *  not enforced. Some older versions of Solidity incorrectly
   *  padded event data emitted from ``external`` functions.
   */
  decode(t, e, n) {
    const s = t.map((o) => O(this, yn, br).call(this, At.from(o)));
    return new Pi(s, "_").decode(new zo(e, n));
  }
  /**
   *  Returns the shared singleton instance of a default [[AbiCoder]].
   *
   *  On the first call, the instance is created internally.
   */
  static defaultAbiCoder() {
    return Lo == null && (Lo = new to()), Lo;
  }
  /**
   *  Returns an ethers-compatible [[CallExceptionError]] Error for the given
   *  result %%data%% for the [[CallExceptionAction]] %%action%% against
   *  the Transaction %%tx%%.
   */
  static getBuiltinCallException(t, e, n) {
    return Lp(t, e, n, to.defaultAbiCoder());
  }
};
yn = new WeakSet(), br = function(t) {
  if (t.isArray())
    return new hd(O(this, yn, br).call(this, t.arrayChildren), t.arrayLength, t.name);
  if (t.isTuple())
    return new Pi(t.components.map((n) => O(this, yn, br).call(this, n)), t.name);
  switch (t.baseType) {
    case "address":
      return new ld(t.name);
    case "bool":
      return new dd(t.name);
    case "string":
      return new vd(t.name);
    case "bytes":
      return new pd(t.name);
    case "":
      return new md(t.name);
  }
  let e = t.type.match(Fp);
  if (e) {
    let n = parseInt(e[2] || "256");
    return y(n !== 0 && n <= 256 && n % 8 === 0, "invalid " + e[1] + " bit length", "param", t), new Ed(n / 8, e[1] === "int", t.name);
  }
  if (e = t.type.match(Dp), e) {
    let n = parseInt(e[1]);
    return y(n !== 0 && n <= 32, "invalid bytes length", "param", t), new gd(n, t.name);
  }
  y(!1, "invalid type", "type", t.type);
};
let Ks = to;
class Mp {
  /**
   *  @_ignore:
   */
  constructor(t, e, n) {
    /**
     *  The matching fragment for the ``topic0``.
     */
    A(this, "fragment");
    /**
     *  The name of the Event.
     */
    A(this, "name");
    /**
     *  The full Event signature.
     */
    A(this, "signature");
    /**
     *  The topic hash for the Event.
     */
    A(this, "topic");
    /**
     *  The arguments passed into the Event with ``emit``.
     */
    A(this, "args");
    const s = t.name, i = t.format();
    M(this, {
      fragment: t,
      name: s,
      signature: i,
      topic: e,
      args: n
    });
  }
}
class Gp {
  /**
   *  @_ignore:
   */
  constructor(t, e, n, s) {
    /**
     *  The matching fragment from the transaction ``data``.
     */
    A(this, "fragment");
    /**
     *  The name of the Function from the transaction ``data``.
     */
    A(this, "name");
    /**
     *  The arguments passed to the Function from the transaction ``data``.
     */
    A(this, "args");
    /**
     *  The full Function signature from the transaction ``data``.
     */
    A(this, "signature");
    /**
     *  The selector for the Function from the transaction ``data``.
     */
    A(this, "selector");
    /**
     *  The ``value`` (in wei) from the transaction.
     */
    A(this, "value");
    const i = t.name, o = t.format();
    M(this, {
      fragment: t,
      name: i,
      args: n,
      signature: o,
      selector: e,
      value: s
    });
  }
}
class Qp {
  /**
   *  @_ignore:
   */
  constructor(t, e, n) {
    /**
     *  The matching fragment.
     */
    A(this, "fragment");
    /**
     *  The name of the Error.
     */
    A(this, "name");
    /**
     *  The arguments passed to the Error with ``revert``.
     */
    A(this, "args");
    /**
     *  The full Error signature.
     */
    A(this, "signature");
    /**
     *  The selector for the Error.
     */
    A(this, "selector");
    const s = t.name, i = t.format();
    M(this, {
      fragment: t,
      name: s,
      args: n,
      signature: i,
      selector: e
    });
  }
}
class tu {
  /**
   *  @_ignore:
   */
  constructor(t) {
    /**
     *  The ``keccak256`` of the value logged.
     */
    A(this, "hash");
    /**
     *  @_ignore:
     */
    A(this, "_isIndexed");
    M(this, { hash: t, _isIndexed: !0 });
  }
  /**
   *  Returns ``true`` if %%value%% is an **Indexed**.
   *
   *  This provides a Type Guard for property access.
   */
  static isIndexed(t) {
    return !!(t && t._isIndexed);
  }
}
const eu = {
  0: "generic panic",
  1: "assert(false)",
  17: "arithmetic overflow",
  18: "division or modulo by zero",
  33: "enum overflow",
  34: "invalid encoded storage byte array accessed",
  49: "out-of-bounds array access; popping on an empty array",
  50: "out-of-bounds access of an array or bytesN",
  65: "out of memory",
  81: "uninitialized function"
}, nu = {
  "0x08c379a0": {
    signature: "Error(string)",
    name: "Error",
    inputs: ["string"],
    reason: (r) => `reverted with reason string ${JSON.stringify(r)}`
  },
  "0x4e487b71": {
    signature: "Panic(uint256)",
    name: "Panic",
    inputs: ["uint256"],
    reason: (r) => {
      let t = "unknown panic code";
      return r >= 0 && r <= 255 && eu[r.toString()] && (t = eu[r.toString()]), `reverted with panic code 0x${r.toString(16)} (${t})`;
    }
  }
};
var Pe, Ne, Ce, xt, ts, ki, es, Si;
const Cr = class Cr {
  /**
   *  Create a new Interface for the %%fragments%%.
   */
  constructor(t) {
    // Find a function definition by any means necessary (unless it is ambiguous)
    b(this, ts);
    // Find an event definition by any means necessary (unless it is ambiguous)
    b(this, es);
    /**
     *  All the Contract ABI members (i.e. methods, events, errors, etc).
     */
    A(this, "fragments");
    /**
     *  The Contract constructor.
     */
    A(this, "deploy");
    /**
     *  The Fallback method, if any.
     */
    A(this, "fallback");
    /**
     *  If receiving ether is supported.
     */
    A(this, "receive");
    b(this, Pe, void 0);
    b(this, Ne, void 0);
    b(this, Ce, void 0);
    //    #structs: Map<string, StructFragment>;
    b(this, xt, void 0);
    let e = [];
    typeof t == "string" ? e = JSON.parse(t) : e = t, d(this, Ce, /* @__PURE__ */ new Map()), d(this, Pe, /* @__PURE__ */ new Map()), d(this, Ne, /* @__PURE__ */ new Map());
    const n = [];
    for (const o of e)
      try {
        n.push(lr.from(o));
      } catch (a) {
        console.log("EE", a);
      }
    M(this, {
      fragments: Object.freeze(n)
    });
    let s = null, i = !1;
    d(this, xt, this.getAbiCoder()), this.fragments.forEach((o, a) => {
      let c;
      switch (o.type) {
        case "constructor":
          if (this.deploy) {
            console.log("duplicate definition - constructor");
            return;
          }
          M(this, { deploy: o });
          return;
        case "fallback":
          o.inputs.length === 0 ? i = !0 : (y(!s || o.payable !== s.payable, "conflicting fallback fragments", `fragments[${a}]`, o), s = o, i = s.payable);
          return;
        case "function":
          c = l(this, Ce);
          break;
        case "event":
          c = l(this, Ne);
          break;
        case "error":
          c = l(this, Pe);
          break;
        default:
          return;
      }
      const u = o.format();
      c.has(u) || c.set(u, o);
    }), this.deploy || M(this, {
      deploy: tn.from("constructor()")
    }), M(this, { fallback: s, receive: i });
  }
  /**
   *  Returns the entire Human-Readable ABI, as an array of
   *  signatures, optionally as %%minimal%% strings, which
   *  removes parameter names and unneceesary spaces.
   */
  format(t) {
    const e = t ? "minimal" : "full";
    return this.fragments.map((s) => s.format(e));
  }
  /**
   *  Return the JSON-encoded ABI. This is the format Solidiy
   *  returns.
   */
  formatJson() {
    const t = this.fragments.map((e) => e.format("json"));
    return JSON.stringify(t.map((e) => JSON.parse(e)));
  }
  /**
   *  The ABI coder that will be used to encode and decode binary
   *  data.
   */
  getAbiCoder() {
    return Ks.defaultAbiCoder();
  }
  /**
   *  Get the function name for %%key%%, which may be a function selector,
   *  function name or function signature that belongs to the ABI.
   */
  getFunctionName(t) {
    const e = O(this, ts, ki).call(this, t, null, !1);
    return y(e, "no matching function", "key", t), e.name;
  }
  /**
   *  Returns true if %%key%% (a function selector, function name or
   *  function signature) is present in the ABI.
   *
   *  In the case of a function name, the name may be ambiguous, so
   *  accessing the [[FunctionFragment]] may require refinement.
   */
  hasFunction(t) {
    return !!O(this, ts, ki).call(this, t, null, !1);
  }
  /**
   *  Get the [[FunctionFragment]] for %%key%%, which may be a function
   *  selector, function name or function signature that belongs to the ABI.
   *
   *  If %%values%% is provided, it will use the Typed API to handle
   *  ambiguous cases where multiple functions match by name.
   *
   *  If the %%key%% and %%values%% do not refine to a single function in
   *  the ABI, this will throw.
   */
  getFunction(t, e) {
    return O(this, ts, ki).call(this, t, e || null, !0);
  }
  /**
   *  Iterate over all functions, calling %%callback%%, sorted by their name.
   */
  forEachFunction(t) {
    const e = Array.from(l(this, Ce).keys());
    e.sort((n, s) => n.localeCompare(s));
    for (let n = 0; n < e.length; n++) {
      const s = e[n];
      t(l(this, Ce).get(s), n);
    }
  }
  /**
   *  Get the event name for %%key%%, which may be a topic hash,
   *  event name or event signature that belongs to the ABI.
   */
  getEventName(t) {
    const e = O(this, es, Si).call(this, t, null, !1);
    return y(e, "no matching event", "key", t), e.name;
  }
  /**
   *  Returns true if %%key%% (an event topic hash, event name or
   *  event signature) is present in the ABI.
   *
   *  In the case of an event name, the name may be ambiguous, so
   *  accessing the [[EventFragment]] may require refinement.
   */
  hasEvent(t) {
    return !!O(this, es, Si).call(this, t, null, !1);
  }
  /**
   *  Get the [[EventFragment]] for %%key%%, which may be a topic hash,
   *  event name or event signature that belongs to the ABI.
   *
   *  If %%values%% is provided, it will use the Typed API to handle
   *  ambiguous cases where multiple events match by name.
   *
   *  If the %%key%% and %%values%% do not refine to a single event in
   *  the ABI, this will throw.
   */
  getEvent(t, e) {
    return O(this, es, Si).call(this, t, e || null, !0);
  }
  /**
   *  Iterate over all events, calling %%callback%%, sorted by their name.
   */
  forEachEvent(t) {
    const e = Array.from(l(this, Ne).keys());
    e.sort((n, s) => n.localeCompare(s));
    for (let n = 0; n < e.length; n++) {
      const s = e[n];
      t(l(this, Ne).get(s), n);
    }
  }
  /**
   *  Get the [[ErrorFragment]] for %%key%%, which may be an error
   *  selector, error name or error signature that belongs to the ABI.
   *
   *  If %%values%% is provided, it will use the Typed API to handle
   *  ambiguous cases where multiple errors match by name.
   *
   *  If the %%key%% and %%values%% do not refine to a single error in
   *  the ABI, this will throw.
   */
  getError(t, e) {
    if (ot(t)) {
      const s = t.toLowerCase();
      if (nu[s])
        return Qt.from(nu[s].signature);
      for (const i of l(this, Pe).values())
        if (s === i.selector)
          return i;
      return null;
    }
    if (t.indexOf("(") === -1) {
      const s = [];
      for (const [i, o] of l(this, Pe))
        i.split(
          "("
          /* fix:) */
        )[0] === t && s.push(o);
      if (s.length === 0)
        return t === "Error" ? Qt.from("error Error(string)") : t === "Panic" ? Qt.from("error Panic(uint256)") : null;
      if (s.length > 1) {
        const i = s.map((o) => JSON.stringify(o.format())).join(", ");
        y(!1, `ambiguous error description (i.e. ${i})`, "name", t);
      }
      return s[0];
    }
    if (t = Qt.from(t).format(), t === "Error(string)")
      return Qt.from("error Error(string)");
    if (t === "Panic(uint256)")
      return Qt.from("error Panic(uint256)");
    const n = l(this, Pe).get(t);
    return n || null;
  }
  /**
   *  Iterate over all errors, calling %%callback%%, sorted by their name.
   */
  forEachError(t) {
    const e = Array.from(l(this, Pe).keys());
    e.sort((n, s) => n.localeCompare(s));
    for (let n = 0; n < e.length; n++) {
      const s = e[n];
      t(l(this, Pe).get(s), n);
    }
  }
  // Get the 4-byte selector used by Solidity to identify a function
  /*
  getSelector(fragment: ErrorFragment | FunctionFragment): string {
      if (typeof(fragment) === "string") {
          const matches: Array<Fragment> = [ ];
  
          try { matches.push(this.getFunction(fragment)); } catch (error) { }
          try { matches.push(this.getError(<string>fragment)); } catch (_) { }
  
          if (matches.length === 0) {
              logger.throwArgumentError("unknown fragment", "key", fragment);
          } else if (matches.length > 1) {
              logger.throwArgumentError("ambiguous fragment matches function and error", "key", fragment);
          }
  
          fragment = matches[0];
      }
  
      return dataSlice(id(fragment.format()), 0, 4);
  }
      */
  // Get the 32-byte topic hash used by Solidity to identify an event
  /*
  getEventTopic(fragment: EventFragment): string {
      //if (typeof(fragment) === "string") { fragment = this.getEvent(eventFragment); }
      return id(fragment.format());
  }
  */
  _decodeParams(t, e) {
    return l(this, xt).decode(t, e);
  }
  _encodeParams(t, e) {
    return l(this, xt).encode(t, e);
  }
  /**
   *  Encodes a ``tx.data`` object for deploying the Contract with
   *  the %%values%% as the constructor arguments.
   */
  encodeDeploy(t) {
    return this._encodeParams(this.deploy.inputs, t || []);
  }
  /**
   *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the
   *  specified error (see [[getError]] for valid values for
   *  %%key%%).
   *
   *  Most developers should prefer the [[parseCallResult]] method instead,
   *  which will automatically detect a ``CALL_EXCEPTION`` and throw the
   *  corresponding error.
   */
  decodeErrorResult(t, e) {
    if (typeof t == "string") {
      const n = this.getError(t);
      y(n, "unknown error", "fragment", t), t = n;
    }
    return y(at(e, 0, 4) === t.selector, `data signature does not match error ${t.name}.`, "data", e), this._decodeParams(t.inputs, at(e, 4));
  }
  /**
   *  Encodes the transaction revert data for a call result that
   *  reverted from the the Contract with the sepcified %%error%%
   *  (see [[getError]] for valid values for %%fragment%%) with the %%values%%.
   *
   *  This is generally not used by most developers, unless trying to mock
   *  a result from a Contract.
   */
  encodeErrorResult(t, e) {
    if (typeof t == "string") {
      const n = this.getError(t);
      y(n, "unknown error", "fragment", t), t = n;
    }
    return pt([
      t.selector,
      this._encodeParams(t.inputs, e || [])
    ]);
  }
  /**
   *  Decodes the %%data%% from a transaction ``tx.data`` for
   *  the function specified (see [[getFunction]] for valid values
   *  for %%fragment%%).
   *
   *  Most developers should prefer the [[parseTransaction]] method
   *  instead, which will automatically detect the fragment.
   */
  decodeFunctionData(t, e) {
    if (typeof t == "string") {
      const n = this.getFunction(t);
      y(n, "unknown function", "fragment", t), t = n;
    }
    return y(at(e, 0, 4) === t.selector, `data signature does not match function ${t.name}.`, "data", e), this._decodeParams(t.inputs, at(e, 4));
  }
  /**
   *  Encodes the ``tx.data`` for a transaction that calls the function
   *  specified (see [[getFunction]] for valid values for %%fragment%%) with
   *  the %%values%%.
   */
  encodeFunctionData(t, e) {
    if (typeof t == "string") {
      const n = this.getFunction(t);
      y(n, "unknown function", "fragment", t), t = n;
    }
    return pt([
      t.selector,
      this._encodeParams(t.inputs, e || [])
    ]);
  }
  /**
   *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the
   *  specified function (see [[getFunction]] for valid values for
   *  %%key%%).
   *
   *  Most developers should prefer the [[parseCallResult]] method instead,
   *  which will automatically detect a ``CALL_EXCEPTION`` and throw the
   *  corresponding error.
   */
  decodeFunctionResult(t, e) {
    if (typeof t == "string") {
      const i = this.getFunction(t);
      y(i, "unknown function", "fragment", t), t = i;
    }
    let n = "invalid length for result data";
    const s = Ht(e);
    if (s.length % 32 === 0)
      try {
        return l(this, xt).decode(t.outputs, s);
      } catch {
        n = "could not decode result data";
      }
    P(!1, n, "BAD_DATA", {
      value: F(s),
      info: { method: t.name, signature: t.format() }
    });
  }
  makeError(t, e) {
    const n = X(t, "data"), s = Ks.getBuiltinCallException("call", e, n), i = "execution reverted (unknown custom error)";
    if (s.message.startsWith(i)) {
      const a = F(n.slice(0, 4)), c = this.getError(a);
      if (c)
        try {
          const u = l(this, xt).decode(c.inputs, n.slice(4));
          s.revert = {
            name: c.name,
            signature: c.format(),
            args: u
          }, s.reason = s.revert.signature, s.message = `execution reverted: ${s.reason}`;
        } catch {
          s.message = "execution reverted (coult not decode custom error)";
        }
    }
    const o = this.parseTransaction(e);
    return o && (s.invocation = {
      method: o.name,
      signature: o.signature,
      args: o.args
    }), s;
  }
  /**
   *  Encodes the result data (e.g. from an ``eth_call``) for the
   *  specified function (see [[getFunction]] for valid values
   *  for %%fragment%%) with %%values%%.
   *
   *  This is generally not used by most developers, unless trying to mock
   *  a result from a Contract.
   */
  encodeFunctionResult(t, e) {
    if (typeof t == "string") {
      const n = this.getFunction(t);
      y(n, "unknown function", "fragment", t), t = n;
    }
    return F(l(this, xt).encode(t.outputs, e || []));
  }
  /*
      spelunk(inputs: Array<ParamType>, values: ReadonlyArray<any>, processfunc: (type: string, value: any) => Promise<any>): Promise<Array<any>> {
          const promises: Array<Promise<>> = [ ];
          const process = function(type: ParamType, value: any): any {
              if (type.baseType === "array") {
                  return descend(type.child
              }
              if (type. === "address") {
              }
          };
  
          const descend = function (inputs: Array<ParamType>, values: ReadonlyArray<any>) {
              if (inputs.length !== values.length) { throw new Error("length mismatch"); }
              
          };
  
          const result: Array<any> = [ ];
          values.forEach((value, index) => {
              if (value == null) {
                  topics.push(null);
              } else if (param.baseType === "array" || param.baseType === "tuple") {
                  logger.throwArgumentError("filtering with tuples or arrays not supported", ("contract." + param.name), value);
              } else if (Array.isArray(value)) {
                  topics.push(value.map((value) => encodeTopic(param, value)));
              } else {
                  topics.push(encodeTopic(param, value));
              }
          });
      }
  */
  // Create the filter for the event with search criteria (e.g. for eth_filterLog)
  encodeFilterTopics(t, e) {
    if (typeof t == "string") {
      const i = this.getEvent(t);
      y(i, "unknown event", "eventFragment", t), t = i;
    }
    P(e.length <= t.inputs.length, `too many arguments for ${t.format()}`, "UNEXPECTED_ARGUMENT", { count: e.length, expectedCount: t.inputs.length });
    const n = [];
    t.anonymous || n.push(t.topicHash);
    const s = (i, o) => i.type === "string" ? cr(o) : i.type === "bytes" ? it(F(o)) : (i.type === "bool" && typeof o == "boolean" ? o = o ? "0x01" : "0x00" : i.type.match(/^u?int/) ? o = Bn(o) : i.type.match(/^bytes/) ? o = Bf(o, 32) : i.type === "address" && l(this, xt).encode(["address"], [o]), ar(F(o), 32));
    for (e.forEach((i, o) => {
      const a = t.inputs[o];
      if (!a.indexed) {
        y(i == null, "cannot filter non-indexed parameters; must be null", "contract." + a.name, i);
        return;
      }
      i == null ? n.push(null) : a.baseType === "array" || a.baseType === "tuple" ? y(!1, "filtering with tuples or arrays not supported", "contract." + a.name, i) : Array.isArray(i) ? n.push(i.map((c) => s(a, c))) : n.push(s(a, i));
    }); n.length && n[n.length - 1] === null; )
      n.pop();
    return n;
  }
  encodeEventLog(t, e) {
    if (typeof t == "string") {
      const o = this.getEvent(t);
      y(o, "unknown event", "eventFragment", t), t = o;
    }
    const n = [], s = [], i = [];
    return t.anonymous || n.push(t.topicHash), y(e.length === t.inputs.length, "event arguments/values mismatch", "values", e), t.inputs.forEach((o, a) => {
      const c = e[a];
      if (o.indexed)
        if (o.type === "string")
          n.push(cr(c));
        else if (o.type === "bytes")
          n.push(it(c));
        else {
          if (o.baseType === "tuple" || o.baseType === "array")
            throw new Error("not implemented");
          n.push(l(this, xt).encode([o.type], [c]));
        }
      else
        s.push(o), i.push(c);
    }), {
      data: l(this, xt).encode(s, i),
      topics: n
    };
  }
  // Decode a filter for the event and the search criteria
  decodeEventLog(t, e, n) {
    if (typeof t == "string") {
      const w = this.getEvent(t);
      y(w, "unknown event", "eventFragment", t), t = w;
    }
    if (n != null && !t.anonymous) {
      const w = t.topicHash;
      y(ot(n[0], 32) && n[0].toLowerCase() === w, "fragment/topic mismatch", "topics[0]", n[0]), n = n.slice(1);
    }
    const s = [], i = [], o = [];
    t.inputs.forEach((w, E) => {
      w.indexed ? w.type === "string" || w.type === "bytes" || w.baseType === "tuple" || w.baseType === "array" ? (s.push(At.from({ type: "bytes32", name: w.name })), o.push(!0)) : (s.push(w), o.push(!1)) : (i.push(w), o.push(!1));
    });
    const a = n != null ? l(this, xt).decode(s, pt(n)) : null, c = l(this, xt).decode(i, e, !0), u = [], f = [];
    let h = 0, g = 0;
    return t.inputs.forEach((w, E) => {
      let m = null;
      if (w.indexed)
        if (a == null)
          m = new tu(null);
        else if (o[E])
          m = new tu(a[g++]);
        else
          try {
            m = a[g++];
          } catch (x) {
            m = x;
          }
      else
        try {
          m = c[h++];
        } catch (x) {
          m = x;
        }
      u.push(m), f.push(w.name || null);
    }), Mi.fromItems(u, f);
  }
  /**
   *  Parses a transaction, finding the matching function and extracts
   *  the parameter values along with other useful function details.
   *
   *  If the matching function cannot be found, return null.
   */
  parseTransaction(t) {
    const e = X(t.data, "tx.data"), n = L(t.value != null ? t.value : 0, "tx.value"), s = this.getFunction(F(e.slice(0, 4)));
    if (!s)
      return null;
    const i = l(this, xt).decode(s.inputs, e.slice(4));
    return new Gp(s, s.selector, i, n);
  }
  parseCallResult(t) {
    throw new Error("@TODO");
  }
  /**
   *  Parses a receipt log, finding the matching event and extracts
   *  the parameter values along with other useful event details.
   *
   *  If the matching event cannot be found, returns null.
   */
  parseLog(t) {
    const e = this.getEvent(t.topics[0]);
    return !e || e.anonymous ? null : new Mp(e, e.topicHash, this.decodeEventLog(e, t.data, t.topics));
  }
  /**
   *  Parses a revert data, finding the matching error and extracts
   *  the parameter values along with other useful error details.
   *
   *  If the matching error cannot be found, returns null.
   */
  parseError(t) {
    const e = F(t), n = this.getError(at(e, 0, 4));
    if (!n)
      return null;
    const s = l(this, xt).decode(n.inputs, at(e, 4));
    return new Qp(n, n.selector, s);
  }
  /**
   *  Creates a new [[Interface]] from the ABI %%value%%.
   *
   *  The %%value%% may be provided as an existing [[Interface]] object,
   *  a JSON-encoded ABI or any Human-Readable ABI format.
   */
  static from(t) {
    return t instanceof Cr ? t : typeof t == "string" ? new Cr(JSON.parse(t)) : typeof t.format == "function" ? new Cr(t.format("json")) : new Cr(t);
  }
};
Pe = new WeakMap(), Ne = new WeakMap(), Ce = new WeakMap(), xt = new WeakMap(), ts = new WeakSet(), ki = function(t, e, n) {
  if (ot(t)) {
    const i = t.toLowerCase();
    for (const o of l(this, Ce).values())
      if (i === o.selector)
        return o;
    return null;
  }
  if (t.indexOf("(") === -1) {
    const i = [];
    for (const [o, a] of l(this, Ce))
      o.split(
        "("
        /* fix:) */
      )[0] === t && i.push(a);
    if (e) {
      const o = e.length > 0 ? e[e.length - 1] : null;
      let a = e.length, c = !0;
      Tt.isTyped(o) && o.type === "overrides" && (c = !1, a--);
      for (let u = i.length - 1; u >= 0; u--) {
        const f = i[u].inputs.length;
        f !== a && (!c || f !== a - 1) && i.splice(u, 1);
      }
      for (let u = i.length - 1; u >= 0; u--) {
        const f = i[u].inputs;
        for (let h = 0; h < e.length; h++)
          if (Tt.isTyped(e[h])) {
            if (h >= f.length) {
              if (e[h].type === "overrides")
                continue;
              i.splice(u, 1);
              break;
            }
            if (e[h].type !== f[h].baseType) {
              i.splice(u, 1);
              break;
            }
          }
      }
    }
    if (i.length === 1 && e && e.length !== i[0].inputs.length) {
      const o = e[e.length - 1];
      (o == null || Array.isArray(o) || typeof o != "object") && i.splice(0, 1);
    }
    if (i.length === 0)
      return null;
    if (i.length > 1 && n) {
      const o = i.map((a) => JSON.stringify(a.format())).join(", ");
      y(!1, `ambiguous function description (i.e. matches ${o})`, "key", t);
    }
    return i[0];
  }
  const s = l(this, Ce).get(Re.from(t).format());
  return s || null;
}, es = new WeakSet(), Si = function(t, e, n) {
  if (ot(t)) {
    const i = t.toLowerCase();
    for (const o of l(this, Ne).values())
      if (i === o.topicHash)
        return o;
    return null;
  }
  if (t.indexOf("(") === -1) {
    const i = [];
    for (const [o, a] of l(this, Ne))
      o.split(
        "("
        /* fix:) */
      )[0] === t && i.push(a);
    if (e) {
      for (let o = i.length - 1; o >= 0; o--)
        i[o].inputs.length < e.length && i.splice(o, 1);
      for (let o = i.length - 1; o >= 0; o--) {
        const a = i[o].inputs;
        for (let c = 0; c < e.length; c++)
          if (Tt.isTyped(e[c]) && e[c].type !== a[c].baseType) {
            i.splice(o, 1);
            break;
          }
      }
    }
    if (i.length === 0)
      return null;
    if (i.length > 1 && n) {
      const o = i.map((a) => JSON.stringify(a.format())).join(", ");
      y(!1, `ambiguous event description (i.e. matches ${o})`, "key", t);
    }
    return i[0];
  }
  const s = l(this, Ne).get(Be.from(t).format());
  return s || null;
};
let ia = Cr;
const Ll = BigInt(0);
function Fs(r) {
  return r ?? null;
}
function Ct(r) {
  return r == null ? null : r.toString();
}
class ru {
  /**
   *  Creates a new FeeData for %%gasPrice%%, %%maxFeePerGas%% and
   *  %%maxPriorityFeePerGas%%.
   */
  constructor(t, e, n) {
    /**
     *  The gas price for legacy networks.
     */
    A(this, "gasPrice");
    /**
     *  The maximum fee to pay per gas.
     *
     *  The base fee per gas is defined by the network and based on
     *  congestion, increasing the cost during times of heavy load
     *  and lowering when less busy.
     *
     *  The actual fee per gas will be the base fee for the block
     *  and the priority fee, up to the max fee per gas.
     *
     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))
     */
    A(this, "maxFeePerGas");
    /**
     *  The additional amout to pay per gas to encourage a validator
     *  to include the transaction.
     *
     *  The purpose of this is to compensate the validator for the
     *  adjusted risk for including a given transaction.
     *
     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))
     */
    A(this, "maxPriorityFeePerGas");
    M(this, {
      gasPrice: Fs(t),
      maxFeePerGas: Fs(e),
      maxPriorityFeePerGas: Fs(n)
    });
  }
  /**
   *  Returns a JSON-friendly value.
   */
  toJSON() {
    const { gasPrice: t, maxFeePerGas: e, maxPriorityFeePerGas: n } = this;
    return {
      _type: "FeeData",
      gasPrice: Ct(t),
      maxFeePerGas: Ct(e),
      maxPriorityFeePerGas: Ct(n)
    };
  }
}
function zi(r) {
  const t = {};
  r.to && (t.to = r.to), r.from && (t.from = r.from), r.data && (t.data = F(r.data));
  const e = "chainId,gasLimit,gasPrice,maxFeePerGas,maxPriorityFeePerGas,value".split(/,/);
  for (const s of e)
    !(s in r) || r[s] == null || (t[s] = L(r[s], `request.${s}`));
  const n = "type,nonce".split(/,/);
  for (const s of n)
    !(s in r) || r[s] == null || (t[s] = V(r[s], `request.${s}`));
  return r.accessList && (t.accessList = hr(r.accessList)), "blockTag" in r && (t.blockTag = r.blockTag), "enableCcipRead" in r && (t.enableCcipRead = !!r.enableCcipRead), "customData" in r && (t.customData = r.customData), t;
}
var Ke;
class Hp {
  /**
   *  Create a new **Block** object.
   *
   *  This should generally not be necessary as the unless implementing a
   *  low-level library.
   */
  constructor(t, e) {
    /**
     *  The provider connected to the block used to fetch additional details
     *  if necessary.
     */
    A(this, "provider");
    /**
     *  The block number, sometimes called the block height. This is a
     *  sequential number that is one higher than the parent block.
     */
    A(this, "number");
    /**
     *  The block hash.
     *
     *  This hash includes all properties, so can be safely used to identify
     *  an exact set of block properties.
     */
    A(this, "hash");
    /**
     *  The timestamp for this block, which is the number of seconds since
     *  epoch that this block was included.
     */
    A(this, "timestamp");
    /**
     *  The block hash of the parent block.
     */
    A(this, "parentHash");
    /**
     *  The nonce.
     *
     *  On legacy networks, this is the random number inserted which
     *  permitted the difficulty target to be reached.
     */
    A(this, "nonce");
    /**
     *  The difficulty target.
     *
     *  On legacy networks, this is the proof-of-work target required
     *  for a block to meet the protocol rules to be included.
     *
     *  On modern networks, this is a random number arrived at using
     *  randao.  @TODO: Find links?
     */
    A(this, "difficulty");
    /**
     *  The total gas limit for this block.
     */
    A(this, "gasLimit");
    /**
     *  The total gas used in this block.
     */
    A(this, "gasUsed");
    /**
     *  The miner coinbase address, wihch receives any subsidies for
     *  including this block.
     */
    A(this, "miner");
    /**
     *  Any extra data the validator wished to include.
     */
    A(this, "extraData");
    /**
     *  The base fee per gas that all transactions in this block were
     *  charged.
     *
     *  This adjusts after each block, depending on how congested the network
     *  is.
     */
    A(this, "baseFeePerGas");
    b(this, Ke, void 0);
    d(this, Ke, t.transactions.map((n) => typeof n != "string" ? new Ws(n, e) : n)), M(this, {
      provider: e,
      hash: Fs(t.hash),
      number: t.number,
      timestamp: t.timestamp,
      parentHash: t.parentHash,
      nonce: t.nonce,
      difficulty: t.difficulty,
      gasLimit: t.gasLimit,
      gasUsed: t.gasUsed,
      miner: t.miner,
      extraData: t.extraData,
      baseFeePerGas: Fs(t.baseFeePerGas)
    });
  }
  /**
   *  Returns the list of transaction hashes, in the order
   *  they were executed within the block.
   */
  get transactions() {
    return l(this, Ke).map((t) => typeof t == "string" ? t : t.hash);
  }
  /**
   *  Returns the complete transactions, in the order they
   *  were executed within the block.
   *
   *  This is only available for blocks which prefetched
   *  transactions, by passing ``true`` to %%prefetchTxs%%
   *  into [[Provider-getBlock]].
   */
  get prefetchedTransactions() {
    const t = l(this, Ke).slice();
    return t.length === 0 ? [] : (P(typeof t[0] == "object", "transactions were not prefetched with block request", "UNSUPPORTED_OPERATION", {
      operation: "transactionResponses()"
    }), t);
  }
  /**
   *  Returns a JSON-friendly value.
   */
  toJSON() {
    const { baseFeePerGas: t, difficulty: e, extraData: n, gasLimit: s, gasUsed: i, hash: o, miner: a, nonce: c, number: u, parentHash: f, timestamp: h, transactions: g } = this;
    return {
      _type: "Block",
      baseFeePerGas: Ct(t),
      difficulty: Ct(e),
      extraData: n,
      gasLimit: Ct(s),
      gasUsed: Ct(i),
      hash: o,
      miner: a,
      nonce: c,
      number: u,
      parentHash: f,
      timestamp: h,
      transactions: g
    };
  }
  [Symbol.iterator]() {
    let t = 0;
    const e = this.transactions;
    return {
      next: () => t < this.length ? {
        value: e[t++],
        done: !1
      } : { value: void 0, done: !0 }
    };
  }
  /**
   *  The number of transactions in this block.
   */
  get length() {
    return l(this, Ke).length;
  }
  /**
   *  The [[link-js-date]] this block was included at.
   */
  get date() {
    return this.timestamp == null ? null : new Date(this.timestamp * 1e3);
  }
  /**
   *  Get the transaction at %%indexe%% within this block.
   */
  async getTransaction(t) {
    let e;
    if (typeof t == "number")
      e = l(this, Ke)[t];
    else {
      const n = t.toLowerCase();
      for (const s of l(this, Ke))
        if (typeof s == "string") {
          if (s !== n)
            continue;
          e = s;
          break;
        } else {
          if (s.hash === n)
            continue;
          e = s;
          break;
        }
    }
    if (e == null)
      throw new Error("no such tx");
    return typeof e == "string" ? await this.provider.getTransaction(e) : e;
  }
  /**
   *  If a **Block** was fetched with a request to include the transactions
   *  this will allow synchronous access to those transactions.
   *
   *  If the transactions were not prefetched, this will throw.
   */
  getPrefetchedTransaction(t) {
    const e = this.prefetchedTransactions;
    if (typeof t == "number")
      return e[t];
    t = t.toLowerCase();
    for (const n of e)
      if (n.hash === t)
        return n;
    y(!1, "no matching transaction", "indexOrHash", t);
  }
  /**
   *  Returns true if this block been mined. This provides a type guard
   *  for all properties on a [[MinedBlock]].
   */
  isMined() {
    return !!this.hash;
  }
  /**
   *  Returns true if this block is an [[link-eip-2930]] block.
   */
  isLondon() {
    return !!this.baseFeePerGas;
  }
  /**
   *  @_ignore:
   */
  orphanedEvent() {
    if (!this.isMined())
      throw new Error("");
    return _p(this);
  }
}
Ke = new WeakMap();
class pi {
  /**
   *  @_ignore:
   */
  constructor(t, e) {
    /**
     *  The provider connected to the log used to fetch additional details
     *  if necessary.
     */
    A(this, "provider");
    /**
     *  The transaction hash of the transaction this log occurred in. Use the
     *  [[Log-getTransaction]] to get the [[TransactionResponse]].
     */
    A(this, "transactionHash");
    /**
     *  The block hash of the block this log occurred in. Use the
     *  [[Log-getBlock]] to get the [[Block]].
     */
    A(this, "blockHash");
    /**
     *  The block number of the block this log occurred in. It is preferred
     *  to use the [[Block-hash]] when fetching the related [[Block]],
     *  since in the case of an orphaned block, the block at that height may
     *  have changed.
     */
    A(this, "blockNumber");
    /**
     *  If the **Log** represents a block that was removed due to an orphaned
     *  block, this will be true.
     *
     *  This can only happen within an orphan event listener.
     */
    A(this, "removed");
    /**
     *  The address of the contract that emitted this log.
     */
    A(this, "address");
    /**
     *  The data included in this log when it was emitted.
     */
    A(this, "data");
    /**
     *  The indexed topics included in this log when it was emitted.
     *
     *  All topics are included in the bloom filters, so they can be
     *  efficiently filtered using the [[Provider-getLogs]] method.
     */
    A(this, "topics");
    /**
     *  The index within the block this log occurred at. This is generally
     *  not useful to developers, but can be used with the various roots
     *  to proof inclusion within a block.
     */
    A(this, "index");
    /**
     *  The index within the transaction of this log.
     */
    A(this, "transactionIndex");
    this.provider = e;
    const n = Object.freeze(t.topics.slice());
    M(this, {
      transactionHash: t.transactionHash,
      blockHash: t.blockHash,
      blockNumber: t.blockNumber,
      removed: t.removed,
      address: t.address,
      data: t.data,
      topics: n,
      index: t.index,
      transactionIndex: t.transactionIndex
    });
  }
  /**
   *  Returns a JSON-compatible object.
   */
  toJSON() {
    const { address: t, blockHash: e, blockNumber: n, data: s, index: i, removed: o, topics: a, transactionHash: c, transactionIndex: u } = this;
    return {
      _type: "log",
      address: t,
      blockHash: e,
      blockNumber: n,
      data: s,
      index: i,
      removed: o,
      topics: a,
      transactionHash: c,
      transactionIndex: u
    };
  }
  /**
   *  Returns the block that this log occurred in.
   */
  async getBlock() {
    const t = await this.provider.getBlock(this.blockHash);
    return P(!!t, "failed to find transaction", "UNKNOWN_ERROR", {}), t;
  }
  /**
   *  Returns the transaction that this log occurred in.
   */
  async getTransaction() {
    const t = await this.provider.getTransaction(this.transactionHash);
    return P(!!t, "failed to find transaction", "UNKNOWN_ERROR", {}), t;
  }
  /**
   *  Returns the transaction receipt fot the transaction that this
   *  log occurred in.
   */
  async getTransactionReceipt() {
    const t = await this.provider.getTransactionReceipt(this.transactionHash);
    return P(!!t, "failed to find transaction receipt", "UNKNOWN_ERROR", {}), t;
  }
  /**
   *  @_ignore:
   */
  removedEvent() {
    return Vp(this);
  }
}
var ei;
class Ml {
  /**
   *  @_ignore:
   */
  constructor(t, e) {
    /**
     *  The provider connected to the log used to fetch additional details
     *  if necessary.
     */
    A(this, "provider");
    /**
     *  The address the transaction was sent to.
     */
    A(this, "to");
    /**
     *  The sender of the transaction.
     */
    A(this, "from");
    /**
     *  The address of the contract if the transaction was directly
     *  responsible for deploying one.
     *
     *  This is non-null **only** if the ``to`` is empty and the ``data``
     *  was successfully executed as initcode.
     */
    A(this, "contractAddress");
    /**
     *  The transaction hash.
     */
    A(this, "hash");
    /**
     *  The index of this transaction within the block transactions.
     */
    A(this, "index");
    /**
     *  The block hash of the [[Block]] this transaction was included in.
     */
    A(this, "blockHash");
    /**
     *  The block number of the [[Block]] this transaction was included in.
     */
    A(this, "blockNumber");
    /**
     *  The bloom filter bytes that represent all logs that occurred within
     *  this transaction. This is generally not useful for most developers,
     *  but can be used to validate the included logs.
     */
    A(this, "logsBloom");
    /**
     *  The actual amount of gas used by this transaction.
     *
     *  When creating a transaction, the amount of gas that will be used can
     *  only be approximated, but the sender must pay the gas fee for the
     *  entire gas limit. After the transaction, the difference is refunded.
     */
    A(this, "gasUsed");
    /**
     *  The amount of gas used by all transactions within the block for this
     *  and all transactions with a lower ``index``.
     *
     *  This is generally not useful for developers but can be used to
     *  validate certain aspects of execution.
     */
    A(this, "cumulativeGasUsed");
    /**
     *  The actual gas price used during execution.
     *
     *  Due to the complexity of [[link-eip-1559]] this value can only
     *  be caluclated after the transaction has been mined, snce the base
     *  fee is protocol-enforced.
     */
    A(this, "gasPrice");
    /**
     *  The [[link-eip-2718]] transaction type.
     */
    A(this, "type");
    //readonly byzantium!: boolean;
    /**
     *  The status of this transaction, indicating success (i.e. ``1``) or
     *  a revert (i.e. ``0``).
     *
     *  This is available in post-byzantium blocks, but some backends may
     *  backfill this value.
     */
    A(this, "status");
    /**
     *  The root hash of this transaction.
     *
     *  This is no present and was only included in pre-byzantium blocks, but
     *  could be used to validate certain parts of the receipt.
     */
    A(this, "root");
    b(this, ei, void 0);
    d(this, ei, Object.freeze(t.logs.map((s) => new pi(s, e))));
    let n = Ll;
    t.effectiveGasPrice != null ? n = t.effectiveGasPrice : t.gasPrice != null && (n = t.gasPrice), M(this, {
      provider: e,
      to: t.to,
      from: t.from,
      contractAddress: t.contractAddress,
      hash: t.hash,
      index: t.index,
      blockHash: t.blockHash,
      blockNumber: t.blockNumber,
      logsBloom: t.logsBloom,
      gasUsed: t.gasUsed,
      cumulativeGasUsed: t.cumulativeGasUsed,
      gasPrice: n,
      type: t.type,
      //byzantium: tx.byzantium,
      status: t.status,
      root: t.root
    });
  }
  /**
   *  The logs for this transaction.
   */
  get logs() {
    return l(this, ei);
  }
  /**
   *  Returns a JSON-compatible representation.
   */
  toJSON() {
    const {
      to: t,
      from: e,
      contractAddress: n,
      hash: s,
      index: i,
      blockHash: o,
      blockNumber: a,
      logsBloom: c,
      logs: u,
      //byzantium, 
      status: f,
      root: h
    } = this;
    return {
      _type: "TransactionReceipt",
      blockHash: o,
      blockNumber: a,
      //byzantium, 
      contractAddress: n,
      cumulativeGasUsed: Ct(this.cumulativeGasUsed),
      from: e,
      gasPrice: Ct(this.gasPrice),
      gasUsed: Ct(this.gasUsed),
      hash: s,
      index: i,
      logs: u,
      logsBloom: c,
      root: h,
      status: f,
      to: t
    };
  }
  /**
   *  @_ignore:
   */
  get length() {
    return this.logs.length;
  }
  [Symbol.iterator]() {
    let t = 0;
    return {
      next: () => t < this.length ? { value: this.logs[t++], done: !1 } : { value: void 0, done: !0 }
    };
  }
  /**
   *  The total fee for this transaction, in wei.
   */
  get fee() {
    return this.gasUsed * this.gasPrice;
  }
  /**
   *  Resolves to the block this transaction occurred in.
   */
  async getBlock() {
    const t = await this.provider.getBlock(this.blockHash);
    if (t == null)
      throw new Error("TODO");
    return t;
  }
  /**
   *  Resolves to the transaction this transaction occurred in.
   */
  async getTransaction() {
    const t = await this.provider.getTransaction(this.hash);
    if (t == null)
      throw new Error("TODO");
    return t;
  }
  /**
   *  Resolves to the return value of the execution of this transaction.
   *
   *  Support for this feature is limited, as it requires an archive node
   *  with the ``debug_`` or ``trace_`` API enabled.
   */
  async getResult() {
    return await this.provider.getTransactionResult(this.hash);
  }
  /**
   *  Resolves to the number of confirmations this transaction has.
   */
  async confirmations() {
    return await this.provider.getBlockNumber() - this.blockNumber + 1;
  }
  /**
   *  @_ignore:
   */
  removedEvent() {
    return Ql(this);
  }
  /**
   *  @_ignore:
   */
  reorderedEvent(t) {
    return P(!t || t.isMined(), "unmined 'other' transction cannot be orphaned", "UNSUPPORTED_OPERATION", { operation: "reorderedEvent(other)" }), Gl(this, t);
  }
}
ei = new WeakMap();
var mn;
const Ja = class Ja {
  /**
   *  @_ignore:
   */
  constructor(t, e) {
    /**
     *  The provider this is connected to, which will influence how its
     *  methods will resolve its async inspection methods.
     */
    A(this, "provider");
    /**
     *  The block number of the block that this transaction was included in.
     *
     *  This is ``null`` for pending transactions.
     */
    A(this, "blockNumber");
    /**
     *  The blockHash of the block that this transaction was included in.
     *
     *  This is ``null`` for pending transactions.
     */
    A(this, "blockHash");
    /**
     *  The index within the block that this transaction resides at.
     */
    A(this, "index");
    /**
     *  The transaction hash.
     */
    A(this, "hash");
    /**
     *  The [[link-eip-2718]] transaction envelope type. This is
     *  ``0`` for legacy transactions types.
     */
    A(this, "type");
    /**
     *  The receiver of this transaction.
     *
     *  If ``null``, then the transaction is an initcode transaction.
     *  This means the result of executing the [[data]] will be deployed
     *  as a new contract on chain (assuming it does not revert) and the
     *  address may be computed using [[getCreateAddress]].
     */
    A(this, "to");
    /**
     *  The sender of this transaction. It is implicitly computed
     *  from the transaction pre-image hash (as the digest) and the
     *  [[signature]] using ecrecover.
     */
    A(this, "from");
    /**
     *  The nonce, which is used to prevent replay attacks and offer
     *  a method to ensure transactions from a given sender are explicitly
     *  ordered.
     *
     *  When sending a transaction, this must be equal to the number of
     *  transactions ever sent by [[from]].
     */
    A(this, "nonce");
    /**
     *  The maximum units of gas this transaction can consume. If execution
     *  exceeds this, the entries transaction is reverted and the sender
     *  is charged for the full amount, despite not state changes being made.
     */
    A(this, "gasLimit");
    /**
     *  The gas price can have various values, depending on the network.
     *
     *  In modern networks, for transactions that are included this is
     *  the //effective gas price// (the fee per gas that was actually
     *  charged), while for transactions that have not been included yet
     *  is the [[maxFeePerGas]].
     *
     *  For legacy transactions, or transactions on legacy networks, this
     *  is the fee that will be charged per unit of gas the transaction
     *  consumes.
     */
    A(this, "gasPrice");
    /**
     *  The maximum priority fee (per unit of gas) to allow a
     *  validator to charge the sender. This is inclusive of the
     *  [[maxFeeFeePerGas]].
     */
    A(this, "maxPriorityFeePerGas");
    /**
     *  The maximum fee (per unit of gas) to allow this transaction
     *  to charge the sender.
     */
    A(this, "maxFeePerGas");
    /**
     *  The data.
     */
    A(this, "data");
    /**
     *  The value, in wei. Use [[formatEther]] to format this value
     *  as ether.
     */
    A(this, "value");
    /**
     *  The chain ID.
     */
    A(this, "chainId");
    /**
     *  The signature.
     */
    A(this, "signature");
    /**
     *  The [[link-eip-2930]] access list for transaction types that
     *  support it, otherwise ``null``.
     */
    A(this, "accessList");
    b(this, mn, void 0);
    this.provider = e, this.blockNumber = t.blockNumber != null ? t.blockNumber : null, this.blockHash = t.blockHash != null ? t.blockHash : null, this.hash = t.hash, this.index = t.index, this.type = t.type, this.from = t.from, this.to = t.to || null, this.gasLimit = t.gasLimit, this.nonce = t.nonce, this.data = t.data, this.value = t.value, this.gasPrice = t.gasPrice, this.maxPriorityFeePerGas = t.maxPriorityFeePerGas != null ? t.maxPriorityFeePerGas : null, this.maxFeePerGas = t.maxFeePerGas != null ? t.maxFeePerGas : null, this.chainId = t.chainId, this.signature = t.signature, this.accessList = t.accessList != null ? t.accessList : null, d(this, mn, -1);
  }
  /**
   *  Returns a JSON-compatible representation of this transaction.
   */
  toJSON() {
    const { blockNumber: t, blockHash: e, index: n, hash: s, type: i, to: o, from: a, nonce: c, data: u, signature: f, accessList: h } = this;
    return {
      _type: "TransactionReceipt",
      accessList: h,
      blockNumber: t,
      blockHash: e,
      chainId: Ct(this.chainId),
      data: u,
      from: a,
      gasLimit: Ct(this.gasLimit),
      gasPrice: Ct(this.gasPrice),
      hash: s,
      maxFeePerGas: Ct(this.maxFeePerGas),
      maxPriorityFeePerGas: Ct(this.maxPriorityFeePerGas),
      nonce: c,
      signature: f,
      to: o,
      index: n,
      type: i,
      value: Ct(this.value)
    };
  }
  /**
   *  Resolves to the Block that this transaction was included in.
   *
   *  This will return null if the transaction has not been included yet.
   */
  async getBlock() {
    let t = this.blockNumber;
    if (t == null) {
      const n = await this.getTransaction();
      n && (t = n.blockNumber);
    }
    if (t == null)
      return null;
    const e = this.provider.getBlock(t);
    if (e == null)
      throw new Error("TODO");
    return e;
  }
  /**
   *  Resolves to this transaction being re-requested from the
   *  provider. This can be used if you have an unmined transaction
   *  and wish to get an up-to-date populated instance.
   */
  async getTransaction() {
    return this.provider.getTransaction(this.hash);
  }
  /**
   *  Resolve to the number of confirmations this transaction has.
   */
  async confirmations() {
    if (this.blockNumber == null) {
      const { tx: e, blockNumber: n } = await Rt({
        tx: this.getTransaction(),
        blockNumber: this.provider.getBlockNumber()
      });
      return e == null || e.blockNumber == null ? 0 : n - e.blockNumber + 1;
    }
    return await this.provider.getBlockNumber() - this.blockNumber + 1;
  }
  /**
   *  Resolves once this transaction has been mined and has
   *  %%confirms%% blocks including it (default: ``1``) with an
   *  optional %%timeout%%.
   *
   *  This can resolve to ``null`` only if %%confirms%% is ``0``
   *  and the transaction has not been mined, otherwise this will
   *  wait until enough confirmations have completed.
   */
  async wait(t, e) {
    const n = t ?? 1, s = e ?? 0;
    let i = l(this, mn), o = -1, a = i === -1;
    const c = async () => {
      if (a)
        return null;
      const { blockNumber: g, nonce: w } = await Rt({
        blockNumber: this.provider.getBlockNumber(),
        nonce: this.provider.getTransactionCount(this.from)
      });
      if (w < this.nonce) {
        i = g;
        return;
      }
      if (a)
        return null;
      const E = await this.getTransaction();
      if (!(E && E.blockNumber != null))
        for (o === -1 && (o = i - 3, o < l(this, mn) && (o = l(this, mn))); o <= g; ) {
          if (a)
            return null;
          const m = await this.provider.getBlock(o, !0);
          if (m == null)
            return;
          for (const x of m)
            if (x === this.hash)
              return;
          for (let x = 0; x < m.length; x++) {
            const v = await m.getTransaction(x);
            if (v.from === this.from && v.nonce === this.nonce) {
              if (a)
                return null;
              const B = await this.provider.getTransactionReceipt(v.hash);
              if (B == null || g - B.blockNumber + 1 < n)
                return;
              let T = "replaced";
              v.data === this.data && v.to === this.to && v.value === this.value ? T = "repriced" : v.data === "0x" && v.from === v.to && v.value === Ll && (T = "cancelled"), P(!1, "transaction was replaced", "TRANSACTION_REPLACED", {
                cancelled: T === "replaced" || T === "cancelled",
                reason: T,
                replacement: v.replaceableTransaction(i),
                hash: v.hash,
                receipt: B
              });
            }
          }
          o++;
        }
    }, u = (g) => {
      if (g == null || g.status !== 0)
        return g;
      P(!1, "transaction execution reverted", "CALL_EXCEPTION", {
        action: "sendTransaction",
        data: null,
        reason: null,
        invocation: null,
        revert: null,
        transaction: {
          to: g.to,
          from: g.from,
          data: ""
          // @TODO: in v7, split out sendTransaction properties
        },
        receipt: g
      });
    }, f = await this.provider.getTransactionReceipt(this.hash);
    if (n === 0)
      return u(f);
    if (f) {
      if (await f.confirmations() >= n)
        return u(f);
    } else if (await c(), n === 0)
      return null;
    return await new Promise((g, w) => {
      const E = [], m = () => {
        E.forEach((v) => v());
      };
      if (E.push(() => {
        a = !0;
      }), s > 0) {
        const v = setTimeout(() => {
          m(), w(dt("wait for transaction timeout", "TIMEOUT"));
        }, s);
        E.push(() => {
          clearTimeout(v);
        });
      }
      const x = async (v) => {
        if (await v.confirmations() >= n) {
          m();
          try {
            g(u(v));
          } catch (B) {
            w(B);
          }
        }
      };
      if (E.push(() => {
        this.provider.off(this.hash, x);
      }), this.provider.on(this.hash, x), i >= 0) {
        const v = async () => {
          try {
            await c();
          } catch (B) {
            if (oe(B, "TRANSACTION_REPLACED")) {
              m(), w(B);
              return;
            }
          }
          a || this.provider.once("block", v);
        };
        E.push(() => {
          this.provider.off("block", v);
        }), this.provider.once("block", v);
      }
    });
  }
  /**
   *  Returns ``true`` if this transaction has been included.
   *
   *  This is effective only as of the time the TransactionResponse
   *  was instantiated. To get up-to-date information, use
   *  [[getTransaction]].
   *
   *  This provides a Type Guard that this transaction will have
   *  non-null property values for properties that are null for
   *  unmined transactions.
   */
  isMined() {
    return this.blockHash != null;
  }
  /**
   *  Returns true if the transaction is a legacy (i.e. ``type == 0``)
   *  transaction.
   *
   *  This provides a Type Guard that this transaction will have
   *  the ``null``-ness for hardfork-specific properties set correctly.
   */
  isLegacy() {
    return this.type === 0;
  }
  /**
   *  Returns true if the transaction is a Berlin (i.e. ``type == 1``)
   *  transaction. See [[link-eip-2070]].
   *
   *  This provides a Type Guard that this transaction will have
   *  the ``null``-ness for hardfork-specific properties set correctly.
   */
  isBerlin() {
    return this.type === 1;
  }
  /**
   *  Returns true if the transaction is a London (i.e. ``type == 2``)
   *  transaction. See [[link-eip-1559]].
   *
   *  This provides a Type Guard that this transaction will have
   *  the ``null``-ness for hardfork-specific properties set correctly.
   */
  isLondon() {
    return this.type === 2;
  }
  /**
   *  Returns a filter which can be used to listen for orphan events
   *  that evict this transaction.
   */
  removedEvent() {
    return P(this.isMined(), "unmined transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" }), Ql(this);
  }
  /**
   *  Returns a filter which can be used to listen for orphan events
   *  that re-order this event against %%other%%.
   */
  reorderedEvent(t) {
    return P(this.isMined(), "unmined transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" }), P(!t || t.isMined(), "unmined 'other' transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" }), Gl(this, t);
  }
  /**
   *  Returns a new TransactionResponse instance which has the ability to
   *  detect (and throw an error) if the transaction is replaced, which
   *  will begin scanning at %%startBlock%%.
   *
   *  This should generally not be used by developers and is intended
   *  primarily for internal use. Setting an incorrect %%startBlock%% can
   *  have devastating performance consequences if used incorrectly.
   */
  replaceableTransaction(t) {
    y(Number.isInteger(t) && t >= 0, "invalid startBlock", "startBlock", t);
    const e = new Ja(this, this.provider);
    return d(e, mn, t), e;
  }
};
mn = new WeakMap();
let Ws = Ja;
function _p(r) {
  return { orphan: "drop-block", hash: r.hash, number: r.number };
}
function Gl(r, t) {
  return { orphan: "reorder-transaction", tx: r, other: t };
}
function Ql(r) {
  return { orphan: "drop-transaction", tx: r };
}
function Vp(r) {
  return { orphan: "drop-log", log: {
    transactionHash: r.transactionHash,
    blockHash: r.blockHash,
    blockNumber: r.blockNumber,
    address: r.address,
    data: r.data,
    topics: Object.freeze(r.topics.slice()),
    index: r.index
  } };
}
class Fa extends pi {
  /**
   * @_ignore:
   */
  constructor(e, n, s) {
    super(e, e.provider);
    /**
     *  The Contract Interface.
     */
    A(this, "interface");
    /**
     *  The matching event.
     */
    A(this, "fragment");
    /**
     *  The parsed arguments passed to the event by ``emit``.
     */
    A(this, "args");
    const i = n.decodeEventLog(s, e.data, e.topics);
    M(this, { args: i, fragment: s, interface: n });
  }
  /**
   *  The name of the event.
   */
  get eventName() {
    return this.fragment.name;
  }
  /**
   *  The signature of the event.
   */
  get eventSignature() {
    return this.fragment.format();
  }
}
class Hl extends pi {
  /**
   * @_ignore:
   */
  constructor(e, n) {
    super(e, e.provider);
    /**
     *  The error encounted when trying to decode the log.
     */
    A(this, "error");
    M(this, { error: n });
  }
}
var ns;
class Jp extends Ml {
  /**
   *  @_ignore:
   */
  constructor(e, n, s) {
    super(s, n);
    b(this, ns, void 0);
    d(this, ns, e);
  }
  /**
   *  The parsed logs for any [[Log]] which has a matching event in the
   *  Contract ABI.
   */
  get logs() {
    return super.logs.map((e) => {
      const n = e.topics.length ? l(this, ns).getEvent(e.topics[0]) : null;
      if (n)
        try {
          return new Fa(e, l(this, ns), n);
        } catch (s) {
          return new Hl(e, s);
        }
      return e;
    });
  }
}
ns = new WeakMap();
var ni;
class La extends Ws {
  /**
   *  @_ignore:
   */
  constructor(e, n, s) {
    super(s, n);
    b(this, ni, void 0);
    d(this, ni, e);
  }
  /**
   *  Resolves once this transaction has been mined and has
   *  %%confirms%% blocks including it (default: ``1``) with an
   *  optional %%timeout%%.
   *
   *  This can resolve to ``null`` only if %%confirms%% is ``0``
   *  and the transaction has not been mined, otherwise this will
   *  wait until enough confirmations have completed.
   */
  async wait(e) {
    const n = await super.wait(e);
    return n == null ? null : new Jp(l(this, ni), this.provider, n);
  }
}
ni = new WeakMap();
class _l extends vu {
  /**
   *  @_event:
   */
  constructor(e, n, s, i) {
    super(e, n, s);
    /**
     *  The log with no matching events.
     */
    A(this, "log");
    M(this, { log: i });
  }
  /**
   *  Resolves to the block the event occured in.
   */
  async getBlock() {
    return await this.log.getBlock();
  }
  /**
   *  Resolves to the transaction the event occured in.
   */
  async getTransaction() {
    return await this.log.getTransaction();
  }
  /**
   *  Resolves to the transaction receipt the event occured in.
   */
  async getTransactionReceipt() {
    return await this.log.getTransactionReceipt();
  }
}
class jp extends _l {
  /**
   *  @_ignore:
   */
  constructor(t, e, n, s, i) {
    super(t, e, n, new Fa(i, t.interface, s));
    const o = t.interface.decodeEventLog(s, this.log.data, this.log.topics);
    M(this, { args: o, fragment: s });
  }
  /**
   *  The event name.
   */
  get eventName() {
    return this.fragment.name;
  }
  /**
   *  The event signature.
   */
  get eventSignature() {
    return this.fragment.format();
  }
}
const su = BigInt(0);
function Vl(r) {
  return r && typeof r.call == "function";
}
function Jl(r) {
  return r && typeof r.estimateGas == "function";
}
function go(r) {
  return r && typeof r.resolveName == "function";
}
function jl(r) {
  return r && typeof r.sendTransaction == "function";
}
function zl(r) {
  if (r != null) {
    if (go(r))
      return r;
    if (r.provider)
      return r.provider;
  }
}
var ri;
class zp {
  constructor(t, e, n) {
    b(this, ri, void 0);
    A(this, "fragment");
    if (M(this, { fragment: e }), e.inputs.length < n.length)
      throw new Error("too many arguments");
    const s = fr(t.runner, "resolveName"), i = go(s) ? s : null;
    d(this, ri, async function() {
      const o = await Promise.all(e.inputs.map((a, c) => n[c] == null ? null : a.walkAsync(n[c], (f, h) => f === "address" ? Array.isArray(h) ? Promise.all(h.map((g) => Ut(g, i))) : Ut(h, i) : h)));
      return t.interface.encodeFilterTopics(e, o);
    }());
  }
  getTopicFilter() {
    return l(this, ri);
  }
}
ri = new WeakMap();
function fr(r, t) {
  return r == null ? null : typeof r[t] == "function" ? r : r.provider && typeof r.provider[t] == "function" ? r.provider : null;
}
function Gn(r) {
  return r == null ? null : r.provider || null;
}
async function Kl(r, t) {
  const e = Tt.dereference(r, "overrides");
  y(typeof e == "object", "invalid overrides parameter", "overrides", r);
  const n = zi(e);
  return y(n.to == null || (t || []).indexOf("to") >= 0, "cannot override to", "overrides.to", n.to), y(n.data == null || (t || []).indexOf("data") >= 0, "cannot override data", "overrides.data", n.data), n.from && (n.from = n.from), n;
}
async function Kp(r, t, e) {
  const n = fr(r, "resolveName"), s = go(n) ? n : null;
  return await Promise.all(t.map((i, o) => i.walkAsync(e[o], (a, c) => (c = Tt.dereference(c, a), a === "address" ? Ut(c, s) : c))));
}
function Wp(r) {
  const t = async function(o) {
    const a = await Kl(o, ["data"]);
    a.to = await r.getAddress(), a.from && (a.from = await Ut(a.from, zl(r.runner)));
    const c = r.interface, u = L(a.value || su, "overrides.value") === su, f = (a.data || "0x") === "0x";
    c.fallback && !c.fallback.payable && c.receive && !f && !u && y(!1, "cannot send data to receive or send value to non-payable fallback", "overrides", o), y(c.fallback || f, "cannot send data to receive-only contract", "overrides.data", a.data);
    const h = c.receive || c.fallback && c.fallback.payable;
    return y(h || u, "cannot send value to non-payable fallback", "overrides.value", a.value), y(c.fallback || f, "cannot send data to receive-only contract", "overrides.data", a.data), a;
  }, e = async function(o) {
    const a = fr(r.runner, "call");
    P(Vl(a), "contract runner does not support calling", "UNSUPPORTED_OPERATION", { operation: "call" });
    const c = await t(o);
    try {
      return await a.call(c);
    } catch (u) {
      throw ba(u) && u.data ? r.interface.makeError(u.data, c) : u;
    }
  }, n = async function(o) {
    const a = r.runner;
    P(jl(a), "contract runner does not support sending transactions", "UNSUPPORTED_OPERATION", { operation: "sendTransaction" });
    const c = await a.sendTransaction(await t(o)), u = Gn(r.runner);
    return new La(r.interface, u, c);
  }, s = async function(o) {
    const a = fr(r.runner, "estimateGas");
    return P(Jl(a), "contract runner does not support gas estimation", "UNSUPPORTED_OPERATION", { operation: "estimateGas" }), await a.estimateGas(await t(o));
  }, i = async (o) => await n(o);
  return M(i, {
    _contract: r,
    estimateGas: s,
    populateTransaction: t,
    send: n,
    staticCall: e
  }), i;
}
function Yp(r, t) {
  const e = function(...u) {
    const f = r.interface.getFunction(t, u);
    return P(f, "no matching fragment", "UNSUPPORTED_OPERATION", {
      operation: "fragment",
      info: { key: t, args: u }
    }), f;
  }, n = async function(...u) {
    const f = e(...u);
    let h = {};
    if (f.inputs.length + 1 === u.length && (h = await Kl(u.pop()), h.from && (h.from = await Ut(h.from, zl(r.runner)))), f.inputs.length !== u.length)
      throw new Error("internal error: fragment inputs doesn't match arguments; should not happen");
    const g = await Kp(r.runner, f.inputs, u);
    return Object.assign({}, h, await Rt({
      to: r.getAddress(),
      data: r.interface.encodeFunctionData(f, g)
    }));
  }, s = async function(...u) {
    const f = await a(...u);
    return f.length === 1 ? f[0] : f;
  }, i = async function(...u) {
    const f = r.runner;
    P(jl(f), "contract runner does not support sending transactions", "UNSUPPORTED_OPERATION", { operation: "sendTransaction" });
    const h = await f.sendTransaction(await n(...u)), g = Gn(r.runner);
    return new La(r.interface, g, h);
  }, o = async function(...u) {
    const f = fr(r.runner, "estimateGas");
    return P(Jl(f), "contract runner does not support gas estimation", "UNSUPPORTED_OPERATION", { operation: "estimateGas" }), await f.estimateGas(await n(...u));
  }, a = async function(...u) {
    const f = fr(r.runner, "call");
    P(Vl(f), "contract runner does not support calling", "UNSUPPORTED_OPERATION", { operation: "call" });
    const h = await n(...u);
    let g = "0x";
    try {
      g = await f.call(h);
    } catch (E) {
      throw ba(E) && E.data ? r.interface.makeError(E.data, h) : E;
    }
    const w = e(...u);
    return r.interface.decodeFunctionResult(w, g);
  }, c = async (...u) => e(...u).constant ? await s(...u) : await i(...u);
  return M(c, {
    name: r.interface.getFunctionName(t),
    _contract: r,
    _key: t,
    getFragment: e,
    estimateGas: o,
    populateTransaction: n,
    send: i,
    staticCall: s,
    staticCallResult: a
  }), Object.defineProperty(c, "fragment", {
    configurable: !1,
    enumerable: !0,
    get: () => {
      const u = r.interface.getFunction(t);
      return P(u, "no matching fragment", "UNSUPPORTED_OPERATION", {
        operation: "fragment",
        info: { key: t }
      }), u;
    }
  }), c;
}
function Zp(r, t) {
  const e = function(...s) {
    const i = r.interface.getEvent(t, s);
    return P(i, "no matching fragment", "UNSUPPORTED_OPERATION", {
      operation: "fragment",
      info: { key: t, args: s }
    }), i;
  }, n = function(...s) {
    return new zp(r, e(...s), s);
  };
  return M(n, {
    name: r.interface.getEventName(t),
    _contract: r,
    _key: t,
    getFragment: e
  }), Object.defineProperty(n, "fragment", {
    configurable: !1,
    enumerable: !0,
    get: () => {
      const s = r.interface.getEvent(t);
      return P(s, "no matching fragment", "UNSUPPORTED_OPERATION", {
        operation: "fragment",
        info: { key: t }
      }), s;
    }
  }), n;
}
const Ki = Symbol.for("_ethersInternal_contract"), Wl = /* @__PURE__ */ new WeakMap();
function Xp(r, t) {
  Wl.set(r[Ki], t);
}
function Jt(r) {
  return Wl.get(r[Ki]);
}
function qp(r) {
  return r && typeof r == "object" && "getTopicFilter" in r && typeof r.getTopicFilter == "function" && r.fragment;
}
async function Ma(r, t) {
  let e, n = null;
  if (Array.isArray(t)) {
    const i = function(o) {
      if (ot(o, 32))
        return o;
      const a = r.interface.getEvent(o);
      return y(a, "unknown fragment", "name", o), a.topicHash;
    };
    e = t.map((o) => o == null ? null : Array.isArray(o) ? o.map(i) : i(o));
  } else
    t === "*" ? e = [null] : typeof t == "string" ? ot(t, 32) ? e = [t] : (n = r.interface.getEvent(t), y(n, "unknown fragment", "event", t), e = [n.topicHash]) : qp(t) ? e = await t.getTopicFilter() : "fragment" in t ? (n = t.fragment, e = [n.topicHash]) : y(!1, "unknown event name", "event", t);
  e = e.map((i) => {
    if (i == null)
      return null;
    if (Array.isArray(i)) {
      const o = Array.from(new Set(i.map((a) => a.toLowerCase())).values());
      return o.length === 1 ? o[0] : (o.sort(), o);
    }
    return i.toLowerCase();
  });
  const s = e.map((i) => i == null ? "null" : Array.isArray(i) ? i.join("|") : i).join("&");
  return { fragment: n, tag: s, topics: e };
}
async function ks(r, t) {
  const { subs: e } = Jt(r);
  return e.get((await Ma(r, t)).tag) || null;
}
async function iu(r, t, e) {
  const n = Gn(r.runner);
  P(n, "contract runner does not support subscribing", "UNSUPPORTED_OPERATION", { operation: t });
  const { fragment: s, tag: i, topics: o } = await Ma(r, e), { addr: a, subs: c } = Jt(r);
  let u = c.get(i);
  if (!u) {
    const h = { address: a || r, topics: o }, g = (x) => {
      let v = s;
      if (v == null)
        try {
          v = r.interface.getEvent(x.topics[0]);
        } catch {
        }
      if (v) {
        const B = v, T = s ? r.interface.decodeEventLog(s, x.data, x.topics) : [];
        aa(r, e, T, (H) => new jp(r, H, e, B, x));
      } else
        aa(r, e, [], (B) => new _l(r, B, e, x));
    };
    let w = [];
    u = { tag: i, listeners: [], start: () => {
      w.length || w.push(n.on(h, g));
    }, stop: async () => {
      if (w.length == 0)
        return;
      let x = w;
      w = [], await Promise.all(x), n.off(h, g);
    } }, c.set(i, u);
  }
  return u;
}
let oa = Promise.resolve();
async function $p(r, t, e, n) {
  await oa;
  const s = await ks(r, t);
  if (!s)
    return !1;
  const i = s.listeners.length;
  return s.listeners = s.listeners.filter(({ listener: o, once: a }) => {
    const c = Array.from(e);
    n && c.push(n(a ? null : o));
    try {
      o.call(r, ...c);
    } catch {
    }
    return !a;
  }), s.listeners.length === 0 && (s.stop(), Jt(r).subs.delete(s.tag)), i > 0;
}
async function aa(r, t, e, n) {
  try {
    await oa;
  } catch {
  }
  const s = $p(r, t, e, n);
  return oa = s, await s;
}
const Ni = ["then"];
var qg;
const Ms = class Ms {
  /**
   *  Creates a new contract connected to %%target%% with the %%abi%% and
   *  optionally connected to a %%runner%% to perform operations on behalf
   *  of.
   */
  constructor(t, e, n, s) {
    /**
     *  The target to connect to.
     *
     *  This can be an address, ENS name or any [[Addressable]], such as
     *  another contract. To get the resovled address, use the ``getAddress``
     *  method.
     */
    A(this, "target");
    /**
     *  The contract Interface.
     */
    A(this, "interface");
    /**
     *  The connected runner. This is generally a [[Provider]] or a
     *  [[Signer]], which dictates what operations are supported.
     *
     *  For example, a **Contract** connected to a [[Provider]] may
     *  only execute read-only operations.
     */
    A(this, "runner");
    /**
     *  All the Events available on this contract.
     */
    A(this, "filters");
    /**
     *  @_ignore:
     */
    A(this, qg);
    /**
     *  The fallback or receive function if any.
     */
    A(this, "fallback");
    y(typeof t == "string" || Zu(t), "invalid value for Contract target", "target", t), n == null && (n = null);
    const i = ia.from(e);
    M(this, { target: t, runner: n, interface: i }), Object.defineProperty(this, Ki, { value: {} });
    let o, a = null, c = null;
    if (s) {
      const h = Gn(n);
      c = new La(this.interface, h, s);
    }
    let u = /* @__PURE__ */ new Map();
    if (typeof t == "string")
      if (ot(t))
        a = t, o = Promise.resolve(t);
      else {
        const h = fr(n, "resolveName");
        if (!go(h))
          throw dt("contract runner does not support name resolution", "UNSUPPORTED_OPERATION", {
            operation: "resolveName"
          });
        o = h.resolveName(t).then((g) => {
          if (g == null)
            throw dt("an ENS name used for a contract target must be correctly configured", "UNCONFIGURED_NAME", {
              value: t
            });
          return Jt(this).addr = g, g;
        });
      }
    else
      o = t.getAddress().then((h) => {
        if (h == null)
          throw new Error("TODO");
        return Jt(this).addr = h, h;
      });
    Xp(this, { addrPromise: o, addr: a, deployTx: c, subs: u });
    const f = new Proxy({}, {
      get: (h, g, w) => {
        if (typeof g == "symbol" || Ni.indexOf(g) >= 0)
          return Reflect.get(h, g, w);
        try {
          return this.getEvent(g);
        } catch (E) {
          if (!oe(E, "INVALID_ARGUMENT") || E.argument !== "key")
            throw E;
        }
      },
      has: (h, g) => Ni.indexOf(g) >= 0 ? Reflect.has(h, g) : Reflect.has(h, g) || this.interface.hasEvent(String(g))
    });
    return M(this, { filters: f }), M(this, {
      fallback: i.receive || i.fallback ? Wp(this) : null
    }), new Proxy(this, {
      get: (h, g, w) => {
        if (typeof g == "symbol" || g in h || Ni.indexOf(g) >= 0)
          return Reflect.get(h, g, w);
        try {
          return h.getFunction(g);
        } catch (E) {
          if (!oe(E, "INVALID_ARGUMENT") || E.argument !== "key")
            throw E;
        }
      },
      has: (h, g) => typeof g == "symbol" || g in h || Ni.indexOf(g) >= 0 ? Reflect.has(h, g) : h.interface.hasFunction(g)
    });
  }
  /**
   *  Return a new Contract instance with the same target and ABI, but
   *  a different %%runner%%.
   */
  connect(t) {
    return new Ms(this.target, this.interface, t);
  }
  /**
   *  Return a new Contract instance with the same ABI and runner, but
   *  a different %%target%%.
   */
  attach(t) {
    return new Ms(t, this.interface, this.runner);
  }
  /**
   *  Return the resolved address of this Contract.
   */
  async getAddress() {
    return await Jt(this).addrPromise;
  }
  /**
   *  Return the deployed bytecode or null if no bytecode is found.
   */
  async getDeployedCode() {
    const t = Gn(this.runner);
    P(t, "runner does not support .provider", "UNSUPPORTED_OPERATION", { operation: "getDeployedCode" });
    const e = await t.getCode(await this.getAddress());
    return e === "0x" ? null : e;
  }
  /**
   *  Resolve to this Contract once the bytecode has been deployed, or
   *  resolve immediately if already deployed.
   */
  async waitForDeployment() {
    const t = this.deploymentTransaction();
    if (t)
      return await t.wait(), this;
    if (await this.getDeployedCode() != null)
      return this;
    const n = Gn(this.runner);
    return P(n != null, "contract runner does not support .provider", "UNSUPPORTED_OPERATION", { operation: "waitForDeployment" }), new Promise((s, i) => {
      const o = async () => {
        try {
          if (await this.getDeployedCode() != null)
            return s(this);
          n.once("block", o);
        } catch (a) {
          i(a);
        }
      };
      o();
    });
  }
  /**
   *  Return the transaction used to deploy this contract.
   *
   *  This is only available if this instance was returned from a
   *  [[ContractFactory]].
   */
  deploymentTransaction() {
    return Jt(this).deployTx;
  }
  /**
   *  Return the function for a given name. This is useful when a contract
   *  method name conflicts with a JavaScript name such as ``prototype`` or
   *  when using a Contract programatically.
   */
  getFunction(t) {
    return typeof t != "string" && (t = t.format()), Yp(this, t);
  }
  /**
   *  Return the event for a given name. This is useful when a contract
   *  event name conflicts with a JavaScript name such as ``prototype`` or
   *  when using a Contract programatically.
   */
  getEvent(t) {
    return typeof t != "string" && (t = t.format()), Zp(this, t);
  }
  /**
   *  @_ignore:
   */
  async queryTransaction(t) {
    throw new Error("@TODO");
  }
  /*
      // @TODO: this is a non-backwards compatible change, but will be added
      //        in v7 and in a potential SmartContract class in an upcoming
      //        v6 release
      async getTransactionReceipt(hash: string): Promise<null | ContractTransactionReceipt> {
          const provider = getProvider(this.runner);
          assert(provider, "contract runner does not have a provider",
              "UNSUPPORTED_OPERATION", { operation: "queryTransaction" });
  
          const receipt = await provider.getTransactionReceipt(hash);
          if (receipt == null) { return null; }
  
          return new ContractTransactionReceipt(this.interface, provider, receipt);
      }
      */
  /**
   *  Provide historic access to event data for %%event%% in the range
   *  %%fromBlock%% (default: ``0``) to %%toBlock%% (default: ``"latest"``)
   *  inclusive.
   */
  async queryFilter(t, e, n) {
    e == null && (e = 0), n == null && (n = "latest");
    const { addr: s, addrPromise: i } = Jt(this), o = s || await i, { fragment: a, topics: c } = await Ma(this, t), u = { address: o, topics: c, fromBlock: e, toBlock: n }, f = Gn(this.runner);
    return P(f, "contract runner does not have a provider", "UNSUPPORTED_OPERATION", { operation: "queryFilter" }), (await f.getLogs(u)).map((h) => {
      let g = a;
      if (g == null)
        try {
          g = this.interface.getEvent(h.topics[0]);
        } catch {
        }
      if (g)
        try {
          return new Fa(h, this.interface, g);
        } catch (w) {
          return new Hl(h, w);
        }
      return new pi(h, f);
    });
  }
  /**
   *  Add an event %%listener%% for the %%event%%.
   */
  async on(t, e) {
    const n = await iu(this, "on", t);
    return n.listeners.push({ listener: e, once: !1 }), n.start(), this;
  }
  /**
   *  Add an event %%listener%% for the %%event%%, but remove the listener
   *  after it is fired once.
   */
  async once(t, e) {
    const n = await iu(this, "once", t);
    return n.listeners.push({ listener: e, once: !0 }), n.start(), this;
  }
  /**
   *  Emit an %%event%% calling all listeners with %%args%%.
   *
   *  Resolves to ``true`` if any listeners were called.
   */
  async emit(t, ...e) {
    return await aa(this, t, e, null);
  }
  /**
   *  Resolves to the number of listeners of %%event%% or the total number
   *  of listeners if unspecified.
   */
  async listenerCount(t) {
    if (t) {
      const s = await ks(this, t);
      return s ? s.listeners.length : 0;
    }
    const { subs: e } = Jt(this);
    let n = 0;
    for (const { listeners: s } of e.values())
      n += s.length;
    return n;
  }
  /**
   *  Resolves to the listeners subscribed to %%event%% or all listeners
   *  if unspecified.
   */
  async listeners(t) {
    if (t) {
      const s = await ks(this, t);
      return s ? s.listeners.map(({ listener: i }) => i) : [];
    }
    const { subs: e } = Jt(this);
    let n = [];
    for (const { listeners: s } of e.values())
      n = n.concat(s.map(({ listener: i }) => i));
    return n;
  }
  /**
   *  Remove the %%listener%% from the listeners for %%event%% or remove
   *  all listeners if unspecified.
   */
  async off(t, e) {
    const n = await ks(this, t);
    if (!n)
      return this;
    if (e) {
      const s = n.listeners.map(({ listener: i }) => i).indexOf(e);
      s >= 0 && n.listeners.splice(s, 1);
    }
    return (e == null || n.listeners.length === 0) && (n.stop(), Jt(this).subs.delete(n.tag)), this;
  }
  /**
   *  Remove all the listeners for %%event%% or remove all listeners if
   *  unspecified.
   */
  async removeAllListeners(t) {
    if (t) {
      const e = await ks(this, t);
      if (!e)
        return this;
      e.stop(), Jt(this).subs.delete(e.tag);
    } else {
      const { subs: e } = Jt(this);
      for (const { tag: n, stop: s } of e.values())
        s(), e.delete(n);
    }
    return this;
  }
  /**
   *  Alias for [on].
   */
  async addListener(t, e) {
    return await this.on(t, e);
  }
  /**
   *  Alias for [off].
   */
  async removeListener(t, e) {
    return await this.off(t, e);
  }
  /**
   *  Create a new Class for the %%abi%%.
   */
  static buildClass(t) {
    class e extends Ms {
      constructor(s, i = null) {
        super(s, t, i);
      }
    }
    return e;
  }
  /**
   *  Create a new BaseContract with a specified Interface.
   */
  static from(t, e, n) {
    return n == null && (n = null), new this(t, e, n);
  }
};
qg = Ki;
let ca = Ms;
function tg() {
  return ca;
}
class In extends tg() {
}
function Mo(r) {
  return r.match(/^ipfs:\/\/ipfs\//i) ? r = r.substring(12) : r.match(/^ipfs:\/\//i) ? r = r.substring(7) : y(!1, "unsupported IPFS format", "link", r), `https://gateway.ipfs.io/ipfs/${r}`;
}
class eg {
  /**
   *  Creates a new **MulticoinProviderPluing** for %%name%%.
   */
  constructor(t) {
    /**
     *  The name.
     */
    A(this, "name");
    M(this, { name: t });
  }
  connect(t) {
    return this;
  }
  /**
   *  Returns ``true`` if %%coinType%% is supported by this plugin.
   */
  supportsCoinType(t) {
    return !1;
  }
  /**
   *  Resovles to the encoded %%address%% for %%coinType%%.
   */
  async encodeAddress(t, e) {
    throw new Error("unsupported coin");
  }
  /**
   *  Resovles to the decoded %%data%% for %%coinType%%.
   */
  async decodeAddress(t, e) {
    throw new Error("unsupported coin");
  }
}
const Yl = new RegExp("^(ipfs)://(.*)$", "i"), ou = [
  new RegExp("^(https)://(.*)$", "i"),
  new RegExp("^(data):(.*)$", "i"),
  Yl,
  new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i")
];
var wn, Yn, An, Er, eo, Zl;
const Tr = class Tr {
  constructor(t, e, n) {
    b(this, An);
    /**
     *  The connected provider.
     */
    A(this, "provider");
    /**
     *  The address of the resolver.
     */
    A(this, "address");
    /**
     *  The name this resolver was resolved against.
     */
    A(this, "name");
    // For EIP-2544 names, the ancestor that provided the resolver
    b(this, wn, void 0);
    b(this, Yn, void 0);
    M(this, { provider: t, address: e, name: n }), d(this, wn, null), d(this, Yn, new In(e, [
      "function supportsInterface(bytes4) view returns (bool)",
      "function resolve(bytes, bytes) view returns (bytes)",
      "function addr(bytes32) view returns (address)",
      "function addr(bytes32, uint) view returns (bytes)",
      "function text(bytes32, string) view returns (string)",
      "function contenthash(bytes32) view returns (bytes)"
    ], t));
  }
  /**
   *  Resolves to true if the resolver supports wildcard resolution.
   */
  async supportsWildcard() {
    return l(this, wn) == null && d(this, wn, (async () => {
      try {
        return await l(this, Yn).supportsInterface("0x9061b923");
      } catch (t) {
        if (oe(t, "CALL_EXCEPTION"))
          return !1;
        throw d(this, wn, null), t;
      }
    })()), await l(this, wn);
  }
  /**
   *  Resolves to the address for %%coinType%% or null if the
   *  provided %%coinType%% has not been configured.
   */
  async getAddress(t) {
    if (t == null && (t = 60), t === 60)
      try {
        const i = await O(this, An, Er).call(this, "addr(bytes32)");
        return i == null || i === Xo ? null : i;
      } catch (i) {
        if (oe(i, "CALL_EXCEPTION"))
          return null;
        throw i;
      }
    if (t >= 0 && t < 2147483648) {
      let i = t + 2147483648;
      const o = await O(this, An, Er).call(this, "addr(bytes32,uint)", [i]);
      if (ot(o, 20))
        return W(o);
    }
    let e = null;
    for (const i of this.provider.plugins)
      if (i instanceof eg && i.supportsCoinType(t)) {
        e = i;
        break;
      }
    if (e == null)
      return null;
    const n = await O(this, An, Er).call(this, "addr(bytes32,uint)", [t]);
    if (n == null || n === "0x")
      return null;
    const s = await e.decodeAddress(t, n);
    if (s != null)
      return s;
    P(!1, "invalid coin data", "UNSUPPORTED_OPERATION", {
      operation: `getAddress(${t})`,
      info: { coinType: t, data: n }
    });
  }
  /**
   *  Resolves to the EIP-634 text record for %%key%%, or ``null``
   *  if unconfigured.
   */
  async getText(t) {
    const e = await O(this, An, Er).call(this, "text(bytes32,string)", [t]);
    return e == null || e === "0x" ? null : e;
  }
  /**
   *  Rsolves to the content-hash or ``null`` if unconfigured.
   */
  async getContentHash() {
    const t = await O(this, An, Er).call(this, "contenthash(bytes32)");
    if (t == null || t === "0x")
      return null;
    const e = t.match(/^0x(e3010170|e5010172)(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
    if (e) {
      const s = e[1] === "e3010170" ? "ipfs" : "ipns", i = parseInt(e[4], 16);
      if (e[5].length === i * 2)
        return `${s}://${Uf("0x" + e[2])}`;
    }
    const n = t.match(/^0xe40101fa011b20([0-9a-f]*)$/);
    if (n && n[1].length === 64)
      return `bzz://${n[1]}`;
    P(!1, "invalid or unsupported content hash data", "UNSUPPORTED_OPERATION", {
      operation: "getContentHash()",
      info: { data: t }
    });
  }
  /**
   *  Resolves to the avatar url or ``null`` if the avatar is either
   *  unconfigured or incorrectly configured (e.g. references an NFT
   *  not owned by the address).
   *
   *  If diagnosing issues with configurations, the [[_getAvatar]]
   *  method may be useful.
   */
  async getAvatar() {
    return (await this._getAvatar()).url;
  }
  /**
   *  When resolving an avatar, there are many steps involved, such
   *  fetching metadata and possibly validating ownership of an
   *  NFT.
   *
   *  This method can be used to examine each step and the value it
   *  was working from.
   */
  async _getAvatar() {
    const t = [{ type: "name", value: this.name }];
    try {
      const e = await this.getText("avatar");
      if (e == null)
        return t.push({ type: "!avatar", value: "" }), { url: null, linkage: t };
      t.push({ type: "avatar", value: e });
      for (let n = 0; n < ou.length; n++) {
        const s = e.match(ou[n]);
        if (s == null)
          continue;
        const i = s[1].toLowerCase();
        switch (i) {
          case "https":
          case "data":
            return t.push({ type: "url", value: e }), { linkage: t, url: e };
          case "ipfs": {
            const o = Mo(e);
            return t.push({ type: "ipfs", value: e }), t.push({ type: "url", value: o }), { linkage: t, url: o };
          }
          case "erc721":
          case "erc1155": {
            const o = i === "erc721" ? "tokenURI(uint256)" : "uri(uint256)";
            t.push({ type: i, value: e });
            const a = await this.getAddress();
            if (a == null)
              return t.push({ type: "!owner", value: "" }), { url: null, linkage: t };
            const c = (s[2] || "").split("/");
            if (c.length !== 2)
              return t.push({ type: `!${i}caip`, value: s[2] || "" }), { url: null, linkage: t };
            const u = c[1], f = new In(c[0], [
              // ERC-721
              "function tokenURI(uint) view returns (string)",
              "function ownerOf(uint) view returns (address)",
              // ERC-1155
              "function uri(uint) view returns (string)",
              "function balanceOf(address, uint256) view returns (uint)"
            ], this.provider);
            if (i === "erc721") {
              const m = await f.ownerOf(u);
              if (a !== m)
                return t.push({ type: "!owner", value: m }), { url: null, linkage: t };
              t.push({ type: "owner", value: m });
            } else if (i === "erc1155") {
              const m = await f.balanceOf(a, u);
              if (!m)
                return t.push({ type: "!balance", value: "0" }), { url: null, linkage: t };
              t.push({ type: "balance", value: m.toString() });
            }
            let h = await f[o](u);
            if (h == null || h === "0x")
              return t.push({ type: "!metadata-url", value: "" }), { url: null, linkage: t };
            t.push({ type: "metadata-url-base", value: h }), i === "erc1155" && (h = h.replace("{id}", Bn(u, 32).substring(2)), t.push({ type: "metadata-url-expanded", value: h })), h.match(/^ipfs:/i) && (h = Mo(h)), t.push({ type: "metadata-url", value: h });
            let g = {};
            const w = await new Rn(h).send();
            w.assertOk();
            try {
              g = w.bodyJson;
            } catch {
              try {
                t.push({ type: "!metadata", value: w.bodyText });
              } catch {
                const v = w.body;
                return v && t.push({ type: "!metadata", value: F(v) }), { url: null, linkage: t };
              }
              return { url: null, linkage: t };
            }
            if (!g)
              return t.push({ type: "!metadata", value: "" }), { url: null, linkage: t };
            t.push({ type: "metadata", value: JSON.stringify(g) });
            let E = g.image;
            if (typeof E != "string")
              return t.push({ type: "!imageUrl", value: "" }), { url: null, linkage: t };
            if (!E.match(/^(https:\/\/|data:)/i)) {
              if (E.match(Yl) == null)
                return t.push({ type: "!imageUrl-ipfs", value: E }), { url: null, linkage: t };
              t.push({ type: "imageUrl-ipfs", value: E }), E = Mo(E);
            }
            return t.push({ type: "url", value: E }), { linkage: t, url: E };
          }
        }
      }
    } catch {
    }
    return { linkage: t, url: null };
  }
  static async getEnsAddress(t) {
    const e = await t.getNetwork(), n = e.getPlugin("org.ethers.plugins.network.Ens");
    return P(n, "network does not support ENS", "UNSUPPORTED_OPERATION", {
      operation: "getEnsAddress",
      info: { network: e }
    }), n.address;
  }
  /**
   *  Resolve to the ENS resolver for %%name%% using %%provider%% or
   *  ``null`` if unconfigured.
   */
  static async fromName(t, e) {
    var s;
    let n = e;
    for (; ; ) {
      if (n === "" || n === "." || e !== "eth" && n === "eth")
        return null;
      const i = await O(s = Tr, eo, Zl).call(s, t, n);
      if (i != null) {
        const o = new Tr(t, i, e);
        return n !== e && !await o.supportsWildcard() ? null : o;
      }
      n = n.split(".").slice(1).join(".");
    }
  }
};
wn = new WeakMap(), Yn = new WeakMap(), An = new WeakSet(), Er = async function(t, e) {
  e = (e || []).slice();
  const n = l(this, Yn).interface;
  e.unshift(ra(this.name));
  let s = null;
  await this.supportsWildcard() && (s = n.getFunction(t), P(s, "missing fragment", "UNKNOWN_ERROR", {
    info: { funcName: t }
  }), e = [
    op(this.name),
    n.encodeFunctionData(s, e)
  ], t = "resolve(bytes,bytes)"), e.push({
    enableCcipRead: !0
  });
  try {
    const i = await l(this, Yn)[t](...e);
    return s ? n.decodeFunctionResult(s, i)[0] : i;
  } catch (i) {
    if (!oe(i, "CALL_EXCEPTION"))
      throw i;
  }
  return null;
}, eo = new WeakSet(), Zl = async function(t, e) {
  const n = await Tr.getEnsAddress(t);
  try {
    const i = await new In(n, [
      "function resolver(bytes32) view returns (address)"
    ], t).resolver(ra(e), {
      enableCcipRead: !0
    });
    return i === Xo ? null : i;
  } catch (s) {
    throw s;
  }
  return null;
}, b(Tr, eo);
let Wi = Tr;
const au = BigInt(0);
function rt(r, t) {
  return function(e) {
    return e == null ? t : r(e);
  };
}
function Ga(r) {
  return (t) => {
    if (!Array.isArray(t))
      throw new Error("not an array");
    return t.map((e) => r(e));
  };
}
function gi(r, t) {
  return (e) => {
    const n = {};
    for (const s in r) {
      let i = s;
      if (t && s in t && !(i in e)) {
        for (const o of t[s])
          if (o in e) {
            i = o;
            break;
          }
      }
      try {
        const o = r[s](e[i]);
        o !== void 0 && (n[s] = o);
      } catch (o) {
        const a = o instanceof Error ? o.message : "not-an-error";
        P(!1, `invalid value for value.${s} (${a})`, "BAD_DATA", { value: e });
      }
    }
    return n;
  };
}
function ng(r) {
  switch (r) {
    case !0:
    case "true":
      return !0;
    case !1:
    case "false":
      return !1;
  }
  y(!1, `invalid boolean; ${JSON.stringify(r)}`, "value", r);
}
function xs(r) {
  return y(ot(r, !0), "invalid data", "value", r), r;
}
function ae(r) {
  return y(ot(r, 32), "invalid hash", "value", r), r;
}
const rg = gi({
  address: W,
  blockHash: ae,
  blockNumber: V,
  data: xs,
  index: V,
  removed: rt(ng, !1),
  topics: Ga(ae),
  transactionHash: ae,
  transactionIndex: V
}, {
  index: ["logIndex"]
});
function sg(r) {
  return rg(r);
}
const ig = gi({
  hash: rt(ae),
  parentHash: ae,
  number: V,
  timestamp: V,
  nonce: rt(xs),
  difficulty: L,
  gasLimit: L,
  gasUsed: L,
  miner: rt(W),
  extraData: xs,
  baseFeePerGas: rt(L)
});
function og(r) {
  const t = ig(r);
  return t.transactions = r.transactions.map((e) => typeof e == "string" ? e : Xl(e)), t;
}
const ag = gi({
  transactionIndex: V,
  blockNumber: V,
  transactionHash: ae,
  address: W,
  topics: Ga(ae),
  data: xs,
  index: V,
  blockHash: ae
}, {
  index: ["logIndex"]
});
function cg(r) {
  return ag(r);
}
const ug = gi({
  to: rt(W, null),
  from: rt(W, null),
  contractAddress: rt(W, null),
  // should be allowNull(hash), but broken-EIP-658 support is handled in receipt
  index: V,
  root: rt(F),
  gasUsed: L,
  logsBloom: rt(xs),
  blockHash: ae,
  hash: ae,
  logs: Ga(cg),
  blockNumber: V,
  //confirmations: allowNull(getNumber, null),
  cumulativeGasUsed: L,
  effectiveGasPrice: rt(L),
  status: rt(V),
  type: rt(V, 0)
}, {
  effectiveGasPrice: ["gasPrice"],
  hash: ["transactionHash"],
  index: ["transactionIndex"]
});
function lg(r) {
  return ug(r);
}
function Xl(r) {
  r.to && L(r.to) === au && (r.to = "0x0000000000000000000000000000000000000000");
  const t = gi({
    hash: ae,
    type: (e) => e === "0x" || e == null ? 0 : V(e),
    accessList: rt(hr, null),
    blockHash: rt(ae, null),
    blockNumber: rt(V, null),
    transactionIndex: rt(V, null),
    //confirmations: allowNull(getNumber, null),
    from: W,
    // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas) must be set
    gasPrice: rt(L),
    maxPriorityFeePerGas: rt(L),
    maxFeePerGas: rt(L),
    gasLimit: L,
    to: rt(W, null),
    value: L,
    nonce: V,
    data: xs,
    creates: rt(W, null),
    chainId: rt(L, null)
  }, {
    data: ["input"],
    gasLimit: ["gas"]
  })(r);
  if (t.to == null && t.creates == null && (t.creates = ud(t)), (r.type === 1 || r.type === 2) && r.accessList == null && (t.accessList = []), r.signature ? t.signature = we.from(r.signature) : t.signature = we.from(r), t.chainId == null) {
    const e = t.signature.legacyChainId;
    e != null && (t.chainId = e);
  }
  return t.blockHash && L(t.blockHash) === au && (t.blockHash = null), t;
}
const fg = "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
class yi {
  /**
   *  Creates a new **NetworkPlugin**.
   */
  constructor(t) {
    /**
     *  The name of the plugin.
     *
     *  It is recommended to use reverse-domain-notation, which permits
     *  unique names with a known authority as well as hierarchal entries.
     */
    A(this, "name");
    M(this, { name: t });
  }
  /**
   *  Creates a copy of this plugin.
   */
  clone() {
    return new yi(this.name);
  }
}
class yo extends yi {
  /**
   *  Creates a new GasCostPlugin from %%effectiveBlock%% until the
   *  latest block or another GasCostPlugin supercedes that block number,
   *  with the associated %%costs%%.
   */
  constructor(e, n) {
    e == null && (e = 0);
    super(`org.ethers.network.plugins.GasCost#${e || 0}`);
    /**
     *  The block number to treat these values as valid from.
     *
     *  This allows a hardfork to have updated values included as well as
     *  mulutiple hardforks to be supported.
     */
    A(this, "effectiveBlock");
    /**
     *  The transactions base fee.
     */
    A(this, "txBase");
    /**
     *  The fee for creating a new account.
     */
    A(this, "txCreate");
    /**
     *  The fee per zero-byte in the data.
     */
    A(this, "txDataZero");
    /**
     *  The fee per non-zero-byte in the data.
     */
    A(this, "txDataNonzero");
    /**
     *  The fee per storage key in the [[link-eip-2930]] access list.
     */
    A(this, "txAccessListStorageKey");
    /**
     *  The fee per address in the [[link-eip-2930]] access list.
     */
    A(this, "txAccessListAddress");
    const s = { effectiveBlock: e };
    function i(o, a) {
      let c = (n || {})[o];
      c == null && (c = a), y(typeof c == "number", `invalud value for ${o}`, "costs", n), s[o] = c;
    }
    i("txBase", 21e3), i("txCreate", 32e3), i("txDataZero", 4), i("txDataNonzero", 16), i("txAccessListStorageKey", 1900), i("txAccessListAddress", 2400), M(this, s);
  }
  clone() {
    return new yo(this.effectiveBlock, this);
  }
}
class mo extends yi {
  /**
   *  Creates a new **EnsPlugin** connected to %%address%% on the
   *  %%targetNetwork%%. The default ENS address and mainnet is used
   *  if unspecified.
   */
  constructor(e, n) {
    super("org.ethers.plugins.network.Ens");
    /**
     *  The ENS Registrty Contract address.
     */
    A(this, "address");
    /**
     *  The chain ID that the ENS contract lives on.
     */
    A(this, "targetNetwork");
    M(this, {
      address: e || fg,
      targetNetwork: n ?? 1
    });
  }
  clone() {
    return new mo(this.address, this.targetNetwork);
  }
}
var si, ii;
class hg extends yi {
  /**
   *  Creates a new **FetchUrlFeeDataNetworkPlugin** which will
   *  be used when computing the fee data for the network.
   */
  constructor(e, n) {
    super("org.ethers.plugins.network.FetchUrlFeeDataPlugin");
    b(this, si, void 0);
    b(this, ii, void 0);
    d(this, si, e), d(this, ii, n);
  }
  /**
   *  The URL to initialize the FetchRequest with in %%processFunc%%.
   */
  get url() {
    return l(this, si);
  }
  /**
   *  The callback to use when computing the FeeData.
   */
  get processFunc() {
    return l(this, ii);
  }
  // We are immutable, so we can serve as our own clone
  clone() {
    return this;
  }
}
si = new WeakMap(), ii = new WeakMap();
const Go = /* @__PURE__ */ new Map();
var rs, ss, bn;
const Or = class Or {
  /**
   *  Creates a new **Network** for %%name%% and %%chainId%%.
   */
  constructor(t, e) {
    b(this, rs, void 0);
    b(this, ss, void 0);
    b(this, bn, void 0);
    d(this, rs, t), d(this, ss, L(e)), d(this, bn, /* @__PURE__ */ new Map());
  }
  /**
   *  Returns a JSON-compatible representation of a Network.
   */
  toJSON() {
    return { name: this.name, chainId: String(this.chainId) };
  }
  /**
   *  The network common name.
   *
   *  This is the canonical name, as networks migh have multiple
   *  names.
   */
  get name() {
    return l(this, rs);
  }
  set name(t) {
    d(this, rs, t);
  }
  /**
   *  The network chain ID.
   */
  get chainId() {
    return l(this, ss);
  }
  set chainId(t) {
    d(this, ss, L(t, "chainId"));
  }
  /**
   *  Returns true if %%other%% matches this network. Any chain ID
   *  must match, and if no chain ID is present, the name must match.
   *
   *  This method does not currently check for additional properties,
   *  such as ENS address or plug-in compatibility.
   */
  matches(t) {
    if (t == null)
      return !1;
    if (typeof t == "string") {
      try {
        return this.chainId === L(t);
      } catch {
      }
      return this.name === t;
    }
    if (typeof t == "number" || typeof t == "bigint") {
      try {
        return this.chainId === L(t);
      } catch {
      }
      return !1;
    }
    if (typeof t == "object") {
      if (t.chainId != null) {
        try {
          return this.chainId === L(t.chainId);
        } catch {
        }
        return !1;
      }
      return t.name != null ? this.name === t.name : !1;
    }
    return !1;
  }
  /**
   *  Returns the list of plugins currently attached to this Network.
   */
  get plugins() {
    return Array.from(l(this, bn).values());
  }
  /**
   *  Attach a new %%plugin%% to this Network. The network name
   *  must be unique, excluding any fragment.
   */
  attachPlugin(t) {
    if (l(this, bn).get(t.name))
      throw new Error(`cannot replace existing plugin: ${t.name} `);
    return l(this, bn).set(t.name, t.clone()), this;
  }
  /**
   *  Return the plugin, if any, matching %%name%% exactly. Plugins
   *  with fragments will not be returned unless %%name%% includes
   *  a fragment.
   */
  getPlugin(t) {
    return l(this, bn).get(t) || null;
  }
  /**
   *  Gets a list of all plugins that match %%name%%, with otr without
   *  a fragment.
   */
  getPlugins(t) {
    return this.plugins.filter((e) => e.name.split("#")[0] === t);
  }
  /**
   *  Create a copy of this Network.
   */
  clone() {
    const t = new Or(this.name, this.chainId);
    return this.plugins.forEach((e) => {
      t.attachPlugin(e.clone());
    }), t;
  }
  /**
   *  Compute the intrinsic gas required for a transaction.
   *
   *  A GasCostPlugin can be attached to override the default
   *  values.
   */
  computeIntrinsicGas(t) {
    const e = this.getPlugin("org.ethers.plugins.network.GasCost") || new yo();
    let n = e.txBase;
    if (t.to == null && (n += e.txCreate), t.data)
      for (let s = 2; s < t.data.length; s += 2)
        t.data.substring(s, s + 2) === "00" ? n += e.txDataZero : n += e.txDataNonzero;
    if (t.accessList) {
      const s = hr(t.accessList);
      for (const i in s)
        n += e.txAccessListAddress + e.txAccessListStorageKey * s[i].storageKeys.length;
    }
    return n;
  }
  /**
   *  Returns a new Network for the %%network%% name or chainId.
   */
  static from(t) {
    if (dg(), t == null)
      return Or.from("mainnet");
    if (typeof t == "number" && (t = BigInt(t)), typeof t == "string" || typeof t == "bigint") {
      const e = Go.get(t);
      if (e)
        return e();
      if (typeof t == "bigint")
        return new Or("unknown", t);
      y(!1, "unknown network", "network", t);
    }
    if (typeof t.clone == "function")
      return t.clone();
    if (typeof t == "object") {
      y(typeof t.name == "string" && typeof t.chainId == "number", "invalid network object name or chainId", "network", t);
      const e = new Or(t.name, t.chainId);
      return (t.ensAddress || t.ensNetwork != null) && e.attachPlugin(new mo(t.ensAddress, t.ensNetwork)), e;
    }
    y(!1, "invalid network", "network", t);
  }
  /**
   *  Register %%nameOrChainId%% with a function which returns
   *  an instance of a Network representing that chain.
   */
  static register(t, e) {
    typeof t == "number" && (t = BigInt(t));
    const n = Go.get(t);
    n && y(!1, `conflicting network for ${JSON.stringify(n.name)}`, "nameOrChainId", t), Go.set(t, e);
  }
};
rs = new WeakMap(), ss = new WeakMap(), bn = new WeakMap();
let ke = Or;
function cu(r, t) {
  const e = String(r);
  if (!e.match(/^[0-9.]+$/))
    throw new Error(`invalid gwei value: ${r}`);
  const n = e.split(".");
  if (n.length === 1 && n.push(""), n.length !== 2)
    throw new Error(`invalid gwei value: ${r}`);
  for (; n[1].length < t; )
    n[1] += "0";
  if (n[1].length > 9) {
    let s = BigInt(n[1].substring(0, 9));
    n[1].substring(9).match(/^0+$/) || s++, n[1] = s.toString();
  }
  return BigInt(n[0] + n[1]);
}
function uu(r) {
  return new hg(r, async (t, e, n) => {
    n.setHeader("User-Agent", "ethers");
    let s;
    try {
      const [i, o] = await Promise.all([
        n.send(),
        t()
      ]);
      s = i;
      const a = s.bodyJson.standard;
      return {
        gasPrice: o.gasPrice,
        maxFeePerGas: cu(a.maxFee, 9),
        maxPriorityFeePerGas: cu(a.maxPriorityFee, 9)
      };
    } catch (i) {
      P(!1, `error encountered with polygon gas station (${JSON.stringify(n.url)})`, "SERVER_ERROR", { request: n, response: s, error: i });
    }
  });
}
let lu = !1;
function dg() {
  if (lu)
    return;
  lu = !0;
  function r(t, e, n) {
    const s = function() {
      const i = new ke(t, e);
      return n.ensNetwork != null && i.attachPlugin(new mo(null, n.ensNetwork)), i.attachPlugin(new yo()), (n.plugins || []).forEach((o) => {
        i.attachPlugin(o);
      }), i;
    };
    ke.register(t, s), ke.register(e, s), n.altNames && n.altNames.forEach((i) => {
      ke.register(i, s);
    });
  }
  r("mainnet", 1, { ensNetwork: 1, altNames: ["homestead"] }), r("ropsten", 3, { ensNetwork: 3 }), r("rinkeby", 4, { ensNetwork: 4 }), r("goerli", 5, { ensNetwork: 5 }), r("kovan", 42, { ensNetwork: 42 }), r("sepolia", 11155111, { ensNetwork: 11155111 }), r("classic", 61, {}), r("classicKotti", 6, {}), r("arbitrum", 42161, {
    ensNetwork: 1
  }), r("arbitrum-goerli", 421613, {}), r("base", 8453, { ensNetwork: 1 }), r("base-goerli", 84531, {}), r("base-sepolia", 84532, {}), r("bnb", 56, { ensNetwork: 1 }), r("bnbt", 97, {}), r("linea", 59144, { ensNetwork: 1 }), r("linea-goerli", 59140, {}), r("matic", 137, {
    ensNetwork: 1,
    plugins: [
      uu("https://gasstation.polygon.technology/v2")
    ]
  }), r("matic-mumbai", 80001, {
    altNames: ["maticMumbai", "maticmum"],
    plugins: [
      uu("https://gasstation-testnet.polygon.technology/v2")
    ]
  }), r("optimism", 10, {
    ensNetwork: 1,
    plugins: []
  }), r("optimism-goerli", 420, {}), r("xdai", 100, { ensNetwork: 1 });
}
function ua(r) {
  return JSON.parse(JSON.stringify(r));
}
var We, ee, En, Te, is, Ui;
class pg {
  /**
   *  Create a new **PollingBlockSubscriber** attached to %%provider%%.
   */
  constructor(t) {
    b(this, is);
    b(this, We, void 0);
    b(this, ee, void 0);
    b(this, En, void 0);
    // The most recent block we have scanned for events. The value -2
    // indicates we still need to fetch an initial block number
    b(this, Te, void 0);
    d(this, We, t), d(this, ee, null), d(this, En, 4e3), d(this, Te, -2);
  }
  /**
   *  The polling interval.
   */
  get pollingInterval() {
    return l(this, En);
  }
  set pollingInterval(t) {
    d(this, En, t);
  }
  start() {
    l(this, ee) || (d(this, ee, l(this, We)._setTimeout(O(this, is, Ui).bind(this), l(this, En))), O(this, is, Ui).call(this));
  }
  stop() {
    l(this, ee) && (l(this, We)._clearTimeout(l(this, ee)), d(this, ee, null));
  }
  pause(t) {
    this.stop(), t && d(this, Te, -2);
  }
  resume() {
    this.start();
  }
}
We = new WeakMap(), ee = new WeakMap(), En = new WeakMap(), Te = new WeakMap(), is = new WeakSet(), Ui = async function() {
  try {
    const t = await l(this, We).getBlockNumber();
    if (l(this, Te) === -2) {
      d(this, Te, t);
      return;
    }
    if (t !== l(this, Te)) {
      for (let e = l(this, Te) + 1; e <= t; e++) {
        if (l(this, ee) == null)
          return;
        await l(this, We).emit("block", e);
      }
      d(this, Te, t);
    }
  } catch {
  }
  l(this, ee) != null && d(this, ee, l(this, We)._setTimeout(O(this, is, Ui).bind(this), l(this, En)));
};
var Zn, Xn, vn;
class Qa {
  /**
   *  Create a new **OnBlockSubscriber** attached to %%provider%%.
   */
  constructor(t) {
    b(this, Zn, void 0);
    b(this, Xn, void 0);
    b(this, vn, void 0);
    d(this, Zn, t), d(this, vn, !1), d(this, Xn, (e) => {
      this._poll(e, l(this, Zn));
    });
  }
  /**
   *  Called on every new block.
   */
  async _poll(t, e) {
    throw new Error("sub-classes must override this");
  }
  start() {
    l(this, vn) || (d(this, vn, !0), l(this, Xn).call(this, -2), l(this, Zn).on("block", l(this, Xn)));
  }
  stop() {
    l(this, vn) && (d(this, vn, !1), l(this, Zn).off("block", l(this, Xn)));
  }
  pause(t) {
    this.stop();
  }
  resume() {
    this.start();
  }
}
Zn = new WeakMap(), Xn = new WeakMap(), vn = new WeakMap();
var os, Ye;
class gg extends Qa {
  constructor(e, n) {
    super(e);
    b(this, os, void 0);
    b(this, Ye, void 0);
    d(this, os, n), d(this, Ye, -2);
  }
  pause(e) {
    e && d(this, Ye, -2), super.pause(e);
  }
  async _poll(e, n) {
    const s = await n.getBlock(l(this, os));
    s != null && (l(this, Ye) === -2 ? d(this, Ye, s.number) : s.number > l(this, Ye) && (n.emit(l(this, os), s.number), d(this, Ye, s.number)));
  }
}
os = new WeakMap(), Ye = new WeakMap();
var no;
class yg extends Qa {
  constructor(e, n) {
    super(e);
    b(this, no, void 0);
    d(this, no, ua(n));
  }
  async _poll(e, n) {
    throw new Error("@TODO");
  }
}
no = new WeakMap();
var as;
class mg extends Qa {
  /**
   *  Create a new **PollingTransactionSubscriber** attached to
   *  %%provider%%, listening for %%hash%%.
   */
  constructor(e, n) {
    super(e);
    b(this, as, void 0);
    d(this, as, n);
  }
  async _poll(e, n) {
    const s = await n.getTransactionReceipt(l(this, as));
    s && n.emit(l(this, as), s);
  }
}
as = new WeakMap();
var Ze, cs, us, xn, ne, ro, ql;
class Ha {
  /**
   *  Create a new **PollingTransactionSubscriber** attached to
   *  %%provider%%, listening for %%filter%%.
   */
  constructor(t, e) {
    b(this, ro);
    b(this, Ze, void 0);
    b(this, cs, void 0);
    b(this, us, void 0);
    b(this, xn, void 0);
    // The most recent block we have scanned for events. The value -2
    // indicates we still need to fetch an initial block number
    b(this, ne, void 0);
    d(this, Ze, t), d(this, cs, ua(e)), d(this, us, O(this, ro, ql).bind(this)), d(this, xn, !1), d(this, ne, -2);
  }
  start() {
    l(this, xn) || (d(this, xn, !0), l(this, ne) === -2 && l(this, Ze).getBlockNumber().then((t) => {
      d(this, ne, t);
    }), l(this, Ze).on("block", l(this, us)));
  }
  stop() {
    l(this, xn) && (d(this, xn, !1), l(this, Ze).off("block", l(this, us)));
  }
  pause(t) {
    this.stop(), t && d(this, ne, -2);
  }
  resume() {
    this.start();
  }
}
Ze = new WeakMap(), cs = new WeakMap(), us = new WeakMap(), xn = new WeakMap(), ne = new WeakMap(), ro = new WeakSet(), ql = async function(t) {
  if (l(this, ne) === -2)
    return;
  const e = ua(l(this, cs));
  e.fromBlock = l(this, ne) + 1, e.toBlock = t;
  const n = await l(this, Ze).getLogs(e);
  if (n.length === 0) {
    l(this, ne) < t - 60 && d(this, ne, t - 60);
    return;
  }
  for (const s of n)
    l(this, Ze).emit(l(this, cs), s), d(this, ne, s.blockNumber);
};
const wg = BigInt(2), Ag = 10;
function Ci(r) {
  return r && typeof r.then == "function";
}
function Di(r, t) {
  return r + ":" + JSON.stringify(t, (e, n) => {
    if (n == null)
      return "null";
    if (typeof n == "bigint")
      return `bigint:${n.toString()}`;
    if (typeof n == "string")
      return n.toLowerCase();
    if (typeof n == "object" && !Array.isArray(n)) {
      const s = Object.keys(n);
      return s.sort(), s.reduce((i, o) => (i[o] = n[o], i), {});
    }
    return n;
  });
}
class $l {
  /**
   *  Create a new UnmanagedSubscriber with %%name%%.
   */
  constructor(t) {
    /**
     *  The name fof the event.
     */
    A(this, "name");
    M(this, { name: t });
  }
  start() {
  }
  stop() {
  }
  pause(t) {
  }
  resume() {
  }
}
function bg(r) {
  return JSON.parse(JSON.stringify(r));
}
function la(r) {
  return r = Array.from(new Set(r).values()), r.sort(), r;
}
async function Qo(r, t) {
  if (r == null)
    throw new Error("invalid event");
  if (Array.isArray(r) && (r = { topics: r }), typeof r == "string")
    switch (r) {
      case "block":
      case "debug":
      case "error":
      case "finalized":
      case "network":
      case "pending":
      case "safe":
        return { type: r, tag: r };
    }
  if (ot(r, 32)) {
    const e = r.toLowerCase();
    return { type: "transaction", tag: Di("tx", { hash: e }), hash: e };
  }
  if (r.orphan) {
    const e = r;
    return { type: "orphan", tag: Di("orphan", e), filter: bg(e) };
  }
  if (r.address || r.topics) {
    const e = r, n = {
      topics: (e.topics || []).map((s) => s == null ? null : Array.isArray(s) ? la(s.map((i) => i.toLowerCase())) : s.toLowerCase())
    };
    if (e.address) {
      const s = [], i = [], o = (a) => {
        ot(a) ? s.push(a) : i.push((async () => {
          s.push(await Ut(a, t));
        })());
      };
      Array.isArray(e.address) ? e.address.forEach(o) : o(e.address), i.length && await Promise.all(i), n.address = la(s.map((a) => a.toLowerCase()));
    }
    return { filter: n, tag: Di("event", n), type: "event" };
  }
  y(!1, "unknown ProviderEvent", "event", r);
}
function Ho() {
  return (/* @__PURE__ */ new Date()).getTime();
}
const Eg = {
  cacheTimeout: 250,
  pollingInterval: 4e3
};
var Pt, Pn, Nt, ls, Kt, qn, Nn, Xe, oi, re, fs, hs, Bt, Vt, ai, fa, ci, ha, $n, Ss, ui, da, tr, Us, ds, Fi;
class vg {
  /**
   *  Create a new **AbstractProvider** connected to %%network%%, or
   *  use the various network detection capabilities to discover the
   *  [[Network]] if necessary.
   */
  constructor(t, e) {
    // Shares multiple identical requests made during the same 250ms
    b(this, Bt);
    b(this, ai);
    b(this, ci);
    // Account
    b(this, $n);
    b(this, ui);
    b(this, tr);
    b(this, ds);
    b(this, Pt, void 0);
    b(this, Pn, void 0);
    // null=unpaused, true=paused+dropWhilePaused, false=paused
    b(this, Nt, void 0);
    b(this, ls, void 0);
    b(this, Kt, void 0);
    b(this, qn, void 0);
    b(this, Nn, void 0);
    // The most recent block number if running an event or -1 if no "block" event
    b(this, Xe, void 0);
    b(this, oi, void 0);
    b(this, re, void 0);
    b(this, fs, void 0);
    b(this, hs, void 0);
    if (d(this, hs, Object.assign({}, Eg, e || {})), t === "any")
      d(this, qn, !0), d(this, Kt, null);
    else if (t) {
      const n = ke.from(t);
      d(this, qn, !1), d(this, Kt, Promise.resolve(n)), setTimeout(() => {
        this.emit("network", n, null);
      }, 0);
    } else
      d(this, qn, !1), d(this, Kt, null);
    d(this, Xe, -1), d(this, Nn, /* @__PURE__ */ new Map()), d(this, Pt, /* @__PURE__ */ new Map()), d(this, Pn, /* @__PURE__ */ new Map()), d(this, Nt, null), d(this, ls, !1), d(this, oi, 1), d(this, re, /* @__PURE__ */ new Map()), d(this, fs, !1);
  }
  get pollingInterval() {
    return l(this, hs).pollingInterval;
  }
  /**
   *  Returns ``this``, to allow an **AbstractProvider** to implement
   *  the [[ContractRunner]] interface.
   */
  get provider() {
    return this;
  }
  /**
   *  Returns all the registered plug-ins.
   */
  get plugins() {
    return Array.from(l(this, Pn).values());
  }
  /**
   *  Attach a new plug-in.
   */
  attachPlugin(t) {
    if (l(this, Pn).get(t.name))
      throw new Error(`cannot replace existing plugin: ${t.name} `);
    return l(this, Pn).set(t.name, t.connect(this)), this;
  }
  /**
   *  Get a plugin by name.
   */
  getPlugin(t) {
    return l(this, Pn).get(t) || null;
  }
  /**
   *  Prevent any CCIP-read operation, regardless of whether requested
   *  in a [[call]] using ``enableCcipRead``.
   */
  get disableCcipRead() {
    return l(this, fs);
  }
  set disableCcipRead(t) {
    d(this, fs, !!t);
  }
  /**
   *  Resolves to the data for executing the CCIP-read operations.
   */
  async ccipReadFetch(t, e, n) {
    if (this.disableCcipRead || n.length === 0 || t.to == null)
      return null;
    const s = t.to.toLowerCase(), i = e.toLowerCase(), o = [];
    for (let a = 0; a < n.length; a++) {
      const c = n[a], u = c.replace("{sender}", s).replace("{data}", i), f = new Rn(u);
      c.indexOf("{data}") === -1 && (f.body = { data: i, sender: s }), this.emit("debug", { action: "sendCcipReadFetchRequest", request: f, index: a, urls: n });
      let h = "unknown error";
      const g = await f.send();
      try {
        const w = g.bodyJson;
        if (w.data)
          return this.emit("debug", { action: "receiveCcipReadFetchResult", request: f, result: w }), w.data;
        w.message && (h = w.message), this.emit("debug", { action: "receiveCcipReadFetchError", request: f, result: w });
      } catch {
      }
      P(g.statusCode < 400 || g.statusCode >= 500, `response not found during CCIP fetch: ${h}`, "OFFCHAIN_FAULT", { reason: "404_MISSING_RESOURCE", transaction: t, info: { url: c, errorMessage: h } }), o.push(h);
    }
    P(!1, `error encountered during CCIP fetch: ${o.map((a) => JSON.stringify(a)).join(", ")}`, "OFFCHAIN_FAULT", {
      reason: "500_SERVER_ERROR",
      transaction: t,
      info: { urls: n, errorMessages: o }
    });
  }
  /**
   *  Provides the opportunity for a sub-class to wrap a block before
   *  returning it, to add additional properties or an alternate
   *  sub-class of [[Block]].
   */
  _wrapBlock(t, e) {
    return new Hp(og(t), this);
  }
  /**
   *  Provides the opportunity for a sub-class to wrap a log before
   *  returning it, to add additional properties or an alternate
   *  sub-class of [[Log]].
   */
  _wrapLog(t, e) {
    return new pi(sg(t), this);
  }
  /**
   *  Provides the opportunity for a sub-class to wrap a transaction
   *  receipt before returning it, to add additional properties or an
   *  alternate sub-class of [[TransactionReceipt]].
   */
  _wrapTransactionReceipt(t, e) {
    return new Ml(lg(t), this);
  }
  /**
   *  Provides the opportunity for a sub-class to wrap a transaction
   *  response before returning it, to add additional properties or an
   *  alternate sub-class of [[TransactionResponse]].
   */
  _wrapTransactionResponse(t, e) {
    return new Ws(Xl(t), this);
  }
  /**
   *  Resolves to the Network, forcing a network detection using whatever
   *  technique the sub-class requires.
   *
   *  Sub-classes **must** override this.
   */
  _detectNetwork() {
    P(!1, "sub-classes must implement this", "UNSUPPORTED_OPERATION", {
      operation: "_detectNetwork"
    });
  }
  /**
   *  Sub-classes should use this to perform all built-in operations. All
   *  methods sanitizes and normalizes the values passed into this.
   *
   *  Sub-classes **must** override this.
   */
  async _perform(t) {
    P(!1, `unsupported method: ${t.method}`, "UNSUPPORTED_OPERATION", {
      operation: t.method,
      info: t
    });
  }
  // State
  async getBlockNumber() {
    const t = V(await O(this, Bt, Vt).call(this, { method: "getBlockNumber" }), "%response");
    return l(this, Xe) >= 0 && d(this, Xe, t), t;
  }
  /**
   *  Returns or resolves to the address for %%address%%, resolving ENS
   *  names and [[Addressable]] objects and returning if already an
   *  address.
   */
  _getAddress(t) {
    return Ut(t, this);
  }
  /**
   *  Returns or resolves to a valid block tag for %%blockTag%%, resolving
   *  negative values and returning if already a valid block tag.
   */
  _getBlockTag(t) {
    if (t == null)
      return "latest";
    switch (t) {
      case "earliest":
        return "0x0";
      case "finalized":
      case "latest":
      case "pending":
      case "safe":
        return t;
    }
    if (ot(t))
      return ot(t, 32) ? t : Pr(t);
    if (typeof t == "bigint" && (t = V(t, "blockTag")), typeof t == "number")
      return t >= 0 ? Pr(t) : l(this, Xe) >= 0 ? Pr(l(this, Xe) + t) : this.getBlockNumber().then((e) => Pr(e + t));
    y(!1, "invalid blockTag", "blockTag", t);
  }
  /**
   *  Returns or resolves to a filter for %%filter%%, resolving any ENS
   *  names or [[Addressable]] object and returning if already a valid
   *  filter.
   */
  _getFilter(t) {
    const e = (t.topics || []).map((c) => c == null ? null : Array.isArray(c) ? la(c.map((u) => u.toLowerCase())) : c.toLowerCase()), n = "blockHash" in t ? t.blockHash : void 0, s = (c, u, f) => {
      let h;
      switch (c.length) {
        case 0:
          break;
        case 1:
          h = c[0];
          break;
        default:
          c.sort(), h = c;
      }
      if (n && (u != null || f != null))
        throw new Error("invalid filter");
      const g = {};
      return h && (g.address = h), e.length && (g.topics = e), u && (g.fromBlock = u), f && (g.toBlock = f), n && (g.blockHash = n), g;
    };
    let i = [];
    if (t.address)
      if (Array.isArray(t.address))
        for (const c of t.address)
          i.push(this._getAddress(c));
      else
        i.push(this._getAddress(t.address));
    let o;
    "fromBlock" in t && (o = this._getBlockTag(t.fromBlock));
    let a;
    return "toBlock" in t && (a = this._getBlockTag(t.toBlock)), i.filter((c) => typeof c != "string").length || o != null && typeof o != "string" || a != null && typeof a != "string" ? Promise.all([Promise.all(i), o, a]).then((c) => s(c[0], c[1], c[2])) : s(i, o, a);
  }
  /**
   *  Returns or resovles to a transaction for %%request%%, resolving
   *  any ENS names or [[Addressable]] and returning if already a valid
   *  transaction.
   */
  _getTransactionRequest(t) {
    const e = zi(t), n = [];
    if (["to", "from"].forEach((s) => {
      if (e[s] == null)
        return;
      const i = Ut(e[s], this);
      Ci(i) ? n.push(async function() {
        e[s] = await i;
      }()) : e[s] = i;
    }), e.blockTag != null) {
      const s = this._getBlockTag(e.blockTag);
      Ci(s) ? n.push(async function() {
        e.blockTag = await s;
      }()) : e.blockTag = s;
    }
    return n.length ? async function() {
      return await Promise.all(n), e;
    }() : e;
  }
  async getNetwork() {
    if (l(this, Kt) == null) {
      const s = this._detectNetwork().then((i) => (this.emit("network", i, null), i), (i) => {
        throw l(this, Kt) === s && d(this, Kt, null), i;
      });
      return d(this, Kt, s), (await s).clone();
    }
    const t = l(this, Kt), [e, n] = await Promise.all([
      t,
      this._detectNetwork()
      // The actual connected network
    ]);
    return e.chainId !== n.chainId && (l(this, qn) ? (this.emit("network", n, e), l(this, Kt) === t && d(this, Kt, Promise.resolve(n))) : P(!1, `network changed: ${e.chainId} => ${n.chainId} `, "NETWORK_ERROR", {
      event: "changed"
    })), e.clone();
  }
  async getFeeData() {
    const t = await this.getNetwork(), e = async () => {
      const { _block: s, gasPrice: i, priorityFee: o } = await Rt({
        _block: O(this, ui, da).call(this, "latest", !1),
        gasPrice: (async () => {
          try {
            const f = await O(this, Bt, Vt).call(this, { method: "getGasPrice" });
            return L(f, "%response");
          } catch {
          }
          return null;
        })(),
        priorityFee: (async () => {
          try {
            const f = await O(this, Bt, Vt).call(this, { method: "getPriorityFee" });
            return L(f, "%response");
          } catch {
          }
          return null;
        })()
      });
      let a = null, c = null;
      const u = this._wrapBlock(s, t);
      return u && u.baseFeePerGas && (c = o ?? BigInt("1000000000"), a = u.baseFeePerGas * wg + c), new ru(i, a, c);
    }, n = t.getPlugin("org.ethers.plugins.network.FetchUrlFeeDataPlugin");
    if (n) {
      const s = new Rn(n.url), i = await n.processFunc(e, this, s);
      return new ru(i.gasPrice, i.maxFeePerGas, i.maxPriorityFeePerGas);
    }
    return await e();
  }
  async estimateGas(t) {
    let e = this._getTransactionRequest(t);
    return Ci(e) && (e = await e), L(await O(this, Bt, Vt).call(this, {
      method: "estimateGas",
      transaction: e
    }), "%response");
  }
  async call(t) {
    const { tx: e, blockTag: n } = await Rt({
      tx: this._getTransactionRequest(t),
      blockTag: this._getBlockTag(t.blockTag)
    });
    return await O(this, ci, ha).call(this, O(this, ai, fa).call(this, e, n, t.enableCcipRead ? 0 : -1));
  }
  async getBalance(t, e) {
    return L(await O(this, $n, Ss).call(this, { method: "getBalance" }, t, e), "%response");
  }
  async getTransactionCount(t, e) {
    return V(await O(this, $n, Ss).call(this, { method: "getTransactionCount" }, t, e), "%response");
  }
  async getCode(t, e) {
    return F(await O(this, $n, Ss).call(this, { method: "getCode" }, t, e));
  }
  async getStorage(t, e, n) {
    const s = L(e, "position");
    return F(await O(this, $n, Ss).call(this, { method: "getStorage", position: s }, t, n));
  }
  // Write
  async broadcastTransaction(t) {
    const { blockNumber: e, hash: n, network: s } = await Rt({
      blockNumber: this.getBlockNumber(),
      hash: this._perform({
        method: "broadcastTransaction",
        signedTransaction: t
      }),
      network: this.getNetwork()
    }), i = Ji.from(t);
    if (i.hash !== n)
      throw new Error("@TODO: the returned hash did not match");
    return this._wrapTransactionResponse(i, s).replaceableTransaction(e);
  }
  // Queries
  async getBlock(t, e) {
    const { network: n, params: s } = await Rt({
      network: this.getNetwork(),
      params: O(this, ui, da).call(this, t, !!e)
    });
    return s == null ? null : this._wrapBlock(s, n);
  }
  async getTransaction(t) {
    const { network: e, params: n } = await Rt({
      network: this.getNetwork(),
      params: O(this, Bt, Vt).call(this, { method: "getTransaction", hash: t })
    });
    return n == null ? null : this._wrapTransactionResponse(n, e);
  }
  async getTransactionReceipt(t) {
    const { network: e, params: n } = await Rt({
      network: this.getNetwork(),
      params: O(this, Bt, Vt).call(this, { method: "getTransactionReceipt", hash: t })
    });
    if (n == null)
      return null;
    if (n.gasPrice == null && n.effectiveGasPrice == null) {
      const s = await O(this, Bt, Vt).call(this, { method: "getTransaction", hash: t });
      if (s == null)
        throw new Error("report this; could not find tx or effectiveGasPrice");
      n.effectiveGasPrice = s.gasPrice;
    }
    return this._wrapTransactionReceipt(n, e);
  }
  async getTransactionResult(t) {
    const { result: e } = await Rt({
      network: this.getNetwork(),
      result: O(this, Bt, Vt).call(this, { method: "getTransactionResult", hash: t })
    });
    return e == null ? null : F(e);
  }
  // Bloom-filter Queries
  async getLogs(t) {
    let e = this._getFilter(t);
    Ci(e) && (e = await e);
    const { network: n, params: s } = await Rt({
      network: this.getNetwork(),
      params: O(this, Bt, Vt).call(this, { method: "getLogs", filter: e })
    });
    return s.map((i) => this._wrapLog(i, n));
  }
  // ENS
  _getProvider(t) {
    P(!1, "provider cannot connect to target network", "UNSUPPORTED_OPERATION", {
      operation: "_getProvider()"
    });
  }
  async getResolver(t) {
    return await Wi.fromName(this, t);
  }
  async getAvatar(t) {
    const e = await this.getResolver(t);
    return e ? await e.getAvatar() : null;
  }
  async resolveName(t) {
    const e = await this.getResolver(t);
    return e ? await e.getAddress() : null;
  }
  async lookupAddress(t) {
    t = W(t);
    const e = ra(t.substring(2).toLowerCase() + ".addr.reverse");
    try {
      const n = await Wi.getEnsAddress(this), i = await new In(n, [
        "function resolver(bytes32) view returns (address)"
      ], this).resolver(e);
      if (i == null || i === Xo)
        return null;
      const a = await new In(i, [
        "function name(bytes32) view returns (string)"
      ], this).name(e);
      return await this.resolveName(a) !== t ? null : a;
    } catch (n) {
      if (oe(n, "BAD_DATA") && n.value === "0x" || oe(n, "CALL_EXCEPTION"))
        return null;
      throw n;
    }
    return null;
  }
  async waitForTransaction(t, e, n) {
    const s = e ?? 1;
    return s === 0 ? this.getTransactionReceipt(t) : new Promise(async (i, o) => {
      let a = null;
      const c = async (u) => {
        try {
          const f = await this.getTransactionReceipt(t);
          if (f != null && u - f.blockNumber + 1 >= s) {
            i(f), a && (clearTimeout(a), a = null);
            return;
          }
        } catch (f) {
          console.log("EEE", f);
        }
        this.once("block", c);
      };
      n != null && (a = setTimeout(() => {
        a != null && (a = null, this.off("block", c), o(dt("timeout", "TIMEOUT", { reason: "timeout" })));
      }, n)), c(await this.getBlockNumber());
    });
  }
  async waitForBlock(t) {
    P(!1, "not implemented yet", "NOT_IMPLEMENTED", {
      operation: "waitForBlock"
    });
  }
  /**
   *  Clear a timer created using the [[_setTimeout]] method.
   */
  _clearTimeout(t) {
    const e = l(this, re).get(t);
    e && (e.timer && clearTimeout(e.timer), l(this, re).delete(t));
  }
  /**
   *  Create a timer that will execute %%func%% after at least %%timeout%%
   *  (in ms). If %%timeout%% is unspecified, then %%func%% will execute
   *  in the next event loop.
   *
   *  [Pausing](AbstractProvider-paused) the provider will pause any
   *  associated timers.
   */
  _setTimeout(t, e) {
    e == null && (e = 0);
    const n = Cs(this, oi)._++, s = () => {
      l(this, re).delete(n), t();
    };
    if (this.paused)
      l(this, re).set(n, { timer: null, func: s, time: e });
    else {
      const i = setTimeout(s, e);
      l(this, re).set(n, { timer: i, func: s, time: Ho() });
    }
    return n;
  }
  /**
   *  Perform %%func%% on each subscriber.
   */
  _forEachSubscriber(t) {
    for (const e of l(this, Pt).values())
      t(e.subscriber);
  }
  /**
   *  Sub-classes may override this to customize subscription
   *  implementations.
   */
  _getSubscriber(t) {
    switch (t.type) {
      case "debug":
      case "error":
      case "network":
        return new $l(t.type);
      case "block": {
        const e = new pg(this);
        return e.pollingInterval = this.pollingInterval, e;
      }
      case "safe":
      case "finalized":
        return new gg(this, t.type);
      case "event":
        return new Ha(this, t.filter);
      case "transaction":
        return new mg(this, t.hash);
      case "orphan":
        return new yg(this, t.filter);
    }
    throw new Error(`unsupported event: ${t.type}`);
  }
  /**
   *  If a [[Subscriber]] fails and needs to replace itself, this
   *  method may be used.
   *
   *  For example, this is used for providers when using the
   *  ``eth_getFilterChanges`` method, which can return null if state
   *  filters are not supported by the backend, allowing the Subscriber
   *  to swap in a [[PollingEventSubscriber]].
   */
  _recoverSubscriber(t, e) {
    for (const n of l(this, Pt).values())
      if (n.subscriber === t) {
        n.started && n.subscriber.stop(), n.subscriber = e, n.started && e.start(), l(this, Nt) != null && e.pause(l(this, Nt));
        break;
      }
  }
  async on(t, e) {
    const n = await O(this, ds, Fi).call(this, t);
    return n.listeners.push({ listener: e, once: !1 }), n.started || (n.subscriber.start(), n.started = !0, l(this, Nt) != null && n.subscriber.pause(l(this, Nt))), this;
  }
  async once(t, e) {
    const n = await O(this, ds, Fi).call(this, t);
    return n.listeners.push({ listener: e, once: !0 }), n.started || (n.subscriber.start(), n.started = !0, l(this, Nt) != null && n.subscriber.pause(l(this, Nt))), this;
  }
  async emit(t, ...e) {
    const n = await O(this, tr, Us).call(this, t, e);
    if (!n || n.listeners.length === 0)
      return !1;
    const s = n.listeners.length;
    return n.listeners = n.listeners.filter(({ listener: i, once: o }) => {
      const a = new vu(this, o ? null : i, t);
      try {
        i.call(this, ...e, a);
      } catch {
      }
      return !o;
    }), n.listeners.length === 0 && (n.started && n.subscriber.stop(), l(this, Pt).delete(n.tag)), s > 0;
  }
  async listenerCount(t) {
    if (t) {
      const n = await O(this, tr, Us).call(this, t);
      return n ? n.listeners.length : 0;
    }
    let e = 0;
    for (const { listeners: n } of l(this, Pt).values())
      e += n.length;
    return e;
  }
  async listeners(t) {
    if (t) {
      const n = await O(this, tr, Us).call(this, t);
      return n ? n.listeners.map(({ listener: s }) => s) : [];
    }
    let e = [];
    for (const { listeners: n } of l(this, Pt).values())
      e = e.concat(n.map(({ listener: s }) => s));
    return e;
  }
  async off(t, e) {
    const n = await O(this, tr, Us).call(this, t);
    if (!n)
      return this;
    if (e) {
      const s = n.listeners.map(({ listener: i }) => i).indexOf(e);
      s >= 0 && n.listeners.splice(s, 1);
    }
    return (!e || n.listeners.length === 0) && (n.started && n.subscriber.stop(), l(this, Pt).delete(n.tag)), this;
  }
  async removeAllListeners(t) {
    if (t) {
      const { tag: e, started: n, subscriber: s } = await O(this, ds, Fi).call(this, t);
      n && s.stop(), l(this, Pt).delete(e);
    } else
      for (const [e, { started: n, subscriber: s }] of l(this, Pt))
        n && s.stop(), l(this, Pt).delete(e);
    return this;
  }
  // Alias for "on"
  async addListener(t, e) {
    return await this.on(t, e);
  }
  // Alias for "off"
  async removeListener(t, e) {
    return this.off(t, e);
  }
  /**
   *  If this provider has been destroyed using the [[destroy]] method.
   *
   *  Once destroyed, all resources are reclaimed, internal event loops
   *  and timers are cleaned up and no further requests may be sent to
   *  the provider.
   */
  get destroyed() {
    return l(this, ls);
  }
  /**
   *  Sub-classes may use this to shutdown any sockets or release their
   *  resources and reject any pending requests.
   *
   *  Sub-classes **must** call ``super.destroy()``.
   */
  destroy() {
    this.removeAllListeners();
    for (const t of l(this, re).keys())
      this._clearTimeout(t);
    d(this, ls, !0);
  }
  /**
   *  Whether the provider is currently paused.
   *
   *  A paused provider will not emit any events, and generally should
   *  not make any requests to the network, but that is up to sub-classes
   *  to manage.
   *
   *  Setting ``paused = true`` is identical to calling ``.pause(false)``,
   *  which will buffer any events that occur while paused until the
   *  provider is unpaused.
   */
  get paused() {
    return l(this, Nt) != null;
  }
  set paused(t) {
    !!t !== this.paused && (this.paused ? this.resume() : this.pause(!1));
  }
  /**
   *  Pause the provider. If %%dropWhilePaused%%, any events that occur
   *  while paused are dropped, otherwise all events will be emitted once
   *  the provider is unpaused.
   */
  pause(t) {
    if (d(this, Xe, -1), l(this, Nt) != null) {
      if (l(this, Nt) == !!t)
        return;
      P(!1, "cannot change pause type; resume first", "UNSUPPORTED_OPERATION", {
        operation: "pause"
      });
    }
    this._forEachSubscriber((e) => e.pause(t)), d(this, Nt, !!t);
    for (const e of l(this, re).values())
      e.timer && clearTimeout(e.timer), e.time = Ho() - e.time;
  }
  /**
   *  Resume the provider.
   */
  resume() {
    if (l(this, Nt) != null) {
      this._forEachSubscriber((t) => t.resume()), d(this, Nt, null);
      for (const t of l(this, re).values()) {
        let e = t.time;
        e < 0 && (e = 0), t.time = Ho(), setTimeout(t.func, e);
      }
    }
  }
}
Pt = new WeakMap(), Pn = new WeakMap(), Nt = new WeakMap(), ls = new WeakMap(), Kt = new WeakMap(), qn = new WeakMap(), Nn = new WeakMap(), Xe = new WeakMap(), oi = new WeakMap(), re = new WeakMap(), fs = new WeakMap(), hs = new WeakMap(), Bt = new WeakSet(), Vt = async function(t) {
  const e = l(this, hs).cacheTimeout;
  if (e < 0)
    return await this._perform(t);
  const n = Di(t.method, t);
  let s = l(this, Nn).get(n);
  return s || (s = this._perform(t), l(this, Nn).set(n, s), setTimeout(() => {
    l(this, Nn).get(n) === s && l(this, Nn).delete(n);
  }, e)), await s;
}, ai = new WeakSet(), fa = async function(t, e, n) {
  P(n < Ag, "CCIP read exceeded maximum redirections", "OFFCHAIN_FAULT", {
    reason: "TOO_MANY_REDIRECTS",
    transaction: Object.assign({}, t, { blockTag: e, enableCcipRead: !0 })
  });
  const s = zi(t);
  try {
    return F(await this._perform({ method: "call", transaction: s, blockTag: e }));
  } catch (i) {
    if (!this.disableCcipRead && ba(i) && i.data && n >= 0 && e === "latest" && s.to != null && at(i.data, 0, 4) === "0x556f1830") {
      const o = i.data, a = await Ut(s.to, this);
      let c;
      try {
        c = Tg(at(i.data, 4));
      } catch (h) {
        P(!1, h.message, "OFFCHAIN_FAULT", {
          reason: "BAD_DATA",
          transaction: s,
          info: { data: o }
        });
      }
      P(c.sender.toLowerCase() === a.toLowerCase(), "CCIP Read sender mismatch", "CALL_EXCEPTION", {
        action: "call",
        data: o,
        reason: "OffchainLookup",
        transaction: s,
        invocation: null,
        revert: {
          signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
          name: "OffchainLookup",
          args: c.errorArgs
        }
      });
      const u = await this.ccipReadFetch(s, c.calldata, c.urls);
      P(u != null, "CCIP Read failed to fetch data", "OFFCHAIN_FAULT", {
        reason: "FETCH_FAILED",
        transaction: s,
        info: { data: i.data, errorArgs: c.errorArgs }
      });
      const f = {
        to: a,
        data: pt([c.selector, Cg([u, c.extraData])])
      };
      this.emit("debug", { action: "sendCcipReadCall", transaction: f });
      try {
        const h = await O(this, ai, fa).call(this, f, e, n + 1);
        return this.emit("debug", { action: "receiveCcipReadCallResult", transaction: Object.assign({}, f), result: h }), h;
      } catch (h) {
        throw this.emit("debug", { action: "receiveCcipReadCallError", transaction: Object.assign({}, f), error: h }), h;
      }
    }
    throw i;
  }
}, ci = new WeakSet(), ha = async function(t) {
  const { value: e } = await Rt({
    network: this.getNetwork(),
    value: t
  });
  return e;
}, $n = new WeakSet(), Ss = async function(t, e, n) {
  let s = this._getAddress(e), i = this._getBlockTag(n);
  return (typeof s != "string" || typeof i != "string") && ([s, i] = await Promise.all([s, i])), await O(this, ci, ha).call(this, O(this, Bt, Vt).call(this, Object.assign(t, { address: s, blockTag: i })));
}, ui = new WeakSet(), da = async function(t, e) {
  if (ot(t, 32))
    return await O(this, Bt, Vt).call(this, {
      method: "getBlock",
      blockHash: t,
      includeTransactions: e
    });
  let n = this._getBlockTag(t);
  return typeof n != "string" && (n = await n), await O(this, Bt, Vt).call(this, {
    method: "getBlock",
    blockTag: n,
    includeTransactions: e
  });
}, tr = new WeakSet(), Us = async function(t, e) {
  let n = await Qo(t, this);
  return n.type === "event" && e && e.length > 0 && e[0].removed === !0 && (n = await Qo({ orphan: "drop-log", log: e[0] }, this)), l(this, Pt).get(n.tag) || null;
}, ds = new WeakSet(), Fi = async function(t) {
  const e = await Qo(t, this), n = e.tag;
  let s = l(this, Pt).get(n);
  return s || (s = { subscriber: this._getSubscriber(e), tag: n, addressableMap: /* @__PURE__ */ new WeakMap(), nameMap: /* @__PURE__ */ new Map(), started: !1, listeners: [] }, l(this, Pt).set(n, s)), s;
};
function xg(r, t) {
  try {
    const e = pa(r, t);
    if (e)
      return va(e);
  } catch {
  }
  return null;
}
function pa(r, t) {
  if (r === "0x")
    return null;
  try {
    const e = V(at(r, t, t + 32)), n = V(at(r, e, e + 32));
    return at(r, e + 32, e + 32 + n);
  } catch {
  }
  return null;
}
function fu(r) {
  const t = Yt(r);
  if (t.length > 32)
    throw new Error("internal; should not happen");
  const e = new Uint8Array(32);
  return e.set(t, 32 - t.length), e;
}
function Pg(r) {
  if (r.length % 32 === 0)
    return r;
  const t = new Uint8Array(Math.ceil(r.length / 32) * 32);
  return t.set(r), t;
}
const Ng = new Uint8Array([]);
function Cg(r) {
  const t = [];
  let e = 0;
  for (let n = 0; n < r.length; n++)
    t.push(Ng), e += 32;
  for (let n = 0; n < r.length; n++) {
    const s = X(r[n]);
    t[n] = fu(e), t.push(fu(s.length)), t.push(Pg(s)), e += 32 + Math.ceil(s.length / 32) * 32;
  }
  return pt(t);
}
const hu = "0x0000000000000000000000000000000000000000000000000000000000000000";
function Tg(r) {
  const t = {
    sender: "",
    urls: [],
    calldata: "",
    selector: "",
    extraData: "",
    errorArgs: []
  };
  P(Ir(r) >= 5 * 32, "insufficient OffchainLookup data", "OFFCHAIN_FAULT", {
    reason: "insufficient OffchainLookup data"
  });
  const e = at(r, 0, 32);
  P(at(e, 0, 12) === at(hu, 0, 12), "corrupt OffchainLookup sender", "OFFCHAIN_FAULT", {
    reason: "corrupt OffchainLookup sender"
  }), t.sender = at(e, 12);
  try {
    const n = [], s = V(at(r, 32, 64)), i = V(at(r, s, s + 32)), o = at(r, s + 32);
    for (let a = 0; a < i; a++) {
      const c = xg(o, a * 32);
      if (c == null)
        throw new Error("abort");
      n.push(c);
    }
    t.urls = n;
  } catch {
    P(!1, "corrupt OffchainLookup urls", "OFFCHAIN_FAULT", {
      reason: "corrupt OffchainLookup urls"
    });
  }
  try {
    const n = pa(r, 64);
    if (n == null)
      throw new Error("abort");
    t.calldata = n;
  } catch {
    P(!1, "corrupt OffchainLookup calldata", "OFFCHAIN_FAULT", {
      reason: "corrupt OffchainLookup calldata"
    });
  }
  P(at(r, 100, 128) === at(hu, 0, 28), "corrupt OffchainLookup callbaackSelector", "OFFCHAIN_FAULT", {
    reason: "corrupt OffchainLookup callbaackSelector"
  }), t.selector = at(r, 96, 100);
  try {
    const n = pa(r, 128);
    if (n == null)
      throw new Error("abort");
    t.extraData = n;
  } catch {
    P(!1, "corrupt OffchainLookup extraData", "OFFCHAIN_FAULT", {
      reason: "corrupt OffchainLookup extraData"
    });
  }
  return t.errorArgs = "sender,urls,calldata,selector,extraData".split(/,/).map((n) => t[n]), t;
}
function mr(r, t) {
  if (r.provider)
    return r.provider;
  P(!1, "missing provider", "UNSUPPORTED_OPERATION", { operation: t });
}
async function du(r, t) {
  let e = zi(t);
  if (e.to != null && (e.to = Ut(e.to, r)), e.from != null) {
    const n = e.from;
    e.from = Promise.all([
      r.getAddress(),
      Ut(n, r)
    ]).then(([s, i]) => (y(s.toLowerCase() === i.toLowerCase(), "transaction from mismatch", "tx.from", i), s));
  } else
    e.from = r.getAddress();
  return await Rt(e);
}
class Og {
  /**
   *  Creates a new Signer connected to %%provider%%.
   */
  constructor(t) {
    /**
     *  The provider this signer is connected to.
     */
    A(this, "provider");
    M(this, { provider: t || null });
  }
  async getNonce(t) {
    return mr(this, "getTransactionCount").getTransactionCount(await this.getAddress(), t);
  }
  async populateCall(t) {
    return await du(this, t);
  }
  async populateTransaction(t) {
    const e = mr(this, "populateTransaction"), n = await du(this, t);
    n.nonce == null && (n.nonce = await this.getNonce("pending")), n.gasLimit == null && (n.gasLimit = await this.estimateGas(n));
    const s = await this.provider.getNetwork();
    if (n.chainId != null) {
      const o = L(n.chainId);
      y(o === s.chainId, "transaction chainId mismatch", "tx.chainId", t.chainId);
    } else
      n.chainId = s.chainId;
    const i = n.maxFeePerGas != null || n.maxPriorityFeePerGas != null;
    if (n.gasPrice != null && (n.type === 2 || i) ? y(!1, "eip-1559 transaction do not support gasPrice", "tx", t) : (n.type === 0 || n.type === 1) && i && y(!1, "pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "tx", t), (n.type === 2 || n.type == null) && n.maxFeePerGas != null && n.maxPriorityFeePerGas != null)
      n.type = 2;
    else if (n.type === 0 || n.type === 1) {
      const o = await e.getFeeData();
      P(o.gasPrice != null, "network does not support gasPrice", "UNSUPPORTED_OPERATION", {
        operation: "getGasPrice"
      }), n.gasPrice == null && (n.gasPrice = o.gasPrice);
    } else {
      const o = await e.getFeeData();
      if (n.type == null)
        if (o.maxFeePerGas != null && o.maxPriorityFeePerGas != null)
          if (n.type = 2, n.gasPrice != null) {
            const a = n.gasPrice;
            delete n.gasPrice, n.maxFeePerGas = a, n.maxPriorityFeePerGas = a;
          } else
            n.maxFeePerGas == null && (n.maxFeePerGas = o.maxFeePerGas), n.maxPriorityFeePerGas == null && (n.maxPriorityFeePerGas = o.maxPriorityFeePerGas);
        else
          o.gasPrice != null ? (P(!i, "network does not support EIP-1559", "UNSUPPORTED_OPERATION", {
            operation: "populateTransaction"
          }), n.gasPrice == null && (n.gasPrice = o.gasPrice), n.type = 0) : P(!1, "failed to get consistent fee data", "UNSUPPORTED_OPERATION", {
            operation: "signer.getFeeData"
          });
      else
        n.type === 2 && (n.maxFeePerGas == null && (n.maxFeePerGas = o.maxFeePerGas), n.maxPriorityFeePerGas == null && (n.maxPriorityFeePerGas = o.maxPriorityFeePerGas));
    }
    return await Rt(n);
  }
  async estimateGas(t) {
    return mr(this, "estimateGas").estimateGas(await this.populateCall(t));
  }
  async call(t) {
    return mr(this, "call").call(await this.populateCall(t));
  }
  async resolveName(t) {
    return await mr(this, "resolveName").resolveName(t);
  }
  async sendTransaction(t) {
    const e = mr(this, "sendTransaction"), n = await this.populateTransaction(t);
    delete n.from;
    const s = Ji.from(n);
    return await e.broadcastTransaction(await this.signTransaction(s));
  }
}
function Ig(r) {
  return JSON.parse(JSON.stringify(r));
}
var Lt, Oe, er, Cn, nr, ps, li, ga, fi, ya;
class tf {
  /**
   *  Creates a new **FilterIdSubscriber** which will used [[_subscribe]]
   *  and [[_emitResults]] to setup the subscription and provide the event
   *  to the %%provider%%.
   */
  constructor(t) {
    b(this, li);
    b(this, fi);
    b(this, Lt, void 0);
    b(this, Oe, void 0);
    b(this, er, void 0);
    b(this, Cn, void 0);
    b(this, nr, void 0);
    b(this, ps, void 0);
    d(this, Lt, t), d(this, Oe, null), d(this, er, O(this, li, ga).bind(this)), d(this, Cn, !1), d(this, nr, null), d(this, ps, !1);
  }
  /**
   *  Sub-classes **must** override this to begin the subscription.
   */
  _subscribe(t) {
    throw new Error("subclasses must override this");
  }
  /**
   *  Sub-classes **must** override this handle the events.
   */
  _emitResults(t, e) {
    throw new Error("subclasses must override this");
  }
  /**
   *  Sub-classes **must** override this handle recovery on errors.
   */
  _recover(t) {
    throw new Error("subclasses must override this");
  }
  start() {
    l(this, Cn) || (d(this, Cn, !0), O(this, li, ga).call(this, -2));
  }
  stop() {
    l(this, Cn) && (d(this, Cn, !1), d(this, ps, !0), O(this, fi, ya).call(this), l(this, Lt).off("block", l(this, er)));
  }
  pause(t) {
    t && O(this, fi, ya).call(this), l(this, Lt).off("block", l(this, er));
  }
  resume() {
    this.start();
  }
}
Lt = new WeakMap(), Oe = new WeakMap(), er = new WeakMap(), Cn = new WeakMap(), nr = new WeakMap(), ps = new WeakMap(), li = new WeakSet(), ga = async function(t) {
  try {
    l(this, Oe) == null && d(this, Oe, this._subscribe(l(this, Lt)));
    let e = null;
    try {
      e = await l(this, Oe);
    } catch (i) {
      if (!oe(i, "UNSUPPORTED_OPERATION") || i.operation !== "eth_newFilter")
        throw i;
    }
    if (e == null) {
      d(this, Oe, null), l(this, Lt)._recoverSubscriber(this, this._recover(l(this, Lt)));
      return;
    }
    const n = await l(this, Lt).getNetwork();
    if (l(this, nr) || d(this, nr, n), l(this, nr).chainId !== n.chainId)
      throw new Error("chaid changed");
    if (l(this, ps))
      return;
    const s = await l(this, Lt).send("eth_getFilterChanges", [e]);
    await this._emitResults(l(this, Lt), s);
  } catch (e) {
    console.log("@TODO", e);
  }
  l(this, Lt).once("block", l(this, er));
}, fi = new WeakSet(), ya = function() {
  const t = l(this, Oe);
  t && (d(this, Oe, null), t.then((e) => {
    l(this, Lt).send("eth_uninstallFilter", [e]);
  }));
};
var rr;
class Bg extends tf {
  /**
   *  Creates a new **FilterIdEventSubscriber** attached to %%provider%%
   *  listening for %%filter%%.
   */
  constructor(e, n) {
    super(e);
    b(this, rr, void 0);
    d(this, rr, Ig(n));
  }
  _recover(e) {
    return new Ha(e, l(this, rr));
  }
  async _subscribe(e) {
    return await e.send("eth_newFilter", [l(this, rr)]);
  }
  async _emitResults(e, n) {
    for (const s of n)
      e.emit(l(this, rr), e._wrapLog(s, e._network));
  }
}
rr = new WeakMap();
class Rg extends tf {
  async _subscribe(t) {
    return await t.send("eth_newPendingTransactionFilter", []);
  }
  async _emitResults(t, e) {
    for (const n of e)
      t.emit("pending", n);
  }
}
const kg = "bigint,boolean,function,number,string,symbol".split(/,/g);
function Li(r) {
  if (r == null || kg.indexOf(typeof r) >= 0 || typeof r.getAddress == "function")
    return r;
  if (Array.isArray(r))
    return r.map(Li);
  if (typeof r == "object")
    return Object.keys(r).reduce((t, e) => (t[e] = r[e], t), {});
  throw new Error(`should not happen: ${r} (${typeof r})`);
}
function Sg(r) {
  return new Promise((t) => {
    setTimeout(t, r);
  });
}
function wr(r) {
  return r && r.toLowerCase();
}
function pu(r) {
  return r && typeof r.pollingInterval == "number";
}
const Ug = {
  polling: !1,
  staticNetwork: null,
  batchStallTime: 10,
  batchMaxSize: 1 << 20,
  batchMaxCount: 100,
  cacheTimeout: 250,
  pollingInterval: 4e3
};
class _o extends Og {
  constructor(e, n) {
    super(e);
    A(this, "address");
    n = W(n), M(this, { address: n });
  }
  connect(e) {
    P(!1, "cannot reconnect JsonRpcSigner", "UNSUPPORTED_OPERATION", {
      operation: "signer.connect"
    });
  }
  async getAddress() {
    return this.address;
  }
  // JSON-RPC will automatially fill in nonce, etc. so we just check from
  async populateTransaction(e) {
    return await this.populateCall(e);
  }
  // Returns just the hash of the transaction after sent, which is what
  // the bare JSON-RPC API does;
  async sendUncheckedTransaction(e) {
    const n = Li(e), s = [];
    if (n.from) {
      const o = n.from;
      s.push((async () => {
        const a = await Ut(o, this.provider);
        y(a != null && a.toLowerCase() === this.address.toLowerCase(), "from address mismatch", "transaction", e), n.from = a;
      })());
    } else
      n.from = this.address;
    if (n.gasLimit == null && s.push((async () => {
      n.gasLimit = await this.provider.estimateGas({ ...n, from: this.address });
    })()), n.to != null) {
      const o = n.to;
      s.push((async () => {
        n.to = await Ut(o, this.provider);
      })());
    }
    s.length && await Promise.all(s);
    const i = this.provider.getRpcTransaction(n);
    return this.provider.send("eth_sendTransaction", [i]);
  }
  async sendTransaction(e) {
    const n = await this.provider.getBlockNumber(), s = await this.sendUncheckedTransaction(e);
    return await new Promise((i, o) => {
      const a = [1e3, 100], c = async () => {
        const u = await this.provider.getTransaction(s);
        if (u != null) {
          i(u.replaceableTransaction(n));
          return;
        }
        this.provider._setTimeout(() => {
          c();
        }, a.pop() || 4e3);
      };
      c();
    });
  }
  async signTransaction(e) {
    const n = Li(e);
    if (n.from) {
      const i = await Ut(n.from, this.provider);
      y(i != null && i.toLowerCase() === this.address.toLowerCase(), "from address mismatch", "transaction", e), n.from = i;
    } else
      n.from = this.address;
    const s = this.provider.getRpcTransaction(n);
    return await this.provider.send("eth_signTransaction", [s]);
  }
  async signMessage(e) {
    const n = typeof e == "string" ? en(e) : e;
    return await this.provider.send("personal_sign", [
      F(n),
      this.address.toLowerCase()
    ]);
  }
  async signTypedData(e, n, s) {
    const i = Li(s), o = await ji.resolveNames(e, n, i, async (a) => {
      const c = await Ut(a);
      return y(c != null, "TypedData does not support null address", "value", a), c;
    });
    return await this.provider.send("eth_signTypedData_v4", [
      this.address.toLowerCase(),
      JSON.stringify(ji.getPayload(o.domain, n, o.value))
    ]);
  }
  async unlock(e) {
    return this.provider.send("personal_unlockAccount", [
      this.address.toLowerCase(),
      e,
      null
    ]);
  }
  // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign
  async _legacySignMessage(e) {
    const n = typeof e == "string" ? en(e) : e;
    return await this.provider.send("eth_sign", [
      this.address.toLowerCase(),
      F(n)
    ]);
  }
}
var sr, gs, qe, Ie, ye, se, Wt, hi, ma;
class Dg extends vg {
  constructor(e, n) {
    super(e, n);
    b(this, hi);
    b(this, sr, void 0);
    // The next ID to use for the JSON-RPC ID field
    b(this, gs, void 0);
    // Payloads are queued and triggered in batches using the drainTimer
    b(this, qe, void 0);
    b(this, Ie, void 0);
    b(this, ye, void 0);
    b(this, se, void 0);
    b(this, Wt, void 0);
    d(this, gs, 1), d(this, sr, Object.assign({}, Ug, n || {})), d(this, qe, []), d(this, Ie, null), d(this, se, null), d(this, Wt, null);
    {
      let i = null;
      const o = new Promise((a) => {
        i = a;
      });
      d(this, ye, { promise: o, resolve: i });
    }
    const s = this._getOption("staticNetwork");
    typeof s == "boolean" ? (y(!s || e !== "any", "staticNetwork cannot be used on special network 'any'", "options", n), s && e != null && d(this, se, ke.from(e))) : s && (y(e == null || s.matches(e), "staticNetwork MUST match network object", "options", n), d(this, se, s));
  }
  /**
   *  Returns the value associated with the option %%key%%.
   *
   *  Sub-classes can use this to inquire about configuration options.
   */
  _getOption(e) {
    return l(this, sr)[e];
  }
  /**
   *  Gets the [[Network]] this provider has committed to. On each call, the network
   *  is detected, and if it has changed, the call will reject.
   */
  get _network() {
    return P(l(this, se), "network is not available yet", "NETWORK_ERROR"), l(this, se);
  }
  /**
   *  Resolves to the non-normalized value by performing %%req%%.
   *
   *  Sub-classes may override this to modify behavior of actions,
   *  and should generally call ``super._perform`` as a fallback.
   */
  async _perform(e) {
    if (e.method === "call" || e.method === "estimateGas") {
      let s = e.transaction;
      if (s && s.type != null && L(s.type) && s.maxFeePerGas == null && s.maxPriorityFeePerGas == null) {
        const i = await this.getFeeData();
        i.maxFeePerGas == null && i.maxPriorityFeePerGas == null && (e = Object.assign({}, e, {
          transaction: Object.assign({}, s, { type: void 0 })
        }));
      }
    }
    const n = this.getRpcRequest(e);
    return n != null ? await this.send(n.method, n.args) : super._perform(e);
  }
  /**
   *  Sub-classes may override this; it detects the *actual* network that
   *  we are **currently** connected to.
   *
   *  Keep in mind that [[send]] may only be used once [[ready]], otherwise the
   *  _send primitive must be used instead.
   */
  async _detectNetwork() {
    const e = this._getOption("staticNetwork");
    if (e)
      if (e === !0) {
        if (l(this, se))
          return l(this, se);
      } else
        return e;
    return l(this, Wt) ? await l(this, Wt) : this.ready ? (d(this, Wt, (async () => {
      const n = ke.from(L(await this.send("eth_chainId", [])));
      return d(this, Wt, null), n;
    })()), await l(this, Wt)) : (d(this, Wt, (async () => {
      const n = {
        id: Cs(this, gs)._++,
        method: "eth_chainId",
        params: [],
        jsonrpc: "2.0"
      };
      this.emit("debug", { action: "sendRpcPayload", payload: n });
      let s;
      try {
        s = (await this._send(n))[0], d(this, Wt, null);
      } catch (i) {
        throw d(this, Wt, null), this.emit("debug", { action: "receiveRpcError", error: i }), i;
      }
      if (this.emit("debug", { action: "receiveRpcResult", result: s }), "result" in s)
        return ke.from(L(s.result));
      throw this.getRpcError(n, s);
    })()), await l(this, Wt));
  }
  /**
   *  Sub-classes **MUST** call this. Until [[_start]] has been called, no calls
   *  will be passed to [[_send]] from [[send]]. If it is overridden, then
   *  ``super._start()`` **MUST** be called.
   *
   *  Calling it multiple times is safe and has no effect.
   */
  _start() {
    l(this, ye) == null || l(this, ye).resolve == null || (l(this, ye).resolve(), d(this, ye, null), (async () => {
      for (; l(this, se) == null && !this.destroyed; )
        try {
          d(this, se, await this._detectNetwork());
        } catch (e) {
          if (this.destroyed)
            break;
          console.log("JsonRpcProvider failed to detect network and cannot start up; retry in 1s (perhaps the URL is wrong or the node is not started)"), this.emit("error", dt("failed to bootstrap network detection", "NETWORK_ERROR", { event: "initial-network-discovery", info: { error: e } })), await Sg(1e3);
        }
      O(this, hi, ma).call(this);
    })());
  }
  /**
   *  Resolves once the [[_start]] has been called. This can be used in
   *  sub-classes to defer sending data until the connection has been
   *  established.
   */
  async _waitUntilReady() {
    if (l(this, ye) != null)
      return await l(this, ye).promise;
  }
  /**
   *  Return a Subscriber that will manage the %%sub%%.
   *
   *  Sub-classes may override this to modify the behavior of
   *  subscription management.
   */
  _getSubscriber(e) {
    return e.type === "pending" ? new Rg(this) : e.type === "event" ? this._getOption("polling") ? new Ha(this, e.filter) : new Bg(this, e.filter) : e.type === "orphan" && e.filter.orphan === "drop-log" ? new $l("orphan") : super._getSubscriber(e);
  }
  /**
   *  Returns true only if the [[_start]] has been called.
   */
  get ready() {
    return l(this, ye) == null;
  }
  /**
   *  Returns %%tx%% as a normalized JSON-RPC transaction request,
   *  which has all values hexlified and any numeric values converted
   *  to Quantity values.
   */
  getRpcTransaction(e) {
    const n = {};
    return ["chainId", "gasLimit", "gasPrice", "type", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "value"].forEach((s) => {
      if (e[s] == null)
        return;
      let i = s;
      s === "gasLimit" && (i = "gas"), n[i] = Pr(L(e[s], `tx.${s}`));
    }), ["from", "to", "data"].forEach((s) => {
      e[s] != null && (n[s] = F(e[s]));
    }), e.accessList && (n.accessList = hr(e.accessList)), n;
  }
  /**
   *  Returns the request method and arguments required to perform
   *  %%req%%.
   */
  getRpcRequest(e) {
    switch (e.method) {
      case "chainId":
        return { method: "eth_chainId", args: [] };
      case "getBlockNumber":
        return { method: "eth_blockNumber", args: [] };
      case "getGasPrice":
        return { method: "eth_gasPrice", args: [] };
      case "getPriorityFee":
        return { method: "eth_maxPriorityFeePerGas", args: [] };
      case "getBalance":
        return {
          method: "eth_getBalance",
          args: [wr(e.address), e.blockTag]
        };
      case "getTransactionCount":
        return {
          method: "eth_getTransactionCount",
          args: [wr(e.address), e.blockTag]
        };
      case "getCode":
        return {
          method: "eth_getCode",
          args: [wr(e.address), e.blockTag]
        };
      case "getStorage":
        return {
          method: "eth_getStorageAt",
          args: [
            wr(e.address),
            "0x" + e.position.toString(16),
            e.blockTag
          ]
        };
      case "broadcastTransaction":
        return {
          method: "eth_sendRawTransaction",
          args: [e.signedTransaction]
        };
      case "getBlock":
        if ("blockTag" in e)
          return {
            method: "eth_getBlockByNumber",
            args: [e.blockTag, !!e.includeTransactions]
          };
        if ("blockHash" in e)
          return {
            method: "eth_getBlockByHash",
            args: [e.blockHash, !!e.includeTransactions]
          };
        break;
      case "getTransaction":
        return {
          method: "eth_getTransactionByHash",
          args: [e.hash]
        };
      case "getTransactionReceipt":
        return {
          method: "eth_getTransactionReceipt",
          args: [e.hash]
        };
      case "call":
        return {
          method: "eth_call",
          args: [this.getRpcTransaction(e.transaction), e.blockTag]
        };
      case "estimateGas":
        return {
          method: "eth_estimateGas",
          args: [this.getRpcTransaction(e.transaction)]
        };
      case "getLogs":
        return e.filter && e.filter.address != null && (Array.isArray(e.filter.address) ? e.filter.address = e.filter.address.map(wr) : e.filter.address = wr(e.filter.address)), { method: "eth_getLogs", args: [e.filter] };
    }
    return null;
  }
  /**
   *  Returns an ethers-style Error for the given JSON-RPC error
   *  %%payload%%, coalescing the various strings and error shapes
   *  that different nodes return, coercing them into a machine-readable
   *  standardized error.
   */
  getRpcError(e, n) {
    const { method: s } = e, { error: i } = n;
    if (s === "eth_estimateGas" && i.message) {
      const c = i.message;
      if (!c.match(/revert/i) && c.match(/insufficient funds/i))
        return dt("insufficient funds", "INSUFFICIENT_FUNDS", {
          transaction: e.params[0],
          info: { payload: e, error: i }
        });
    }
    if (s === "eth_call" || s === "eth_estimateGas") {
      const c = wa(i), u = Ks.getBuiltinCallException(s === "eth_call" ? "call" : "estimateGas", e.params[0], c ? c.data : null);
      return u.info = { error: i, payload: e }, u;
    }
    const o = JSON.stringify(Lg(i));
    if (typeof i.message == "string" && i.message.match(/user denied|ethers-user-denied/i))
      return dt("user rejected action", "ACTION_REJECTED", {
        action: {
          eth_sign: "signMessage",
          personal_sign: "signMessage",
          eth_signTypedData_v4: "signTypedData",
          eth_signTransaction: "signTransaction",
          eth_sendTransaction: "sendTransaction",
          eth_requestAccounts: "requestAccess",
          wallet_requestAccounts: "requestAccess"
        }[s] || "unknown",
        reason: "rejected",
        info: { payload: e, error: i }
      });
    if (s === "eth_sendRawTransaction" || s === "eth_sendTransaction") {
      const c = e.params[0];
      if (o.match(/insufficient funds|base fee exceeds gas limit/i))
        return dt("insufficient funds for intrinsic transaction cost", "INSUFFICIENT_FUNDS", {
          transaction: c,
          info: { error: i }
        });
      if (o.match(/nonce/i) && o.match(/too low/i))
        return dt("nonce has already been used", "NONCE_EXPIRED", { transaction: c, info: { error: i } });
      if (o.match(/replacement transaction/i) && o.match(/underpriced/i))
        return dt("replacement fee too low", "REPLACEMENT_UNDERPRICED", { transaction: c, info: { error: i } });
      if (o.match(/only replay-protected/i))
        return dt("legacy pre-eip-155 transactions not supported", "UNSUPPORTED_OPERATION", {
          operation: s,
          info: { transaction: c, info: { error: i } }
        });
    }
    let a = !!o.match(/the method .* does not exist/i);
    return a || i && i.details && i.details.startsWith("Unauthorized method:") && (a = !0), a ? dt("unsupported operation", "UNSUPPORTED_OPERATION", {
      operation: e.method,
      info: { error: i, payload: e }
    }) : dt("could not coalesce error", "UNKNOWN_ERROR", { error: i, payload: e });
  }
  /**
   *  Requests the %%method%% with %%params%% via the JSON-RPC protocol
   *  over the underlying channel. This can be used to call methods
   *  on the backend that do not have a high-level API within the Provider
   *  API.
   *
   *  This method queues requests according to the batch constraints
   *  in the options, assigns the request a unique ID.
   *
   *  **Do NOT override** this method in sub-classes; instead
   *  override [[_send]] or force the options values in the
   *  call to the constructor to modify this method's behavior.
   */
  send(e, n) {
    if (this.destroyed)
      return Promise.reject(dt("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: e }));
    const s = Cs(this, gs)._++, i = new Promise((o, a) => {
      l(this, qe).push({
        resolve: o,
        reject: a,
        payload: { method: e, params: n, id: s, jsonrpc: "2.0" }
      });
    });
    return O(this, hi, ma).call(this), i;
  }
  /**
   *  Resolves to the [[Signer]] account for  %%address%% managed by
   *  the client.
   *
   *  If the %%address%% is a number, it is used as an index in the
   *  the accounts from [[listAccounts]].
   *
   *  This can only be used on clients which manage accounts (such as
   *  Geth with imported account or MetaMask).
   *
   *  Throws if the account doesn't exist.
   */
  async getSigner(e) {
    e == null && (e = 0);
    const n = this.send("eth_accounts", []);
    if (typeof e == "number") {
      const i = await n;
      if (e >= i.length)
        throw new Error("no such account");
      return new _o(this, i[e]);
    }
    const { accounts: s } = await Rt({
      network: this.getNetwork(),
      accounts: n
    });
    e = W(e);
    for (const i of s)
      if (W(i) === e)
        return new _o(this, e);
    throw new Error("invalid account");
  }
  async listAccounts() {
    return (await this.send("eth_accounts", [])).map((n) => new _o(this, n));
  }
  destroy() {
    l(this, Ie) && (clearTimeout(l(this, Ie)), d(this, Ie, null));
    for (const { payload: e, reject: n } of l(this, qe))
      n(dt("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: e.method }));
    d(this, qe, []), super.destroy();
  }
}
sr = new WeakMap(), gs = new WeakMap(), qe = new WeakMap(), Ie = new WeakMap(), ye = new WeakMap(), se = new WeakMap(), Wt = new WeakMap(), hi = new WeakSet(), ma = function() {
  if (l(this, Ie))
    return;
  const e = this._getOption("batchMaxCount") === 1 ? 0 : this._getOption("batchStallTime");
  d(this, Ie, setTimeout(() => {
    d(this, Ie, null);
    const n = l(this, qe);
    for (d(this, qe, []); n.length; ) {
      const s = [n.shift()];
      for (; n.length && s.length !== l(this, sr).batchMaxCount; )
        if (s.push(n.shift()), JSON.stringify(s.map((o) => o.payload)).length > l(this, sr).batchMaxSize) {
          n.unshift(s.pop());
          break;
        }
      (async () => {
        const i = s.length === 1 ? s[0].payload : s.map((o) => o.payload);
        this.emit("debug", { action: "sendRpcPayload", payload: i });
        try {
          const o = await this._send(i);
          this.emit("debug", { action: "receiveRpcResult", result: o });
          for (const { resolve: a, reject: c, payload: u } of s) {
            if (this.destroyed) {
              c(dt("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: u.method }));
              continue;
            }
            const f = o.filter((h) => h.id === u.id)[0];
            if (f == null) {
              const h = dt("missing response for request", "BAD_DATA", {
                value: o,
                info: { payload: u }
              });
              this.emit("error", h), c(h);
              continue;
            }
            if ("error" in f) {
              c(this.getRpcError(u, f));
              continue;
            }
            a(f.result);
          }
        } catch (o) {
          this.emit("debug", { action: "receiveRpcError", error: o });
          for (const { reject: a } of s)
            a(o);
        }
      })();
    }
  }, e));
};
var Tn;
class Fg extends Dg {
  constructor(e, n) {
    super(e, n);
    b(this, Tn, void 0);
    d(this, Tn, 4e3);
  }
  _getSubscriber(e) {
    const n = super._getSubscriber(e);
    return pu(n) && (n.pollingInterval = l(this, Tn)), n;
  }
  /**
   *  The polling interval (default: 4000 ms)
   */
  get pollingInterval() {
    return l(this, Tn);
  }
  set pollingInterval(e) {
    if (!Number.isInteger(e) || e < 0)
      throw new Error("invalid interval");
    d(this, Tn, e), this._forEachSubscriber((n) => {
      pu(n) && (n.pollingInterval = l(this, Tn));
    });
  }
}
Tn = new WeakMap();
function wa(r) {
  if (r == null)
    return null;
  if (typeof r.message == "string" && r.message.match(/revert/i) && ot(r.data))
    return { message: r.message, data: r.data };
  if (typeof r == "object") {
    for (const t in r) {
      const e = wa(r[t]);
      if (e)
        return e;
    }
    return null;
  }
  if (typeof r == "string")
    try {
      return wa(JSON.parse(r));
    } catch {
    }
  return null;
}
function Aa(r, t) {
  if (r != null) {
    if (typeof r.message == "string" && t.push(r.message), typeof r == "object")
      for (const e in r)
        Aa(r[e], t);
    if (typeof r == "string")
      try {
        return Aa(JSON.parse(r), t);
      } catch {
      }
  }
}
function Lg(r) {
  const t = [];
  return Aa(r, t), t;
}
var ys;
class Mg extends Fg {
  /**
   *  Connnect to the %%ethereum%% provider, optionally forcing the
   *  %%network%%.
   */
  constructor(e, n) {
    super(n, { batchMaxCount: 1 });
    b(this, ys, void 0);
    d(this, ys, async (s, i) => {
      const o = { method: s, params: i };
      this.emit("debug", { action: "sendEip1193Request", payload: o });
      try {
        const a = await e.request(o);
        return this.emit("debug", { action: "receiveEip1193Result", result: a }), a;
      } catch (a) {
        const c = new Error(a.message);
        throw c.code = a.code, c.data = a.data, c.payload = o, this.emit("debug", { action: "receiveEip1193Error", error: c }), c;
      }
    });
  }
  async send(e, n) {
    return await this._start(), await super.send(e, n);
  }
  async _send(e) {
    y(!Array.isArray(e), "EIP-1193 does not support batch request", "payload", e);
    try {
      const n = await l(this, ys).call(this, e.method, e.params || []);
      return [{ id: e.id, result: n }];
    } catch (n) {
      return [{
        id: e.id,
        error: { code: n.code, data: n.data, message: n.message }
      }];
    }
  }
  getRpcError(e, n) {
    switch (n = JSON.parse(JSON.stringify(n)), n.error.code || -1) {
      case 4001:
        n.error.message = `ethers-user-denied: ${n.error.message}`;
        break;
      case 4200:
        n.error.message = `ethers-unsupported: ${n.error.message}`;
        break;
    }
    return super.getRpcError(e, n);
  }
  /**
   *  Resolves to ``true`` if the provider manages the %%address%%.
   */
  async hasSigner(e) {
    e == null && (e = 0);
    const n = await this.send("eth_accounts", []);
    return typeof e == "number" ? n.length > e : (e = e.toLowerCase(), n.filter((s) => s.toLowerCase() === e).length !== 0);
  }
  async getSigner(e) {
    if (e == null && (e = 0), !await this.hasSigner(e))
      try {
        await l(this, ys).call(this, "eth_requestAccounts", []);
      } catch (n) {
        const s = n.payload;
        throw this.getRpcError(s, { id: s.id, error: n });
      }
    return await super.getSigner(e);
  }
}
ys = new WeakMap();
const wo = new Mg(window.ethereum);
let Ti, Oi;
async function Ys() {
  return Ti ? Promise.resolve(Ti) : Oi || (Oi = new Promise(async (r) => {
    await window.ethereum.enable(), Ti = await wo.getSigner(), r(Ti);
  }), Oi);
}
function Gg({
  activating: r,
  activationFunctions: t,
  selectedFunctionId: e,
  balance: n
}) {
  return console.log(t, e), /* @__PURE__ */ q.jsxs(q.Fragment, { children: [
    /* @__PURE__ */ q.jsx(
      "div",
      {
        className: r === "unactivated" ? "opacity-100" : "opacity-0",
        children: /* @__PURE__ */ q.jsxs("p", { className: "text-sm text-center", children: [
          t[e].context,
          /* @__PURE__ */ q.jsx("br", {}),
          /* @__PURE__ */ q.jsx("br", {}),
          t[e].description,
          /* @__PURE__ */ q.jsx("br", {}),
          /* @__PURE__ */ q.jsx("br", {}),
          "Reward:",
          " ",
          String(
            t[e].multiplier * t[e].weightInWatt
          ),
          " ",
          "Verification WATT"
        ] })
      }
    ),
    r === "activating" && /* @__PURE__ */ q.jsx(
      "img",
      {
        src: "./assets/loading.png",
        alt: "Loading...",
        className: "absolute top-16 w-20 h-20"
      }
    ),
    r === "activated" && /* @__PURE__ */ q.jsxs("div", { children: [
      "activated $",
      n,
      " WATTS"
    ] })
  ] });
}
const Qg = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_poC",
        type: "address"
      }
    ],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !1,
        internalType: "uint256",
        name: "activationFunctionId",
        type: "uint256"
      }
    ],
    name: "ActivationFunctionApproved",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !1,
        internalType: "uint256",
        name: "activationFunctionId",
        type: "uint256"
      },
      {
        indexed: !1,
        internalType: "address",
        name: "developer",
        type: "address"
      },
      {
        indexed: !1,
        internalType: "string",
        name: "context",
        type: "string"
      }
    ],
    name: "ActivationFunctionRegistered",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !1,
        internalType: "address",
        name: "addr",
        type: "address"
      }
    ],
    name: "DebugAddress",
    type: "event"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "activationFunctionId",
        type: "uint256"
      }
    ],
    name: "activate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    name: "activationFunctions",
    outputs: [
      {
        internalType: "address",
        name: "issuer",
        type: "address"
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool"
      },
      {
        internalType: "enum NewcoinEncoder.WattType",
        name: "wattType",
        type: "uint8"
      },
      {
        internalType: "uint256",
        name: "multiplier",
        type: "uint256"
      },
      {
        internalType: "bytes32",
        name: "contextId",
        type: "bytes32"
      },
      {
        internalType: "string",
        name: "context",
        type: "string"
      },
      {
        internalType: "string",
        name: "description",
        type: "string"
      },
      {
        internalType: "address",
        name: "addrss",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "weightInWatt",
        type: "uint256"
      },
      {
        internalType: "bool",
        name: "isAsync",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "activationFunctionId",
        type: "uint256"
      }
    ],
    name: "approveActivationFunction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "activationFunctionId",
        type: "uint256"
      }
    ],
    name: "canMint",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getApprovedActivationFunctions",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "issuer",
            type: "address"
          },
          {
            internalType: "bool",
            name: "approved",
            type: "bool"
          },
          {
            internalType: "enum NewcoinEncoder.WattType",
            name: "wattType",
            type: "uint8"
          },
          {
            internalType: "uint256",
            name: "multiplier",
            type: "uint256"
          },
          {
            internalType: "bytes32",
            name: "contextId",
            type: "bytes32"
          },
          {
            internalType: "string",
            name: "context",
            type: "string"
          },
          {
            internalType: "string",
            name: "description",
            type: "string"
          },
          {
            internalType: "address",
            name: "addrss",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "weightInWatt",
            type: "uint256"
          },
          {
            internalType: "bool",
            name: "isAsync",
            type: "bool"
          }
        ],
        internalType: "struct NewcoinEncoder.ActivationFunction[]",
        name: "",
        type: "tuple[]"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "conditionMet",
        type: "bool"
      },
      {
        internalType: "uint256",
        name: "activationFunctionId",
        type: "uint256"
      }
    ],
    name: "oracleResponse",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "poC",
    outputs: [
      {
        internalType: "contract EnergyMinterMock",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "enum NewcoinEncoder.WattType",
        name: "_wattType",
        type: "uint8"
      },
      {
        internalType: "uint256",
        name: "_multiplier",
        type: "uint256"
      },
      {
        internalType: "bytes32",
        name: "_contextId",
        type: "bytes32"
      },
      {
        internalType: "string",
        name: "_context",
        type: "string"
      },
      {
        internalType: "string",
        name: "_description",
        type: "string"
      },
      {
        internalType: "address",
        name: "_addrss",
        type: "address"
      },
      {
        internalType: "uint256",
        name: "_weightInWatt",
        type: "uint256"
      },
      {
        internalType: "bool",
        name: "_isAsync",
        type: "bool"
      }
    ],
    name: "registerActivationFunction",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "nonpayable",
    type: "function"
  }
], Hg = "0x84387e3ad062D683BFc7eD2Eeaf2C30B27Bd3d05", ef = new In(
  Hg,
  Qg,
  wo
), _g = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !0,
        internalType: "bytes32",
        name: "id",
        type: "bytes32"
      }
    ],
    name: "ChainlinkCancelled",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !0,
        internalType: "bytes32",
        name: "id",
        type: "bytes32"
      }
    ],
    name: "ChainlinkFulfilled",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !0,
        internalType: "bytes32",
        name: "id",
        type: "bytes32"
      }
    ],
    name: "ChainlinkRequested",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !0,
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        indexed: !0,
        internalType: "address",
        name: "to",
        type: "address"
      }
    ],
    name: "OwnershipTransferRequested",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !0,
        internalType: "address",
        name: "from",
        type: "address"
      },
      {
        indexed: !0,
        internalType: "address",
        name: "to",
        type: "address"
      }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      {
        indexed: !0,
        internalType: "address",
        name: "requester",
        type: "address"
      }
    ],
    name: "RequestFulfilled",
    type: "event"
  },
  {
    inputs: [],
    name: "acceptOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_activationFunctionId",
        type: "uint256"
      }
    ],
    name: "activate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32"
      },
      {
        internalType: "bool",
        name: "data",
        type: "bool"
      }
    ],
    name: "fulfill",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "getFeeInHundredthsOfLink",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getJobId",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "getOracleAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    name: "passportHolders",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "request",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32"
      }
    ],
    name: "requesters",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "response",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_feeInHundredthsOfLink",
        type: "uint256"
      }
    ],
    name: "setFeeInHundredthsOfLink",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_feeInJuels",
        type: "uint256"
      }
    ],
    name: "setFeeInJuels",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_jobId",
        type: "string"
      }
    ],
    name: "setJobId",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_oracleAddress",
        type: "address"
      }
    ],
    name: "setOracleAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address"
      }
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "withdrawLink",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
], Vg = "0xf192Ee5a9fB9AE3A8dee79669CFd2BA8C8441d9c", Jg = new In(
  Vg,
  _g,
  wo
), jg = [
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        internalType: "uint8",
        name: "id",
        type: "uint8"
      }
    ],
    name: "balanceOfEnergy",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      }
    ],
    name: "balanceOfWatts",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address"
      },
      {
        internalType: "uint8",
        name: "id",
        type: "uint8"
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256"
      }
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      },
      {
        internalType: "uint8",
        name: "",
        type: "uint8"
      }
    ],
    name: "neuralTokenBalances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address"
      }
    ],
    name: "wattBalances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256"
      }
    ],
    stateMutability: "view",
    type: "function"
  }
], zg = "0xf272Fe62eEdCBCf7221D8451a68a85c3AF4fAcFe", Kg = new In(
  zg,
  jg,
  wo
);
function Yi(r, t, e) {
  const [n, s] = Un(e);
  return yu(() => {
    let i = !1;
    const o = r();
    if (o != null)
      return o.then((a) => {
        i || s(a);
      }), () => {
        i = !0;
      };
  }, t), n;
}
const nf = ({
  setActivating: r,
  setBalance: t,
  selectedFunctionId: e,
  contractType: n,
  contractAddress: s
}) => {
  const i = async (a) => {
    const c = await Ys();
    let {
      // eslint-disable-next-line prefer-const
      selectedFunctionId: u,
      contractType: f,
      contractAddress: h
      // params
    } = a || {};
    f = f || n || "guildAFContract", h = h || s || "";
    const g = typeof u < "u" ? u : e;
    try {
      await Jg.connect(
        c
      ).request(), setTimeout(async () => {
        try {
          await (await ef.connect(
            c
          ).activate(g)).wait(), o();
        } catch (E) {
          console.log("Error during activation: ", E);
        }
      }, 6e4);
    } catch (w) {
      console.log("Error during request: ", w);
    }
    r("activating");
  }, o = async () => {
    const a = Yi(Ys, []), c = Kg.connect(
      a
    );
    try {
      const u = await a.getAddress(), f = await c.balanceOfWatts(u);
      console.log("Balance of Watts: ", f.toString()), t(f.toString()), r("activated");
    } catch (u) {
      console.log("Error fetching balance: ", u);
    }
  };
  return {
    activate: i
  };
};
function Wg({
  activating: r,
  setActivating: t,
  setBalance: e,
  selectedFunctionId: n,
  render: s
}) {
  const i = Yi(Ys, []), { activate: o } = nf({
    activating: r,
    setActivating: t,
    setBalance: e,
    selectedFunctionId: n
  }), a = s || ((c) => /* @__PURE__ */ q.jsx("button", { ...c }));
  return i ? /* @__PURE__ */ q.jsx(
    a,
    {
      onClick: () => o(),
      className: `py-2 px-4 text-white rounded-full w-40 ${r === "activating" ? "bg-gray-400" : "bg-black"}`,
      disabled: r === "activating",
      children: r === "activating" ? "Activating" : "Activate"
    }
  ) : /* @__PURE__ */ q.jsx(q.Fragment, { children: "Wait..." });
}
function Yg({
  activationFunctions: r,
  setSelectedFunctionId: t,
  selectedFunctionId: e
}) {
  const n = (s) => {
    const i = Number(s.target.value);
    t(i);
  };
  return yu(() => {
    console.log(e);
  }, [e]), /* @__PURE__ */ q.jsxs(
    "select",
    {
      onChange: n,
      value: e,
      className: `py-2 px-4 text-xs text-black rounded-full w-40 border border-black ${e ? "bg-gray-200" : "bg-white"}`,
      children: [
        /* @__PURE__ */ q.jsx("option", { value: "", disabled: !0, children: "Select an activation function" }),
        r.map((s, i) => /* @__PURE__ */ q.jsxs("option", { value: i, children: [
          s.context,
          " ",
          s.id
        ] }, s.id))
      ]
    }
  );
}
const Zg = (r, t) => {
  const [e, n] = Un("unactivated"), [s, i] = Un("0"), [o, a] = Un(0), [c, u] = Un(!1), [f, h] = Un(!1), [g, w] = Un(!1), E = () => u(!0), m = Yi(async () => {
    if (!(c || t))
      return Promise.resolve();
    h(!0);
    const D = await Ys();
    return window.alert(D), h(!1), w(!!D), D;
  }, [c, t]), v = Yi(
    async () => {
      const D = await Ys();
      if (!D)
        return;
      const nt = await ef.connect(
        D
      ).getApprovedActivationFunctions();
      return console.log(nt), nt;
    },
    [m, r],
    []
  ) || [], B = /* @__PURE__ */ q.jsx(
    Yg,
    {
      selectedFunctionId: o,
      setSelectedFunctionId: a,
      activationFunctions: v
    }
  ), T = /* @__PURE__ */ q.jsx(
    Gg,
    {
      activating: e,
      activationFunctions: v,
      selectedFunctionId: o,
      balance: s
    }
  ), H = {
    activating: e,
    setActivating: n,
    balance: s,
    setBalance: i,
    selectedFunctionId: o
  }, G = /* @__PURE__ */ q.jsx(
    Wg,
    {
      ...H
    }
  ), { activate: U } = nf(H);
  return {
    activate: U,
    activationFunctions: v,
    setActivating: n,
    activating: e,
    selectedFunctionId: o,
    setSelectedFunctionId: a,
    balance: s,
    setBalance: i,
    button: G,
    panel: T,
    dropDown: B,
    connect: E,
    isConnecting: f,
    isConnected: g,
    signer: m
  };
};
function Xg() {
  const {
    activationFunctions: r,
    activating: t,
    connect: e,
    button: n,
    panel: s,
    dropDown: i,
    isConnected: o
  } = Zg("0x84387e3ad062D683BFc7eD2Eeaf2C30B27Bd3d05");
  return /* @__PURE__ */ q.jsx("div", { className: "min-h-screen flex items-center justify-center", children: /* @__PURE__ */ q.jsxs("div", { className: "relative flex flex-col items-center justify-between pl-2 pr-2 pt-8 pb-8 border border-black w-64 h-96", children: [
    !o && /* @__PURE__ */ q.jsx("button", { onClick: () => e(), children: "connect" }),
    /* @__PURE__ */ q.jsx("br", {}),
    /* @__PURE__ */ q.jsx("br", {}),
    r.length > 0 && /* @__PURE__ */ q.jsx(q.Fragment, { children: /* @__PURE__ */ q.jsxs(q.Fragment, { children: [
      t != "activating" && i,
      s,
      n
    ] }) })
  ] }) });
}
const ny = Xg;
export {
  ny as ActivationByContractAddress,
  Xg as default,
  Zg as useActivationFunctions,
  nf as useButton
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
