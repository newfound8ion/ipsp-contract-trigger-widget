var Jg=Object.defineProperty;var jg=(j,_,st)=>_ in j?Jg(j,_,{enumerable:!0,configurable:!0,writable:!0,value:st}):j[_]=st;var A=(j,_,st)=>(jg(j,typeof _!="symbol"?_+"":_,st),st),Da=(j,_,st)=>{if(!_.has(j))throw TypeError("Cannot "+st)};var l=(j,_,st)=>(Da(j,_,"read from private field"),st?st.call(j):_.get(j)),b=(j,_,st)=>{if(_.has(j))throw TypeError("Cannot add the same private member more than once");_ instanceof WeakSet?_.add(j):_.set(j,st)},d=(j,_,st,ue)=>(Da(j,_,"write to private field"),ue?ue.call(j,st):_.set(j,st),st);var hi=(j,_,st,ue)=>({set _(xs){d(j,_,xs,st)},get _(){return l(j,_,ue)}}),I=(j,_,st)=>(Da(j,_,"access private method"),st);(function(j,_){typeof exports=="object"&&typeof module<"u"?_(exports,require("react")):typeof define=="function"&&define.amd?define(["exports","react"],_):(j=typeof globalThis<"u"?globalThis:j||self,_(j["af-widget"]={},j.require$$1))})(this,function(j,_){var Rr,Kn,yn,kr,Sr,ge,Ve,Ur,Dr,At,Wt,Je,Wn,Yn,Zn,Te,je,mn,Xn,di,js,zs,Ks,ye,Fr,qn,wn,ze,$n,Lr,fo,Yt,ee,no,ql,Mr,Gr,Qr,tr,Ke,nr,Ye,Hr,_r,Vr,Jr,jr,zr,Kr,Wr,Yr,Zr,Xr,Ys,Ze,qr,ro,$l,vt,we,Zs,Fa,$r,ho,bn,Es,Ce,Oe,Ie,Nt,ts,po,es,go,Xe,Xs,En,rs,qs,$s,Tg,vn,rr,xn,vs,oo,tf,ei,ni,is,os,Pn,qe,se,Nn,Be,cs,yo,sr,ir,Tn,ao,us,$e,ls,fs,Cn,ie,co,ef,Tt,On,Ct,hs,Zt,or,In,tn,ri,oe,ds,ps,Vt,ce,si,La,ii,Ma,ar,pi,oi,Ga,cr,gi,gs,mo,Jt,Re,ur,Bn,lr,ys,ai,Qa,ci,Ha,fr,hr,ms,en,ke,Ae,nn,ui,_a,Rn,ws;"use strict";var st={exports:{}},ue={};/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var xs,Va;function Ja(){if(Va)return xs;Va=1;var r=Object.getOwnPropertySymbols,t=Object.prototype.hasOwnProperty,e=Object.prototype.propertyIsEnumerable;function n(i){if(i==null)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(i)}function s(){try{if(!Object.assign)return!1;var i=new String("abc");if(i[5]="de",Object.getOwnPropertyNames(i)[0]==="5")return!1;for(var o={},a=0;a<10;a++)o["_"+String.fromCharCode(a)]=a;var c=Object.getOwnPropertyNames(o).map(function(f){return o[f]});if(c.join("")!=="0123456789")return!1;var u={};return"abcdefghijklmnopqrst".split("").forEach(function(f){u[f]=f}),Object.keys(Object.assign({},u)).join("")==="abcdefghijklmnopqrst"}catch{return!1}}return xs=s()?Object.assign:function(i,o){for(var a,c=n(i),u,f=1;f<arguments.length;f++){a=Object(arguments[f]);for(var h in a)t.call(a,h)&&(c[h]=a[h]);if(r){u=r(a);for(var g=0;g<u.length;g++)e.call(a,u[g])&&(c[u[g]]=a[u[g]])}}return c},xs}/** @license React v17.0.2
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var ja;function nf(){if(ja)return ue;ja=1,Ja();var r=_,t=60103;if(ue.Fragment=60107,typeof Symbol=="function"&&Symbol.for){var e=Symbol.for;t=e("react.element"),ue.Fragment=e("react.fragment")}var n=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,s=Object.prototype.hasOwnProperty,i={key:!0,ref:!0,__self:!0,__source:!0};function o(a,c,u){var f,h={},g=null,w=null;u!==void 0&&(g=""+u),c.key!==void 0&&(g=""+c.key),c.ref!==void 0&&(w=c.ref);for(f in c)s.call(c,f)&&!i.hasOwnProperty(f)&&(h[f]=c[f]);if(a&&a.defaultProps)for(f in c=a.defaultProps,c)h[f]===void 0&&(h[f]=c[f]);return{$$typeof:t,type:a,key:g,ref:w,props:h,_owner:n.current}}return ue.jsx=o,ue.jsxs=o,ue}var wo={};/** @license React v17.0.2
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var za;function rf(){return za||(za=1,function(r){process.env.NODE_ENV!=="production"&&function(){var t=_,e=Ja(),n=60103,s=60106;r.Fragment=60107;var i=60108,o=60114,a=60109,c=60110,u=60112,f=60113,h=60120,g=60115,w=60116,E=60121,m=60122,x=60117,v=60129,B=60131;if(typeof Symbol=="function"&&Symbol.for){var C=Symbol.for;n=C("react.element"),s=C("react.portal"),r.Fragment=C("react.fragment"),i=C("react.strict_mode"),o=C("react.profiler"),a=C("react.provider"),c=C("react.context"),u=C("react.forward_ref"),f=C("react.suspense"),h=C("react.suspense_list"),g=C("react.memo"),w=C("react.lazy"),E=C("react.block"),m=C("react.server.block"),x=C("react.fundamental"),C("react.scope"),C("react.opaque.id"),v=C("react.debug_trace_mode"),C("react.offscreen"),B=C("react.legacy_hidden")}var H=typeof Symbol=="function"&&Symbol.iterator,G="@@iterator";function U(p){if(p===null||typeof p!="object")return null;var N=H&&p[H]||p[G];return typeof N=="function"?N:null}var D=t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function k(p){{for(var N=arguments.length,O=new Array(N>1?N-1:0),Q=1;Q<N;Q++)O[Q-1]=arguments[Q];lt("error",p,O)}}function lt(p,N,O){{var Q=D.ReactDebugCurrentFrame,et=Q.getStackAddendum();et!==""&&(N+="%s",O=O.concat([et]));var nt=O.map(function(K){return""+K});nt.unshift("Warning: "+N),Function.prototype.apply.call(console[p],console,nt)}}var q=!1;function Z(p){return!!(typeof p=="string"||typeof p=="function"||p===r.Fragment||p===o||p===v||p===i||p===f||p===h||p===B||q||typeof p=="object"&&p!==null&&(p.$$typeof===w||p.$$typeof===g||p.$$typeof===a||p.$$typeof===c||p.$$typeof===u||p.$$typeof===x||p.$$typeof===E||p[0]===m))}function Ft(p,N,O){var Q=N.displayName||N.name||"";return p.displayName||(Q!==""?O+"("+Q+")":O)}function Ot(p){return p.displayName||"Context"}function mt(p){if(p==null)return null;if(typeof p.tag=="number"&&k("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue."),typeof p=="function")return p.displayName||p.name||null;if(typeof p=="string")return p;switch(p){case r.Fragment:return"Fragment";case s:return"Portal";case o:return"Profiler";case i:return"StrictMode";case f:return"Suspense";case h:return"SuspenseList"}if(typeof p=="object")switch(p.$$typeof){case c:var N=p;return Ot(N)+".Consumer";case a:var O=p;return Ot(O._context)+".Provider";case u:return Ft(p,p.render,"ForwardRef");case g:return mt(p.type);case E:return mt(p._render);case w:{var Q=p,et=Q._payload,nt=Q._init;try{return mt(nt(et))}catch{return null}}}return null}var T=0,S,V,tt,$,ht,It,Bt;function be(){}be.__reactDisabledLog=!0;function Se(){{if(T===0){S=console.log,V=console.info,tt=console.warn,$=console.error,ht=console.group,It=console.groupCollapsed,Bt=console.groupEnd;var p={configurable:!0,enumerable:!0,value:be,writable:!0};Object.defineProperties(console,{info:p,log:p,warn:p,error:p,group:p,groupCollapsed:p,groupEnd:p})}T++}}function kn(){{if(T--,T===0){var p={configurable:!0,enumerable:!0,writable:!0};Object.defineProperties(console,{log:e({},p,{value:S}),info:e({},p,{value:V}),warn:e({},p,{value:tt}),error:e({},p,{value:$}),group:e({},p,{value:ht}),groupCollapsed:e({},p,{value:It}),groupEnd:e({},p,{value:Bt})})}T<0&&k("disabledDepth fell below zero. This is a bug in React. Please file an issue.")}}var rn=D.ReactCurrentDispatcher,ae;function Sn(p,N,O){{if(ae===void 0)try{throw Error()}catch(et){var Q=et.stack.trim().match(/\n( *(at )?)/);ae=Q&&Q[1]||""}return`
`+ae+p}}var Ee=!1,ve;{var uo=typeof WeakMap=="function"?WeakMap:Map;ve=new uo}function sn(p,N){if(!p||Ee)return"";{var O=ve.get(p);if(O!==void 0)return O}var Q;Ee=!0;var et=Error.prepareStackTrace;Error.prepareStackTrace=void 0;var nt;nt=rn.current,rn.current=null,Se();try{if(N){var K=function(){throw Error()};if(Object.defineProperty(K.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(K,[])}catch(an){Q=an}Reflect.construct(p,[],K)}else{try{K.call()}catch(an){Q=an}p.call(K.prototype)}}else{try{throw Error()}catch(an){Q=an}p()}}catch(an){if(an&&Q&&typeof an.stack=="string"){for(var z=an.stack.split(`
`),Lt=Q.stack.split(`
`),dt=z.length-1,pt=Lt.length-1;dt>=1&&pt>=0&&z[dt]!==Lt[pt];)pt--;for(;dt>=1&&pt>=0;dt--,pt--)if(z[dt]!==Lt[pt]){if(dt!==1||pt!==1)do if(dt--,pt--,pt<0||z[dt]!==Lt[pt]){var on=`
`+z[dt].replace(" at new "," at ");return typeof p=="function"&&ve.set(p,on),on}while(dt>=1&&pt>=0);break}}}finally{Ee=!1,rn.current=nt,kn(),Error.prepareStackTrace=et}var bs=p?p.displayName||p.name:"",Xl=bs?Sn(bs):"";return typeof p=="function"&&ve.set(p,Xl),Xl}function jt(p,N,O){return sn(p,!1)}function Un(p){var N=p.prototype;return!!(N&&N.isReactComponent)}function dr(p,N,O){if(p==null)return"";if(typeof p=="function")return sn(p,Un(p));if(typeof p=="string")return Sn(p);switch(p){case f:return Sn("Suspense");case h:return Sn("SuspenseList")}if(typeof p=="object")switch(p.$$typeof){case u:return jt(p.render);case g:return dr(p.type,N,O);case E:return jt(p._render);case w:{var Q=p,et=Q._payload,nt=Q._init;try{return dr(nt(et),N,O)}catch{}}}return""}var li={},_l=D.ReactDebugCurrentFrame;function lo(p){if(p){var N=p._owner,O=dr(p.type,p._source,N?N.type:null);_l.setExtraStackFrame(O)}else _l.setExtraStackFrame(null)}function Cg(p,N,O,Q,et){{var nt=Function.call.bind(Object.prototype.hasOwnProperty);for(var K in p)if(nt(p,K)){var z=void 0;try{if(typeof p[K]!="function"){var Lt=Error((Q||"React class")+": "+O+" type `"+K+"` is invalid; it must be a function, usually from the `prop-types` package, but received `"+typeof p[K]+"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");throw Lt.name="Invariant Violation",Lt}z=p[K](N,K,Q,O,null,"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED")}catch(dt){z=dt}z&&!(z instanceof Error)&&(lo(et),k("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",Q||"React class",O,K,typeof z),lo(null)),z instanceof Error&&!(z.message in li)&&(li[z.message]=!0,lo(et),k("Failed %s type: %s",O,z.message),lo(null))}}}var fi=D.ReactCurrentOwner,Ba=Object.prototype.hasOwnProperty,Og={key:!0,ref:!0,__self:!0,__source:!0},Vl,Jl,Ra;Ra={};function Ig(p){if(Ba.call(p,"ref")){var N=Object.getOwnPropertyDescriptor(p,"ref").get;if(N&&N.isReactWarning)return!1}return p.ref!==void 0}function Bg(p){if(Ba.call(p,"key")){var N=Object.getOwnPropertyDescriptor(p,"key").get;if(N&&N.isReactWarning)return!1}return p.key!==void 0}function Rg(p,N){if(typeof p.ref=="string"&&fi.current&&N&&fi.current.stateNode!==N){var O=mt(fi.current.type);Ra[O]||(k('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref',mt(fi.current.type),p.ref),Ra[O]=!0)}}function kg(p,N){{var O=function(){Vl||(Vl=!0,k("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)",N))};O.isReactWarning=!0,Object.defineProperty(p,"key",{get:O,configurable:!0})}}function Sg(p,N){{var O=function(){Jl||(Jl=!0,k("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)",N))};O.isReactWarning=!0,Object.defineProperty(p,"ref",{get:O,configurable:!0})}}var Ug=function(p,N,O,Q,et,nt,K){var z={$$typeof:n,type:p,key:N,ref:O,props:K,_owner:nt};return z._store={},Object.defineProperty(z._store,"validated",{configurable:!1,enumerable:!1,writable:!0,value:!1}),Object.defineProperty(z,"_self",{configurable:!1,enumerable:!1,writable:!1,value:Q}),Object.defineProperty(z,"_source",{configurable:!1,enumerable:!1,writable:!1,value:et}),Object.freeze&&(Object.freeze(z.props),Object.freeze(z)),z};function Dg(p,N,O,Q,et){{var nt,K={},z=null,Lt=null;O!==void 0&&(z=""+O),Bg(N)&&(z=""+N.key),Ig(N)&&(Lt=N.ref,Rg(N,et));for(nt in N)Ba.call(N,nt)&&!Og.hasOwnProperty(nt)&&(K[nt]=N[nt]);if(p&&p.defaultProps){var dt=p.defaultProps;for(nt in dt)K[nt]===void 0&&(K[nt]=dt[nt])}if(z||Lt){var pt=typeof p=="function"?p.displayName||p.name||"Unknown":p;z&&kg(K,pt),Lt&&Sg(K,pt)}return Ug(p,z,Lt,et,Q,fi.current,K)}}var ka=D.ReactCurrentOwner,jl=D.ReactDebugCurrentFrame;function As(p){if(p){var N=p._owner,O=dr(p.type,p._source,N?N.type:null);jl.setExtraStackFrame(O)}else jl.setExtraStackFrame(null)}var Sa;Sa=!1;function Ua(p){return typeof p=="object"&&p!==null&&p.$$typeof===n}function zl(){{if(ka.current){var p=mt(ka.current.type);if(p)return`

Check the render method of \``+p+"`."}return""}}function Fg(p){{if(p!==void 0){var N=p.fileName.replace(/^.*[\\\/]/,""),O=p.lineNumber;return`

Check your code at `+N+":"+O+"."}return""}}var Kl={};function Lg(p){{var N=zl();if(!N){var O=typeof p=="string"?p:p.displayName||p.name;O&&(N=`

Check the top-level render call using <`+O+">.")}return N}}function Wl(p,N){{if(!p._store||p._store.validated||p.key!=null)return;p._store.validated=!0;var O=Lg(N);if(Kl[O])return;Kl[O]=!0;var Q="";p&&p._owner&&p._owner!==ka.current&&(Q=" It was passed a child from "+mt(p._owner.type)+"."),As(p),k('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.',O,Q),As(null)}}function Yl(p,N){{if(typeof p!="object")return;if(Array.isArray(p))for(var O=0;O<p.length;O++){var Q=p[O];Ua(Q)&&Wl(Q,N)}else if(Ua(p))p._store&&(p._store.validated=!0);else if(p){var et=U(p);if(typeof et=="function"&&et!==p.entries)for(var nt=et.call(p),K;!(K=nt.next()).done;)Ua(K.value)&&Wl(K.value,N)}}}function Mg(p){{var N=p.type;if(N==null||typeof N=="string")return;var O;if(typeof N=="function")O=N.propTypes;else if(typeof N=="object"&&(N.$$typeof===u||N.$$typeof===g))O=N.propTypes;else return;if(O){var Q=mt(N);Cg(O,p.props,"prop",Q,p)}else if(N.PropTypes!==void 0&&!Sa){Sa=!0;var et=mt(N);k("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?",et||"Unknown")}typeof N.getDefaultProps=="function"&&!N.getDefaultProps.isReactClassApproved&&k("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.")}}function Gg(p){{for(var N=Object.keys(p.props),O=0;O<N.length;O++){var Q=N[O];if(Q!=="children"&&Q!=="key"){As(p),k("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.",Q),As(null);break}}p.ref!==null&&(As(p),k("Invalid attribute `ref` supplied to `React.Fragment`."),As(null))}}function Zl(p,N,O,Q,et,nt){{var K=Z(p);if(!K){var z="";(p===void 0||typeof p=="object"&&p!==null&&Object.keys(p).length===0)&&(z+=" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");var Lt=Fg(et);Lt?z+=Lt:z+=zl();var dt;p===null?dt="null":Array.isArray(p)?dt="array":p!==void 0&&p.$$typeof===n?(dt="<"+(mt(p.type)||"Unknown")+" />",z=" Did you accidentally export a JSX literal instead of a component?"):dt=typeof p,k("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s",dt,z)}var pt=Dg(p,N,O,et,nt);if(pt==null)return pt;if(K){var on=N.children;if(on!==void 0)if(Q)if(Array.isArray(on)){for(var bs=0;bs<on.length;bs++)Yl(on[bs],p);Object.freeze&&Object.freeze(on)}else k("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");else Yl(on,p)}return p===r.Fragment?Gg(pt):Mg(pt),pt}}function Qg(p,N,O){return Zl(p,N,O,!0)}function Hg(p,N,O){return Zl(p,N,O,!1)}var _g=Hg,Vg=Qg;r.jsx=_g,r.jsxs=Vg}()}(wo)),wo}process.env.NODE_ENV==="production"?st.exports=nf():st.exports=rf();var rt=st.exports;const sf="6.8.0";function of(r,t,e){const n=t.split("|").map(i=>i.trim());for(let i=0;i<n.length;i++)switch(t){case"any":return;case"bigint":case"boolean":case"number":case"string":if(typeof r===t)return}const s=new Error(`invalid value for type ${t}`);throw s.code="INVALID_ARGUMENT",s.argument=`value.${e}`,s.value=r,s}async function Rt(r){const t=Object.keys(r);return(await Promise.all(t.map(n=>Promise.resolve(r[n])))).reduce((n,s,i)=>(n[t[i]]=s,n),{})}function M(r,t,e){for(let n in t){let s=t[n];const i=e?e[n]:null;i&&of(s,i,n),Object.defineProperty(r,n,{enumerable:!0,value:s,writable:!1})}}function pr(r){if(r==null)return"null";if(Array.isArray(r))return"[ "+r.map(pr).join(", ")+" ]";if(r instanceof Uint8Array){const t="0123456789abcdef";let e="0x";for(let n=0;n<r.length;n++)e+=t[r[n]>>4],e+=t[r[n]&15];return e}if(typeof r=="object"&&typeof r.toJSON=="function")return pr(r.toJSON());switch(typeof r){case"boolean":case"symbol":return r.toString();case"bigint":return BigInt(r).toString();case"number":return r.toString();case"string":return JSON.stringify(r);case"object":{const t=Object.keys(r);return t.sort(),"{ "+t.map(e=>`${pr(e)}: ${pr(r[e])}`).join(", ")+" }"}}return"[ COULD NOT SERIALIZE ]"}function Xt(r,t){return r&&r.code===t}function Ao(r){return Xt(r,"CALL_EXCEPTION")}function gt(r,t,e){let n=r;{const i=[];if(e){if("message"in e||"code"in e||"name"in e)throw new Error(`value will overwrite populated values: ${pr(e)}`);for(const o in e){if(o==="shortMessage")continue;const a=e[o];i.push(o+"="+pr(a))}}i.push(`code=${t}`),i.push(`version=${sf}`),i.length&&(r+=" ("+i.join(", ")+")")}let s;switch(t){case"INVALID_ARGUMENT":s=new TypeError(r);break;case"NUMERIC_FAULT":case"BUFFER_OVERRUN":s=new RangeError(r);break;default:s=new Error(r)}return M(s,{code:t}),e&&Object.assign(s,e),s.shortMessage==null&&M(s,{shortMessage:n}),s}function P(r,t,e,n){if(!r)throw gt(t,e,n)}function y(r,t,e,n){P(r,t,"INVALID_ARGUMENT",{argument:e,value:n})}function Ka(r,t,e){e==null&&(e=""),e&&(e=": "+e),P(r>=t,"missing arguemnt"+e,"MISSING_ARGUMENT",{count:r,expectedCount:t}),P(r<=t,"too many arguemnts"+e,"UNEXPECTED_ARGUMENT",{count:r,expectedCount:t})}const af=["NFD","NFC","NFKD","NFKC"].reduce((r,t)=>{try{if("test".normalize(t)!=="test")throw new Error("bad");if(t==="NFD"){const e=String.fromCharCode(233).normalize("NFD"),n=String.fromCharCode(101,769);if(e!==n)throw new Error("broken")}r.push(t)}catch{}return r},[]);function cf(r){P(af.indexOf(r)>=0,"platform missing String.prototype.normalize","UNSUPPORTED_OPERATION",{operation:"String.prototype.normalize",info:{form:r}})}function yi(r,t,e){if(e==null&&(e=""),r!==t){let n=e,s="new";e&&(n+=".",s+=" "+e),P(!1,`private constructor; use ${n}from* methods`,"UNSUPPORTED_OPERATION",{operation:s})}}function Wa(r,t,e){if(r instanceof Uint8Array)return e?new Uint8Array(r):r;if(typeof r=="string"&&r.match(/^0x([0-9a-f][0-9a-f])*$/i)){const n=new Uint8Array((r.length-2)/2);let s=2;for(let i=0;i<n.length;i++)n[i]=parseInt(r.substring(s,s+2),16),s+=2;return n}y(!1,"invalid BytesLike value",t||"value",r)}function X(r,t){return Wa(r,t,!1)}function Mt(r,t){return Wa(r,t,!0)}function it(r,t){return!(typeof r!="string"||!r.match(/^0x[0-9A-Fa-f]*$/)||typeof t=="number"&&r.length!==2+2*t||t===!0&&r.length%2!==0)}function uf(r){return it(r,!0)||r instanceof Uint8Array}const Ya="0123456789abcdef";function F(r){const t=X(r);let e="0x";for(let n=0;n<t.length;n++){const s=t[n];e+=Ya[(s&240)>>4]+Ya[s&15]}return e}function yt(r){return"0x"+r.map(t=>F(t).substring(2)).join("")}function gr(r){return it(r,!0)?(r.length-2)/2:X(r).length}function ut(r,t,e){const n=X(r);return e!=null&&e>n.length&&P(!1,"cannot slice beyond data bounds","BUFFER_OVERRUN",{buffer:n,length:n.length,offset:e}),F(n.slice(t??0,e??n.length))}function Za(r,t,e){const n=X(r);P(t>=n.length,"padding exceeds data length","BUFFER_OVERRUN",{buffer:new Uint8Array(n),length:t,offset:t+1});const s=new Uint8Array(t);return s.fill(0),e?s.set(n,t-n.length):s.set(n,0),F(s)}function Dn(r,t){return Za(r,t,!0)}function lf(r,t){return Za(r,t,!1)}const mi=BigInt(0),le=BigInt(1),yr=9007199254740991;function ff(r,t){const e=wi(r,"value"),n=BigInt(J(t,"width"));if(P(e>>n===mi,"overflow","NUMERIC_FAULT",{operation:"fromTwos",fault:"overflow",value:r}),e>>n-le){const s=(le<<n)-le;return-((~e&s)+le)}return e}function Xa(r,t){let e=L(r,"value");const n=BigInt(J(t,"width")),s=le<<n-le;if(e<mi){e=-e,P(e<=s,"too low","NUMERIC_FAULT",{operation:"toTwos",fault:"overflow",value:r});const i=(le<<n)-le;return(~e&i)+le}else P(e<s,"too high","NUMERIC_FAULT",{operation:"toTwos",fault:"overflow",value:r});return e}function Ps(r,t){const e=wi(r,"value"),n=BigInt(J(t,"bits"));return e&(le<<n)-le}function L(r,t){switch(typeof r){case"bigint":return r;case"number":return y(Number.isInteger(r),"underflow",t||"value",r),y(r>=-yr&&r<=yr,"overflow",t||"value",r),BigInt(r);case"string":try{if(r==="")throw new Error("empty string");return r[0]==="-"&&r[1]!=="-"?-BigInt(r.substring(1)):BigInt(r)}catch(e){y(!1,`invalid BigNumberish string: ${e.message}`,t||"value",r)}}y(!1,"invalid BigNumberish value",t||"value",r)}function wi(r,t){const e=L(r,t);return P(e>=mi,"unsigned value cannot be negative","NUMERIC_FAULT",{fault:"overflow",operation:"getUint",value:r}),e}const qa="0123456789abcdef";function bo(r){if(r instanceof Uint8Array){let t="0x0";for(const e of r)t+=qa[e>>4],t+=qa[e&15];return BigInt(t)}return L(r)}function J(r,t){switch(typeof r){case"bigint":return y(r>=-yr&&r<=yr,"overflow",t||"value",r),Number(r);case"number":return y(Number.isInteger(r),"underflow",t||"value",r),y(r>=-yr&&r<=yr,"overflow",t||"value",r),r;case"string":try{if(r==="")throw new Error("empty string");return J(BigInt(r),t)}catch(e){y(!1,`invalid numeric string: ${e.message}`,t||"value",r)}}y(!1,"invalid numeric value",t||"value",r)}function hf(r){return J(bo(r))}function cn(r,t){let n=wi(r,"value").toString(16);if(t==null)n.length%2&&(n="0"+n);else{const s=J(t,"width");for(P(s*2>=n.length,`value exceeds width (${s} bits)`,"NUMERIC_FAULT",{operation:"toBeHex",fault:"overflow",value:r});n.length<s*2;)n="0"+n}return"0x"+n}function zt(r){const t=wi(r,"value");if(t===mi)return new Uint8Array([]);let e=t.toString(16);e.length%2&&(e="0"+e);const n=new Uint8Array(e.length/2);for(let s=0;s<n.length;s++){const i=s*2;n[s]=parseInt(e.substring(i,i+2),16)}return n}function mr(r){let t=F(uf(r)?r:zt(r)).substring(2);for(;t.startsWith("0");)t=t.substring(1);return t===""&&(t="0"),"0x"+t}const df="123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";BigInt(0);const $a=BigInt(58);function pf(r){let t=bo(X(r)),e="";for(;t;)e=df[Number(t%$a)]+e,t/=$a;return e}function gf(r){r=atob(r);const t=new Uint8Array(r.length);for(let e=0;e<r.length;e++)t[e]=r.charCodeAt(e);return X(t)}function yf(r){const t=X(r);let e="";for(let n=0;n<t.length;n++)e+=String.fromCharCode(t[n]);return btoa(e)}class tc{constructor(t,e,n){A(this,"filter");A(this,"emitter");b(this,Rr,void 0);d(this,Rr,e),M(this,{emitter:t,filter:n})}async removeListener(){l(this,Rr)!=null&&await this.emitter.off(this.filter,l(this,Rr))}}Rr=new WeakMap;function mf(r,t,e,n,s){y(!1,`invalid codepoint at offset ${t}; ${r}`,"bytes",e)}function ec(r,t,e,n,s){if(r==="BAD_PREFIX"||r==="UNEXPECTED_CONTINUE"){let i=0;for(let o=t+1;o<e.length&&e[o]>>6===2;o++)i++;return i}return r==="OVERRUN"?e.length-t-1:0}function wf(r,t,e,n,s){return r==="OVERLONG"?(y(typeof s=="number","invalid bad code point for replacement","badCodepoint",s),n.push(s),0):(n.push(65533),ec(r,t,e))}const Af=Object.freeze({error:mf,ignore:ec,replace:wf});function bf(r,t){t==null&&(t=Af.error);const e=X(r,"bytes"),n=[];let s=0;for(;s<e.length;){const i=e[s++];if(!(i>>7)){n.push(i);continue}let o=null,a=null;if((i&224)===192)o=1,a=127;else if((i&240)===224)o=2,a=2047;else if((i&248)===240)o=3,a=65535;else{(i&192)===128?s+=t("UNEXPECTED_CONTINUE",s-1,e,n):s+=t("BAD_PREFIX",s-1,e,n);continue}if(s-1+o>=e.length){s+=t("OVERRUN",s-1,e,n);continue}let c=i&(1<<8-o-1)-1;for(let u=0;u<o;u++){let f=e[s];if((f&192)!=128){s+=t("MISSING_CONTINUE",s,e,n),c=null;break}c=c<<6|f&63,s++}if(c!==null){if(c>1114111){s+=t("OUT_OF_RANGE",s-1-o,e,n,c);continue}if(c>=55296&&c<=57343){s+=t("UTF16_SURROGATE",s-1-o,e,n,c);continue}if(c<=a){s+=t("OVERLONG",s-1-o,e,n,c);continue}n.push(c)}}return n}function Ue(r,t){t!=null&&(cf(t),r=r.normalize(t));let e=[];for(let n=0;n<r.length;n++){const s=r.charCodeAt(n);if(s<128)e.push(s);else if(s<2048)e.push(s>>6|192),e.push(s&63|128);else if((s&64512)==55296){n++;const i=r.charCodeAt(n);y(n<r.length&&(i&64512)===56320,"invalid surrogate pair","str",r);const o=65536+((s&1023)<<10)+(i&1023);e.push(o>>18|240),e.push(o>>12&63|128),e.push(o>>6&63|128),e.push(o&63|128)}else e.push(s>>12|224),e.push(s>>6&63|128),e.push(s&63|128)}return new Uint8Array(e)}function Ef(r){return r.map(t=>t<=65535?String.fromCharCode(t):(t-=65536,String.fromCharCode((t>>10&1023)+55296,(t&1023)+56320))).join("")}function Eo(r,t){return Ef(bf(r,t))}function nc(r){async function t(e,n){const s=e.url.split(":")[0].toLowerCase();P(s==="http"||s==="https",`unsupported protocol ${s}`,"UNSUPPORTED_OPERATION",{info:{protocol:s},operation:"request"}),P(s==="https"||!e.credentials||e.allowInsecureAuthentication,"insecure authorized connections unsupported","UNSUPPORTED_OPERATION",{operation:"request"});let i;if(n){const h=new AbortController;i=h.signal,n.addListener(()=>{h.abort()})}const o={method:e.method,headers:new Headers(Array.from(e)),body:e.body||void 0,signal:i},a=await fetch(e.url,o),c={};a.headers.forEach((h,g)=>{c[g.toLowerCase()]=h});const u=await a.arrayBuffer(),f=u==null?null:new Uint8Array(u);return{statusCode:a.status,statusMessage:a.statusText,headers:c,body:f}}return t}const vf=12,xf=250;let rc=nc();const Pf=new RegExp("^data:([^;:]*)?(;base64)?,(.*)$","i"),Nf=new RegExp("^ipfs://(ipfs/)?(.*)$","i");let vo=!1;async function sc(r,t){try{const e=r.match(Pf);if(!e)throw new Error("invalid data");return new ln(200,"OK",{"content-type":e[1]||"text/plain"},e[2]?gf(e[3]):Cf(e[3]))}catch{return new ln(599,"BAD REQUEST (invalid data: URI)",{},null,new un(r))}}function ic(r){async function t(e,n){try{const s=e.match(Nf);if(!s)throw new Error("invalid link");return new un(`${r}${s[2]}`)}catch{return new ln(599,"BAD REQUEST (invalid IPFS URI)",{},null,new un(e))}}return t}const Ai={data:sc,ipfs:ic("https://gateway.ipfs.io/ipfs/")},oc=new WeakMap;class Tf{constructor(t){b(this,Kn,void 0);b(this,yn,void 0);d(this,Kn,[]),d(this,yn,!1),oc.set(t,()=>{if(!l(this,yn)){d(this,yn,!0);for(const e of l(this,Kn))setTimeout(()=>{e()},0);d(this,Kn,[])}})}addListener(t){P(!l(this,yn),"singal already cancelled","UNSUPPORTED_OPERATION",{operation:"fetchCancelSignal.addCancelListener"}),l(this,Kn).push(t)}get cancelled(){return l(this,yn)}checkSignal(){P(!this.cancelled,"cancelled","CANCELLED",{})}}Kn=new WeakMap,yn=new WeakMap;function bi(r){if(r==null)throw new Error("missing signal; should not happen");return r.checkSignal(),r}const eo=class eo{constructor(t){b(this,Xn);b(this,kr,void 0);b(this,Sr,void 0);b(this,ge,void 0);b(this,Ve,void 0);b(this,Ur,void 0);b(this,Dr,void 0);b(this,At,void 0);b(this,Wt,void 0);b(this,Je,void 0);b(this,Wn,void 0);b(this,Yn,void 0);b(this,Zn,void 0);b(this,Te,void 0);b(this,je,void 0);b(this,mn,void 0);d(this,Dr,String(t)),d(this,kr,!1),d(this,Sr,!0),d(this,ge,{}),d(this,Ve,""),d(this,Ur,3e5),d(this,je,{slotInterval:xf,maxAttempts:vf}),d(this,mn,null)}get url(){return l(this,Dr)}set url(t){d(this,Dr,String(t))}get body(){return l(this,At)==null?null:new Uint8Array(l(this,At))}set body(t){if(t==null)d(this,At,void 0),d(this,Wt,void 0);else if(typeof t=="string")d(this,At,Ue(t)),d(this,Wt,"text/plain");else if(t instanceof Uint8Array)d(this,At,t),d(this,Wt,"application/octet-stream");else if(typeof t=="object")d(this,At,Ue(JSON.stringify(t))),d(this,Wt,"application/json");else throw new Error("invalid body")}hasBody(){return l(this,At)!=null}get method(){return l(this,Ve)?l(this,Ve):this.hasBody()?"POST":"GET"}set method(t){t==null&&(t=""),d(this,Ve,String(t).toUpperCase())}get headers(){const t=Object.assign({},l(this,ge));return l(this,Je)&&(t.authorization=`Basic ${yf(Ue(l(this,Je)))}`),this.allowGzip&&(t["accept-encoding"]="gzip"),t["content-type"]==null&&l(this,Wt)&&(t["content-type"]=l(this,Wt)),this.body&&(t["content-length"]=String(this.body.length)),t}getHeader(t){return this.headers[t.toLowerCase()]}setHeader(t,e){l(this,ge)[String(t).toLowerCase()]=String(e)}clearHeaders(){d(this,ge,{})}[Symbol.iterator](){const t=this.headers,e=Object.keys(t);let n=0;return{next:()=>{if(n<e.length){const s=e[n++];return{value:[s,t[s]],done:!1}}return{value:void 0,done:!0}}}}get credentials(){return l(this,Je)||null}setCredentials(t,e){y(!t.match(/:/),"invalid basic authentication username","username","[REDACTED]"),d(this,Je,`${t}:${e}`)}get allowGzip(){return l(this,Sr)}set allowGzip(t){d(this,Sr,!!t)}get allowInsecureAuthentication(){return!!l(this,kr)}set allowInsecureAuthentication(t){d(this,kr,!!t)}get timeout(){return l(this,Ur)}set timeout(t){y(t>=0,"timeout must be non-zero","timeout",t),d(this,Ur,t)}get preflightFunc(){return l(this,Wn)||null}set preflightFunc(t){d(this,Wn,t)}get processFunc(){return l(this,Yn)||null}set processFunc(t){d(this,Yn,t)}get retryFunc(){return l(this,Zn)||null}set retryFunc(t){d(this,Zn,t)}get getUrlFunc(){return l(this,mn)||rc}set getUrlFunc(t){d(this,mn,t)}toString(){return`<FetchRequest method=${JSON.stringify(this.method)} url=${JSON.stringify(this.url)} headers=${JSON.stringify(this.headers)} body=${l(this,At)?F(l(this,At)):"null"}>`}setThrottleParams(t){t.slotInterval!=null&&(l(this,je).slotInterval=t.slotInterval),t.maxAttempts!=null&&(l(this,je).maxAttempts=t.maxAttempts)}send(){return P(l(this,Te)==null,"request already sent","UNSUPPORTED_OPERATION",{operation:"fetchRequest.send"}),d(this,Te,new Tf(this)),I(this,Xn,di).call(this,0,ac()+this.timeout,0,this,new ln(0,"",{},null,this))}cancel(){P(l(this,Te)!=null,"request has not been sent","UNSUPPORTED_OPERATION",{operation:"fetchRequest.cancel"});const t=oc.get(this);if(!t)throw new Error("missing signal; should not happen");t()}redirect(t){const e=this.url.split(":")[0].toLowerCase(),n=t.split(":")[0].toLowerCase();P(this.method==="GET"&&(e!=="https"||n!=="http")&&t.match(/^https?:/),"unsupported redirect","UNSUPPORTED_OPERATION",{operation:`redirect(${this.method} ${JSON.stringify(this.url)} => ${JSON.stringify(t)})`});const s=new eo(t);return s.method="GET",s.allowGzip=this.allowGzip,s.timeout=this.timeout,d(s,ge,Object.assign({},l(this,ge))),l(this,At)&&d(s,At,new Uint8Array(l(this,At))),d(s,Wt,l(this,Wt)),s}clone(){const t=new eo(this.url);return d(t,Ve,l(this,Ve)),l(this,At)&&d(t,At,l(this,At)),d(t,Wt,l(this,Wt)),d(t,ge,Object.assign({},l(this,ge))),d(t,Je,l(this,Je)),this.allowGzip&&(t.allowGzip=!0),t.timeout=this.timeout,this.allowInsecureAuthentication&&(t.allowInsecureAuthentication=!0),d(t,Wn,l(this,Wn)),d(t,Yn,l(this,Yn)),d(t,Zn,l(this,Zn)),d(t,mn,l(this,mn)),t}static lockConfig(){vo=!0}static getGateway(t){return Ai[t.toLowerCase()]||null}static registerGateway(t,e){if(t=t.toLowerCase(),t==="http"||t==="https")throw new Error(`cannot intercept ${t}; use registerGetUrl`);if(vo)throw new Error("gateways locked");Ai[t]=e}static registerGetUrl(t){if(vo)throw new Error("gateways locked");rc=t}static createGetUrlFunc(t){return nc()}static createDataGateway(){return sc}static createIpfsGatewayFunc(t){return ic(t)}};kr=new WeakMap,Sr=new WeakMap,ge=new WeakMap,Ve=new WeakMap,Ur=new WeakMap,Dr=new WeakMap,At=new WeakMap,Wt=new WeakMap,Je=new WeakMap,Wn=new WeakMap,Yn=new WeakMap,Zn=new WeakMap,Te=new WeakMap,je=new WeakMap,mn=new WeakMap,Xn=new WeakSet,di=async function(t,e,n,s,i){var f,h,g;if(t>=l(this,je).maxAttempts)return i.makeServerError("exceeded maximum retry limit");P(ac()<=e,"timeout","TIMEOUT",{operation:"request.send",reason:"timeout",request:s}),n>0&&await Of(n);let o=this.clone();const a=(o.url.split(":")[0]||"").toLowerCase();if(a in Ai){const w=await Ai[a](o.url,bi(l(s,Te)));if(w instanceof ln){let E=w;if(this.processFunc){bi(l(s,Te));try{E=await this.processFunc(o,E)}catch(m){(m.throttle==null||typeof m.stall!="number")&&E.makeServerError("error in post-processing function",m).assertOk()}}return E}o=w}this.preflightFunc&&(o=await this.preflightFunc(o));const c=await this.getUrlFunc(o,bi(l(s,Te)));let u=new ln(c.statusCode,c.statusMessage,c.headers,c.body,s);if(u.statusCode===301||u.statusCode===302){try{const w=u.headers.location||"";return I(f=o.redirect(w),Xn,di).call(f,t+1,e,0,s,u)}catch{}return u}else if(u.statusCode===429&&(this.retryFunc==null||await this.retryFunc(o,u,t))){const w=u.headers["retry-after"];let E=l(this,je).slotInterval*Math.trunc(Math.random()*Math.pow(2,t));return typeof w=="string"&&w.match(/^[1-9][0-9]*$/)&&(E=parseInt(w)),I(h=o.clone(),Xn,di).call(h,t+1,e,E,s,u)}if(this.processFunc){bi(l(s,Te));try{u=await this.processFunc(o,u)}catch(w){(w.throttle==null||typeof w.stall!="number")&&u.makeServerError("error in post-processing function",w).assertOk();let E=l(this,je).slotInterval*Math.trunc(Math.random()*Math.pow(2,t));return w.stall>=0&&(E=w.stall),I(g=o.clone(),Xn,di).call(g,t+1,e,E,s,u)}}return u};let un=eo;const Ca=class Ca{constructor(t,e,n,s,i){b(this,js,void 0);b(this,zs,void 0);b(this,Ks,void 0);b(this,ye,void 0);b(this,Fr,void 0);b(this,qn,void 0);d(this,js,t),d(this,zs,e),d(this,Ks,Object.keys(n).reduce((o,a)=>(o[a.toLowerCase()]=String(n[a]),o),{})),d(this,ye,s==null?null:new Uint8Array(s)),d(this,Fr,i||null),d(this,qn,{message:""})}toString(){return`<FetchResponse status=${this.statusCode} body=${l(this,ye)?F(l(this,ye)):"null"}>`}get statusCode(){return l(this,js)}get statusMessage(){return l(this,zs)}get headers(){return Object.assign({},l(this,Ks))}get body(){return l(this,ye)==null?null:new Uint8Array(l(this,ye))}get bodyText(){try{return l(this,ye)==null?"":Eo(l(this,ye))}catch{P(!1,"response body is not valid UTF-8 data","UNSUPPORTED_OPERATION",{operation:"bodyText",info:{response:this}})}}get bodyJson(){try{return JSON.parse(this.bodyText)}catch{P(!1,"response body is not valid JSON","UNSUPPORTED_OPERATION",{operation:"bodyJson",info:{response:this}})}}[Symbol.iterator](){const t=this.headers,e=Object.keys(t);let n=0;return{next:()=>{if(n<e.length){const s=e[n++];return{value:[s,t[s]],done:!1}}return{value:void 0,done:!0}}}}makeServerError(t,e){let n;t?n=`CLIENT ESCALATED SERVER ERROR (${this.statusCode} ${this.statusMessage}; ${t})`:(t=`${this.statusCode} ${this.statusMessage}`,n=`CLIENT ESCALATED SERVER ERROR (${t})`);const s=new Ca(599,n,this.headers,this.body,l(this,Fr)||void 0);return d(s,qn,{message:t,error:e}),s}throwThrottleError(t,e){e==null?e=-1:y(Number.isInteger(e)&&e>=0,"invalid stall timeout","stall",e);const n=new Error(t||"throttling requests");throw M(n,{stall:e,throttle:!0}),n}getHeader(t){return this.headers[t.toLowerCase()]}hasBody(){return l(this,ye)!=null}get request(){return l(this,Fr)}ok(){return l(this,qn).message===""&&this.statusCode>=200&&this.statusCode<300}assertOk(){if(this.ok())return;let{message:t,error:e}=l(this,qn);t===""&&(t=`server response ${this.statusCode} ${this.statusMessage}`),P(!1,t,"SERVER_ERROR",{request:this.request||"unknown request",response:this,error:e})}};js=new WeakMap,zs=new WeakMap,Ks=new WeakMap,ye=new WeakMap,Fr=new WeakMap,qn=new WeakMap;let ln=Ca;function ac(){return new Date().getTime()}function Cf(r){return Ue(r.replace(/%([0-9a-f][0-9a-f])/gi,(t,e)=>String.fromCharCode(parseInt(e,16))))}function Of(r){return new Promise(t=>setTimeout(t,r))}function If(r){let t=r.toString(16);for(;t.length<2;)t="0"+t;return"0x"+t}function cc(r,t,e){let n=0;for(let s=0;s<e;s++)n=n*256+r[t+s];return n}function uc(r,t,e,n){const s=[];for(;e<t+1+n;){const i=lc(r,e);s.push(i.result),e+=i.consumed,P(e<=t+1+n,"child data too short","BUFFER_OVERRUN",{buffer:r,length:n,offset:t})}return{consumed:1+n,result:s}}function lc(r,t){P(r.length!==0,"data too short","BUFFER_OVERRUN",{buffer:r,length:0,offset:1});const e=n=>{P(n<=r.length,"data short segment too short","BUFFER_OVERRUN",{buffer:r,length:r.length,offset:n})};if(r[t]>=248){const n=r[t]-247;e(t+1+n);const s=cc(r,t+1,n);return e(t+1+n+s),uc(r,t,t+1+n,n+s)}else if(r[t]>=192){const n=r[t]-192;return e(t+1+n),uc(r,t,t+1,n)}else if(r[t]>=184){const n=r[t]-183;e(t+1+n);const s=cc(r,t+1,n);e(t+1+n+s);const i=F(r.slice(t+1+n,t+1+n+s));return{consumed:1+n+s,result:i}}else if(r[t]>=128){const n=r[t]-128;e(t+1+n);const s=F(r.slice(t+1,t+1+n));return{consumed:1+n,result:s}}return{consumed:1,result:If(r[t])}}function xo(r){const t=X(r,"data"),e=lc(t,0);return y(e.consumed===t.length,"unexpected junk after rlp payload","data",r),e.result}function fc(r){const t=[];for(;r;)t.unshift(r&255),r>>=8;return t}function hc(r){if(Array.isArray(r)){let n=[];if(r.forEach(function(i){n=n.concat(hc(i))}),n.length<=55)return n.unshift(192+n.length),n;const s=fc(n.length);return s.unshift(247+s.length),s.concat(n)}const t=Array.prototype.slice.call(X(r,"object"));if(t.length===1&&t[0]<=127)return t;if(t.length<=55)return t.unshift(128+t.length),t;const e=fc(t.length);return e.unshift(183+e.length),e.concat(t)}const dc="0123456789abcdef";function Ns(r){let t="0x";for(const e of hc(r))t+=dc[e>>4],t+=dc[e&15];return t}const kt=32,Po=new Uint8Array(kt),Bf=["then"],Ei={};function Ts(r,t){const e=new Error(`deferred error during ABI decoding triggered accessing ${r}`);throw e.error=t,e}const Ws=class Ws extends Array{constructor(...e){const n=e[0];let s=e[1],i=(e[2]||[]).slice(),o=!0;n!==Ei&&(s=e,i=[],o=!1);super(s.length);b(this,wn,void 0);s.forEach((c,u)=>{this[u]=c});const a=i.reduce((c,u)=>(typeof u=="string"&&c.set(u,(c.get(u)||0)+1),c),new Map);if(d(this,wn,Object.freeze(s.map((c,u)=>{const f=i[u];return f!=null&&a.get(f)===1?f:null}))),!!o)return Object.freeze(this),new Proxy(this,{get:(c,u,f)=>{if(typeof u=="string"){if(u.match(/^[0-9]+$/)){const g=J(u,"%index");if(g<0||g>=this.length)throw new RangeError("out of result range");const w=c[g];return w instanceof Error&&Ts(`index ${g}`,w),w}if(Bf.indexOf(u)>=0)return Reflect.get(c,u,f);const h=c[u];if(h instanceof Function)return function(...g){return h.apply(this===f?c:this,g)};if(!(u in c))return c.getValue.apply(this===f?c:this,[u])}return Reflect.get(c,u,f)}})}toArray(){const e=[];return this.forEach((n,s)=>{n instanceof Error&&Ts(`index ${s}`,n),e.push(n)}),e}toObject(){return l(this,wn).reduce((e,n,s)=>(P(n!=null,"value at index ${ index } unnamed","UNSUPPORTED_OPERATION",{operation:"toObject()"}),n in e||(e[n]=this.getValue(n)),e),{})}slice(e,n){e==null&&(e=0),e<0&&(e+=this.length,e<0&&(e=0)),n==null&&(n=this.length),n<0&&(n+=this.length,n<0&&(n=0)),n>this.length&&(n=this.length);const s=[],i=[];for(let o=e;o<n;o++)s.push(this[o]),i.push(l(this,wn)[o]);return new Ws(Ei,s,i)}filter(e,n){const s=[],i=[];for(let o=0;o<this.length;o++){const a=this[o];a instanceof Error&&Ts(`index ${o}`,a),e.call(n,a,o,this)&&(s.push(a),i.push(l(this,wn)[o]))}return new Ws(Ei,s,i)}map(e,n){const s=[];for(let i=0;i<this.length;i++){const o=this[i];o instanceof Error&&Ts(`index ${i}`,o),s.push(e.call(n,o,i,this))}return s}getValue(e){const n=l(this,wn).indexOf(e);if(n===-1)return;const s=this[n];return s instanceof Error&&Ts(`property ${JSON.stringify(e)}`,s.error),s}static fromItems(e,n){return new Ws(Ei,e,n)}};wn=new WeakMap;let vi=Ws;function pc(r){let t=zt(r);return P(t.length<=kt,"value out-of-bounds","BUFFER_OVERRUN",{buffer:t,length:kt,offset:t.length}),t.length!==kt&&(t=Mt(yt([Po.slice(t.length%kt),t]))),t}class De{constructor(t,e,n,s){A(this,"name");A(this,"type");A(this,"localName");A(this,"dynamic");M(this,{name:t,type:e,localName:n,dynamic:s},{name:"string",type:"string",localName:"string",dynamic:"boolean"})}_throwError(t,e){y(!1,t,this.localName,e)}}class No{constructor(){b(this,Lr);b(this,ze,void 0);b(this,$n,void 0);d(this,ze,[]),d(this,$n,0)}get data(){return yt(l(this,ze))}get length(){return l(this,$n)}appendWriter(t){return I(this,Lr,fo).call(this,Mt(t.data))}writeBytes(t){let e=Mt(t);const n=e.length%kt;return n&&(e=Mt(yt([e,Po.slice(n)]))),I(this,Lr,fo).call(this,e)}writeValue(t){return I(this,Lr,fo).call(this,pc(t))}writeUpdatableValue(){const t=l(this,ze).length;return l(this,ze).push(Po),d(this,$n,l(this,$n)+kt),e=>{l(this,ze)[t]=pc(e)}}}ze=new WeakMap,$n=new WeakMap,Lr=new WeakSet,fo=function(t){return l(this,ze).push(t),d(this,$n,l(this,$n)+t.length),t.length};const Oa=class Oa{constructor(t,e){b(this,no);A(this,"allowLoose");b(this,Yt,void 0);b(this,ee,void 0);M(this,{allowLoose:!!e}),d(this,Yt,Mt(t)),d(this,ee,0)}get data(){return F(l(this,Yt))}get dataLength(){return l(this,Yt).length}get consumed(){return l(this,ee)}get bytes(){return new Uint8Array(l(this,Yt))}subReader(t){return new Oa(l(this,Yt).slice(l(this,ee)+t),this.allowLoose)}readBytes(t,e){let n=I(this,no,ql).call(this,0,t,!!e);return d(this,ee,l(this,ee)+n.length),n.slice(0,t)}readValue(){return bo(this.readBytes(kt))}readIndex(){return hf(this.readBytes(kt))}};Yt=new WeakMap,ee=new WeakMap,no=new WeakSet,ql=function(t,e,n){let s=Math.ceil(e/kt)*kt;return l(this,ee)+s>l(this,Yt).length&&(this.allowLoose&&n&&l(this,ee)+e<=l(this,Yt).length?s=e:P(!1,"data out-of-bounds","BUFFER_OVERRUN",{buffer:Mt(l(this,Yt)),length:l(this,Yt).length,offset:l(this,ee)+s})),l(this,Yt).slice(l(this,ee),l(this,ee)+s)};let To=Oa;function xi(r){if(!Number.isSafeInteger(r)||r<0)throw new Error(`Wrong positive integer: ${r}`)}function Co(r,...t){if(!(r instanceof Uint8Array))throw new Error("Expected Uint8Array");if(t.length>0&&!t.includes(r.length))throw new Error(`Expected Uint8Array of length ${t}, not of length=${r.length}`)}function Rf(r){if(typeof r!="function"||typeof r.create!="function")throw new Error("Hash should be wrapped by utils.wrapConstructor");xi(r.outputLen),xi(r.blockLen)}function wr(r,t=!0){if(r.destroyed)throw new Error("Hash instance has been destroyed");if(t&&r.finished)throw new Error("Hash#digest() has already been called")}function gc(r,t){Co(r);const e=t.outputLen;if(r.length<e)throw new Error(`digestInto() expects output buffer of length at least ${e}`)}const Oo=typeof globalThis=="object"&&"crypto"in globalThis?globalThis.crypto:void 0;/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */const yc=r=>r instanceof Uint8Array,kf=r=>new Uint32Array(r.buffer,r.byteOffset,Math.floor(r.byteLength/4)),Io=r=>new DataView(r.buffer,r.byteOffset,r.byteLength),xe=(r,t)=>r<<32-t|r>>>t;if(!(new Uint8Array(new Uint32Array([287454020]).buffer)[0]===68))throw new Error("Non little-endian hardware is not supported");function Sf(r){if(typeof r!="string")throw new Error(`utf8ToBytes expected string, got ${typeof r}`);return new Uint8Array(new TextEncoder().encode(r))}function Pi(r){if(typeof r=="string"&&(r=Sf(r)),!yc(r))throw new Error(`expected Uint8Array, got ${typeof r}`);return r}function Uf(...r){const t=new Uint8Array(r.reduce((n,s)=>n+s.length,0));let e=0;return r.forEach(n=>{if(!yc(n))throw new Error("Uint8Array expected");t.set(n,e),e+=n.length}),t}class Bo{clone(){return this._cloneInto()}}function mc(r){const t=n=>r().update(Pi(n)).digest(),e=r();return t.outputLen=e.outputLen,t.blockLen=e.blockLen,t.create=()=>r(),t}function Df(r=32){if(Oo&&typeof Oo.getRandomValues=="function")return Oo.getRandomValues(new Uint8Array(r));throw new Error("crypto.getRandomValues must be defined")}class wc extends Bo{constructor(t,e){super(),this.finished=!1,this.destroyed=!1,Rf(t);const n=Pi(e);if(this.iHash=t.create(),typeof this.iHash.update!="function")throw new Error("Expected instance of class which extends utils.Hash");this.blockLen=this.iHash.blockLen,this.outputLen=this.iHash.outputLen;const s=this.blockLen,i=new Uint8Array(s);i.set(n.length>s?t.create().update(n).digest():n);for(let o=0;o<i.length;o++)i[o]^=54;this.iHash.update(i),this.oHash=t.create();for(let o=0;o<i.length;o++)i[o]^=106;this.oHash.update(i),i.fill(0)}update(t){return wr(this),this.iHash.update(t),this}digestInto(t){wr(this),Co(t,this.outputLen),this.finished=!0,this.iHash.digestInto(t),this.oHash.update(t),this.oHash.digestInto(t),this.destroy()}digest(){const t=new Uint8Array(this.oHash.outputLen);return this.digestInto(t),t}_cloneInto(t){t||(t=Object.create(Object.getPrototypeOf(this),{}));const{oHash:e,iHash:n,finished:s,destroyed:i,blockLen:o,outputLen:a}=this;return t=t,t.finished=s,t.destroyed=i,t.blockLen=o,t.outputLen=a,t.oHash=e._cloneInto(t.oHash),t.iHash=n._cloneInto(t.iHash),t}destroy(){this.destroyed=!0,this.oHash.destroy(),this.iHash.destroy()}}const Ac=(r,t,e)=>new wc(r,t).update(e).digest();Ac.create=(r,t)=>new wc(r,t);function Ff(r,t,e,n){if(typeof r.setBigUint64=="function")return r.setBigUint64(t,e,n);const s=BigInt(32),i=BigInt(4294967295),o=Number(e>>s&i),a=Number(e&i),c=n?4:0,u=n?0:4;r.setUint32(t+c,o,n),r.setUint32(t+u,a,n)}class Lf extends Bo{constructor(t,e,n,s){super(),this.blockLen=t,this.outputLen=e,this.padOffset=n,this.isLE=s,this.finished=!1,this.length=0,this.pos=0,this.destroyed=!1,this.buffer=new Uint8Array(t),this.view=Io(this.buffer)}update(t){wr(this);const{view:e,buffer:n,blockLen:s}=this;t=Pi(t);const i=t.length;for(let o=0;o<i;){const a=Math.min(s-this.pos,i-o);if(a===s){const c=Io(t);for(;s<=i-o;o+=s)this.process(c,o);continue}n.set(t.subarray(o,o+a),this.pos),this.pos+=a,o+=a,this.pos===s&&(this.process(e,0),this.pos=0)}return this.length+=t.length,this.roundClean(),this}digestInto(t){wr(this),gc(t,this),this.finished=!0;const{buffer:e,view:n,blockLen:s,isLE:i}=this;let{pos:o}=this;e[o++]=128,this.buffer.subarray(o).fill(0),this.padOffset>s-o&&(this.process(n,0),o=0);for(let h=o;h<s;h++)e[h]=0;Ff(n,s-8,BigInt(this.length*8),i),this.process(n,0);const a=Io(t),c=this.outputLen;if(c%4)throw new Error("_sha2: outputLen should be aligned to 32bit");const u=c/4,f=this.get();if(u>f.length)throw new Error("_sha2: outputLen bigger than state");for(let h=0;h<u;h++)a.setUint32(4*h,f[h],i)}digest(){const{buffer:t,outputLen:e}=this;this.digestInto(t);const n=t.slice(0,e);return this.destroy(),n}_cloneInto(t){t||(t=new this.constructor),t.set(...this.get());const{blockLen:e,buffer:n,length:s,finished:i,destroyed:o,pos:a}=this;return t.length=s,t.pos=a,t.finished=i,t.destroyed=o,s%e&&t.buffer.set(n),t}}const Mf=(r,t,e)=>r&t^~r&e,Gf=(r,t,e)=>r&t^r&e^t&e,Qf=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),fn=new Uint32Array([1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225]),hn=new Uint32Array(64);class Hf extends Lf{constructor(){super(64,32,8,!1),this.A=fn[0]|0,this.B=fn[1]|0,this.C=fn[2]|0,this.D=fn[3]|0,this.E=fn[4]|0,this.F=fn[5]|0,this.G=fn[6]|0,this.H=fn[7]|0}get(){const{A:t,B:e,C:n,D:s,E:i,F:o,G:a,H:c}=this;return[t,e,n,s,i,o,a,c]}set(t,e,n,s,i,o,a,c){this.A=t|0,this.B=e|0,this.C=n|0,this.D=s|0,this.E=i|0,this.F=o|0,this.G=a|0,this.H=c|0}process(t,e){for(let h=0;h<16;h++,e+=4)hn[h]=t.getUint32(e,!1);for(let h=16;h<64;h++){const g=hn[h-15],w=hn[h-2],E=xe(g,7)^xe(g,18)^g>>>3,m=xe(w,17)^xe(w,19)^w>>>10;hn[h]=m+hn[h-7]+E+hn[h-16]|0}let{A:n,B:s,C:i,D:o,E:a,F:c,G:u,H:f}=this;for(let h=0;h<64;h++){const g=xe(a,6)^xe(a,11)^xe(a,25),w=f+g+Mf(a,c,u)+Qf[h]+hn[h]|0,m=(xe(n,2)^xe(n,13)^xe(n,22))+Gf(n,s,i)|0;f=u,u=c,c=a,a=o+w|0,o=i,i=s,s=n,n=w+m|0}n=n+this.A|0,s=s+this.B|0,i=i+this.C|0,o=o+this.D|0,a=a+this.E|0,c=c+this.F|0,u=u+this.G|0,f=f+this.H|0,this.set(n,s,i,o,a,c,u,f)}roundClean(){hn.fill(0)}destroy(){this.set(0,0,0,0,0,0,0,0),this.buffer.fill(0)}}const _f=mc(()=>new Hf),Ni=BigInt(2**32-1),bc=BigInt(32);function Vf(r,t=!1){return t?{h:Number(r&Ni),l:Number(r>>bc&Ni)}:{h:Number(r>>bc&Ni)|0,l:Number(r&Ni)|0}}function Jf(r,t=!1){let e=new Uint32Array(r.length),n=new Uint32Array(r.length);for(let s=0;s<r.length;s++){const{h:i,l:o}=Vf(r[s],t);[e[s],n[s]]=[i,o]}return[e,n]}const jf=(r,t,e)=>r<<e|t>>>32-e,zf=(r,t,e)=>t<<e|r>>>32-e,Kf=(r,t,e)=>t<<e-32|r>>>64-e,Wf=(r,t,e)=>r<<e-32|t>>>64-e,[Ec,vc,xc]=[[],[],[]],Yf=BigInt(0),Cs=BigInt(1),Zf=BigInt(2),Xf=BigInt(7),qf=BigInt(256),$f=BigInt(113);for(let r=0,t=Cs,e=1,n=0;r<24;r++){[e,n]=[n,(2*e+3*n)%5],Ec.push(2*(5*n+e)),vc.push((r+1)*(r+2)/2%64);let s=Yf;for(let i=0;i<7;i++)t=(t<<Cs^(t>>Xf)*$f)%qf,t&Zf&&(s^=Cs<<(Cs<<BigInt(i))-Cs);xc.push(s)}const[th,eh]=Jf(xc,!0),Pc=(r,t,e)=>e>32?Kf(r,t,e):jf(r,t,e),Nc=(r,t,e)=>e>32?Wf(r,t,e):zf(r,t,e);function nh(r,t=24){const e=new Uint32Array(10);for(let n=24-t;n<24;n++){for(let o=0;o<10;o++)e[o]=r[o]^r[o+10]^r[o+20]^r[o+30]^r[o+40];for(let o=0;o<10;o+=2){const a=(o+8)%10,c=(o+2)%10,u=e[c],f=e[c+1],h=Pc(u,f,1)^e[a],g=Nc(u,f,1)^e[a+1];for(let w=0;w<50;w+=10)r[o+w]^=h,r[o+w+1]^=g}let s=r[2],i=r[3];for(let o=0;o<24;o++){const a=vc[o],c=Pc(s,i,a),u=Nc(s,i,a),f=Ec[o];s=r[f],i=r[f+1],r[f]=c,r[f+1]=u}for(let o=0;o<50;o+=10){for(let a=0;a<10;a++)e[a]=r[o+a];for(let a=0;a<10;a++)r[o+a]^=~e[(a+2)%10]&e[(a+4)%10]}r[0]^=th[n],r[1]^=eh[n]}e.fill(0)}class Ro extends Bo{constructor(t,e,n,s=!1,i=24){if(super(),this.blockLen=t,this.suffix=e,this.outputLen=n,this.enableXOF=s,this.rounds=i,this.pos=0,this.posOut=0,this.finished=!1,this.destroyed=!1,xi(n),0>=this.blockLen||this.blockLen>=200)throw new Error("Sha3 supports only keccak-f1600 function");this.state=new Uint8Array(200),this.state32=kf(this.state)}keccak(){nh(this.state32,this.rounds),this.posOut=0,this.pos=0}update(t){wr(this);const{blockLen:e,state:n}=this;t=Pi(t);const s=t.length;for(let i=0;i<s;){const o=Math.min(e-this.pos,s-i);for(let a=0;a<o;a++)n[this.pos++]^=t[i++];this.pos===e&&this.keccak()}return this}finish(){if(this.finished)return;this.finished=!0;const{state:t,suffix:e,pos:n,blockLen:s}=this;t[n]^=e,e&128&&n===s-1&&this.keccak(),t[s-1]^=128,this.keccak()}writeInto(t){wr(this,!1),Co(t),this.finish();const e=this.state,{blockLen:n}=this;for(let s=0,i=t.length;s<i;){this.posOut>=n&&this.keccak();const o=Math.min(n-this.posOut,i-s);t.set(e.subarray(this.posOut,this.posOut+o),s),this.posOut+=o,s+=o}return t}xofInto(t){if(!this.enableXOF)throw new Error("XOF is not possible for this instance");return this.writeInto(t)}xof(t){return xi(t),this.xofInto(new Uint8Array(t))}digestInto(t){if(gc(t,this),this.finished)throw new Error("digest() was already called");return this.writeInto(t),this.destroy(),t}digest(){return this.digestInto(new Uint8Array(this.outputLen))}destroy(){this.destroyed=!0,this.state.fill(0)}_cloneInto(t){const{blockLen:e,suffix:n,outputLen:s,rounds:i,enableXOF:o}=this;return t||(t=new Ro(e,n,s,o,i)),t.state32.set(this.state32),t.pos=this.pos,t.posOut=this.posOut,t.finished=this.finished,t.rounds=i,t.suffix=n,t.outputLen=s,t.enableXOF=o,t.destroyed=this.destroyed,t}}const rh=((r,t,e)=>mc(()=>new Ro(t,r,e)))(1,136,256/8);let Tc=!1;const Cc=function(r){return rh(r)};let Oc=Cc;function ot(r){const t=X(r,"data");return F(Oc(t))}ot._=Cc,ot.lock=function(){Tc=!0},ot.register=function(r){if(Tc)throw new TypeError("keccak256 is locked");Oc=r},Object.freeze(ot);/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */const Ic=BigInt(0),Ti=BigInt(1),sh=BigInt(2),Ci=r=>r instanceof Uint8Array,ih=Array.from({length:256},(r,t)=>t.toString(16).padStart(2,"0"));function Ar(r){if(!Ci(r))throw new Error("Uint8Array expected");let t="";for(let e=0;e<r.length;e++)t+=ih[r[e]];return t}function Bc(r){const t=r.toString(16);return t.length&1?`0${t}`:t}function ko(r){if(typeof r!="string")throw new Error("hex string expected, got "+typeof r);return BigInt(r===""?"0":`0x${r}`)}function br(r){if(typeof r!="string")throw new Error("hex string expected, got "+typeof r);const t=r.length;if(t%2)throw new Error("padded hex string expected, got unpadded hex of length "+t);const e=new Uint8Array(t/2);for(let n=0;n<e.length;n++){const s=n*2,i=r.slice(s,s+2),o=Number.parseInt(i,16);if(Number.isNaN(o)||o<0)throw new Error("Invalid byte sequence");e[n]=o}return e}function Fn(r){return ko(Ar(r))}function So(r){if(!Ci(r))throw new Error("Uint8Array expected");return ko(Ar(Uint8Array.from(r).reverse()))}function Er(r,t){return br(r.toString(16).padStart(t*2,"0"))}function Uo(r,t){return Er(r,t).reverse()}function oh(r){return br(Bc(r))}function fe(r,t,e){let n;if(typeof t=="string")try{n=br(t)}catch(i){throw new Error(`${r} must be valid hex string, got "${t}". Cause: ${i}`)}else if(Ci(t))n=Uint8Array.from(t);else throw new Error(`${r} must be hex string or Uint8Array`);const s=n.length;if(typeof e=="number"&&s!==e)throw new Error(`${r} expected ${e} bytes, got ${s}`);return n}function Os(...r){const t=new Uint8Array(r.reduce((n,s)=>n+s.length,0));let e=0;return r.forEach(n=>{if(!Ci(n))throw new Error("Uint8Array expected");t.set(n,e),e+=n.length}),t}function ah(r,t){if(r.length!==t.length)return!1;for(let e=0;e<r.length;e++)if(r[e]!==t[e])return!1;return!0}function ch(r){if(typeof r!="string")throw new Error(`utf8ToBytes expected string, got ${typeof r}`);return new Uint8Array(new TextEncoder().encode(r))}function uh(r){let t;for(t=0;r>Ic;r>>=Ti,t+=1);return t}function lh(r,t){return r>>BigInt(t)&Ti}const fh=(r,t,e)=>r|(e?Ti:Ic)<<BigInt(t),Do=r=>(sh<<BigInt(r-1))-Ti,Fo=r=>new Uint8Array(r),Rc=r=>Uint8Array.from(r);function kc(r,t,e){if(typeof r!="number"||r<2)throw new Error("hashLen must be a number");if(typeof t!="number"||t<2)throw new Error("qByteLen must be a number");if(typeof e!="function")throw new Error("hmacFn must be a function");let n=Fo(r),s=Fo(r),i=0;const o=()=>{n.fill(1),s.fill(0),i=0},a=(...h)=>e(s,n,...h),c=(h=Fo())=>{s=a(Rc([0]),h),n=a(),h.length!==0&&(s=a(Rc([1]),h),n=a())},u=()=>{if(i++>=1e3)throw new Error("drbg: tried 1000 values");let h=0;const g=[];for(;h<t;){n=a();const w=n.slice();g.push(w),h+=n.length}return Os(...g)};return(h,g)=>{o(),c(h);let w;for(;!(w=g(u()));)c();return o(),w}}const hh={bigint:r=>typeof r=="bigint",function:r=>typeof r=="function",boolean:r=>typeof r=="boolean",string:r=>typeof r=="string",stringOrUint8Array:r=>typeof r=="string"||r instanceof Uint8Array,isSafeInteger:r=>Number.isSafeInteger(r),array:r=>Array.isArray(r),field:(r,t)=>t.Fp.isValid(r),hash:r=>typeof r=="function"&&Number.isSafeInteger(r.outputLen)};function Is(r,t,e={}){const n=(s,i,o)=>{const a=hh[i];if(typeof a!="function")throw new Error(`Invalid validator "${i}", expected function`);const c=r[s];if(!(o&&c===void 0)&&!a(c,r))throw new Error(`Invalid param ${String(s)}=${c} (${typeof c}), expected ${i}`)};for(const[s,i]of Object.entries(t))n(s,i,!1);for(const[s,i]of Object.entries(e))n(s,i,!0);return r}const dh=Object.freeze(Object.defineProperty({__proto__:null,bitGet:lh,bitLen:uh,bitMask:Do,bitSet:fh,bytesToHex:Ar,bytesToNumberBE:Fn,bytesToNumberLE:So,concatBytes:Os,createHmacDrbg:kc,ensureBytes:fe,equalBytes:ah,hexToBytes:br,hexToNumber:ko,numberToBytesBE:Er,numberToBytesLE:Uo,numberToHexUnpadded:Bc,numberToVarBytesBE:oh,utf8ToBytes:ch,validateObject:Is},Symbol.toStringTag,{value:"Module"}));/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */const wt=BigInt(0),ft=BigInt(1),Ln=BigInt(2),ph=BigInt(3),Lo=BigInt(4),Sc=BigInt(5),Uc=BigInt(8);BigInt(9),BigInt(16);function Gt(r,t){const e=r%t;return e>=wt?e:t+e}function gh(r,t,e){if(e<=wt||t<wt)throw new Error("Expected power/modulo > 0");if(e===ft)return wt;let n=ft;for(;t>wt;)t&ft&&(n=n*r%e),r=r*r%e,t>>=ft;return n}function qt(r,t,e){let n=r;for(;t-- >wt;)n*=n,n%=e;return n}function Mo(r,t){if(r===wt||t<=wt)throw new Error(`invert: expected positive integers, got n=${r} mod=${t}`);let e=Gt(r,t),n=t,s=wt,i=ft;for(;e!==wt;){const a=n/e,c=n%e,u=s-i*a;n=e,e=c,s=i,i=u}if(n!==ft)throw new Error("invert: does not exist");return Gt(s,t)}function yh(r){const t=(r-ft)/Ln;let e,n,s;for(e=r-ft,n=0;e%Ln===wt;e/=Ln,n++);for(s=Ln;s<r&&gh(s,t,r)!==r-ft;s++);if(n===1){const o=(r+ft)/Lo;return function(c,u){const f=c.pow(u,o);if(!c.eql(c.sqr(f),u))throw new Error("Cannot find square root");return f}}const i=(e+ft)/Ln;return function(a,c){if(a.pow(c,t)===a.neg(a.ONE))throw new Error("Cannot find square root");let u=n,f=a.pow(a.mul(a.ONE,s),e),h=a.pow(c,i),g=a.pow(c,e);for(;!a.eql(g,a.ONE);){if(a.eql(g,a.ZERO))return a.ZERO;let w=1;for(let m=a.sqr(g);w<u&&!a.eql(m,a.ONE);w++)m=a.sqr(m);const E=a.pow(f,ft<<BigInt(u-w-1));f=a.sqr(E),h=a.mul(h,E),g=a.mul(g,f),u=w}return h}}function mh(r){if(r%Lo===ph){const t=(r+ft)/Lo;return function(n,s){const i=n.pow(s,t);if(!n.eql(n.sqr(i),s))throw new Error("Cannot find square root");return i}}if(r%Uc===Sc){const t=(r-Sc)/Uc;return function(n,s){const i=n.mul(s,Ln),o=n.pow(i,t),a=n.mul(s,o),c=n.mul(n.mul(a,Ln),o),u=n.mul(a,n.sub(c,n.ONE));if(!n.eql(n.sqr(u),s))throw new Error("Cannot find square root");return u}}return yh(r)}const wh=["create","isValid","is0","neg","inv","sqrt","sqr","eql","add","sub","mul","pow","div","addN","subN","mulN","sqrN"];function Ah(r){const t={ORDER:"bigint",MASK:"bigint",BYTES:"isSafeInteger",BITS:"isSafeInteger"},e=wh.reduce((n,s)=>(n[s]="function",n),t);return Is(r,e)}function bh(r,t,e){if(e<wt)throw new Error("Expected power > 0");if(e===wt)return r.ONE;if(e===ft)return t;let n=r.ONE,s=t;for(;e>wt;)e&ft&&(n=r.mul(n,s)),s=r.sqr(s),e>>=ft;return n}function Eh(r,t){const e=new Array(t.length),n=t.reduce((i,o,a)=>r.is0(o)?i:(e[a]=i,r.mul(i,o)),r.ONE),s=r.inv(n);return t.reduceRight((i,o,a)=>r.is0(o)?i:(e[a]=r.mul(i,e[a]),r.mul(i,o)),s),e}function Dc(r,t){const e=t!==void 0?t:r.toString(2).length,n=Math.ceil(e/8);return{nBitLength:e,nByteLength:n}}function vh(r,t,e=!1,n={}){if(r<=wt)throw new Error(`Expected Field ORDER > 0, got ${r}`);const{nBitLength:s,nByteLength:i}=Dc(r,t);if(i>2048)throw new Error("Field lengths over 2048 bytes are not supported");const o=mh(r),a=Object.freeze({ORDER:r,BITS:s,BYTES:i,MASK:Do(s),ZERO:wt,ONE:ft,create:c=>Gt(c,r),isValid:c=>{if(typeof c!="bigint")throw new Error(`Invalid field element: expected bigint, got ${typeof c}`);return wt<=c&&c<r},is0:c=>c===wt,isOdd:c=>(c&ft)===ft,neg:c=>Gt(-c,r),eql:(c,u)=>c===u,sqr:c=>Gt(c*c,r),add:(c,u)=>Gt(c+u,r),sub:(c,u)=>Gt(c-u,r),mul:(c,u)=>Gt(c*u,r),pow:(c,u)=>bh(a,c,u),div:(c,u)=>Gt(c*Mo(u,r),r),sqrN:c=>c*c,addN:(c,u)=>c+u,subN:(c,u)=>c-u,mulN:(c,u)=>c*u,inv:c=>Mo(c,r),sqrt:n.sqrt||(c=>o(a,c)),invertBatch:c=>Eh(a,c),cmov:(c,u,f)=>f?u:c,toBytes:c=>e?Uo(c,i):Er(c,i),fromBytes:c=>{if(c.length!==i)throw new Error(`Fp.fromBytes: expected ${i}, got ${c.length}`);return e?So(c):Fn(c)}});return Object.freeze(a)}function Fc(r){if(typeof r!="bigint")throw new Error("field order must be bigint");const t=r.toString(2).length;return Math.ceil(t/8)}function Lc(r){const t=Fc(r);return t+Math.ceil(t/2)}function xh(r,t,e=!1){const n=r.length,s=Fc(t),i=Lc(t);if(n<16||n<i||n>1024)throw new Error(`expected ${i}-1024 bytes of input, got ${n}`);const o=e?Fn(r):So(r),a=Gt(o,t-ft)+ft;return e?Uo(a,s):Er(a,s)}/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */const Ph=BigInt(0),Go=BigInt(1);function Nh(r,t){const e=(s,i)=>{const o=i.negate();return s?o:i},n=s=>{const i=Math.ceil(t/s)+1,o=2**(s-1);return{windows:i,windowSize:o}};return{constTimeNegate:e,unsafeLadder(s,i){let o=r.ZERO,a=s;for(;i>Ph;)i&Go&&(o=o.add(a)),a=a.double(),i>>=Go;return o},precomputeWindow(s,i){const{windows:o,windowSize:a}=n(i),c=[];let u=s,f=u;for(let h=0;h<o;h++){f=u,c.push(f);for(let g=1;g<a;g++)f=f.add(u),c.push(f);u=f.double()}return c},wNAF(s,i,o){const{windows:a,windowSize:c}=n(s);let u=r.ZERO,f=r.BASE;const h=BigInt(2**s-1),g=2**s,w=BigInt(s);for(let E=0;E<a;E++){const m=E*c;let x=Number(o&h);o>>=w,x>c&&(x-=g,o+=Go);const v=m,B=m+Math.abs(x)-1,C=E%2!==0,H=x<0;x===0?f=f.add(e(C,i[v])):u=u.add(e(H,i[B]))}return{p:u,f}},wNAFCached(s,i,o,a){const c=s._WINDOW_SIZE||1;let u=i.get(s);return u||(u=this.precomputeWindow(s,c),c!==1&&i.set(s,a(u))),this.wNAF(c,u,o)}}}function Mc(r){return Ah(r.Fp),Is(r,{n:"bigint",h:"bigint",Gx:"field",Gy:"field"},{nBitLength:"isSafeInteger",nByteLength:"isSafeInteger"}),Object.freeze({...Dc(r.n,r.nBitLength),...r,p:r.Fp.ORDER})}/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */function Th(r){const t=Mc(r);Is(t,{a:"field",b:"field"},{allowedPrivateKeyLengths:"array",wrapPrivateKey:"boolean",isTorsionFree:"function",clearCofactor:"function",allowInfinityPoint:"boolean",fromBytes:"function",toBytes:"function"});const{endo:e,Fp:n,a:s}=t;if(e){if(!n.eql(s,n.ZERO))throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");if(typeof e!="object"||typeof e.beta!="bigint"||typeof e.splitScalar!="function")throw new Error("Expected endomorphism with beta: bigint and splitScalar: function")}return Object.freeze({...t})}const{bytesToNumberBE:Ch,hexToBytes:Oh}=dh,Mn={Err:class extends Error{constructor(t=""){super(t)}},_parseInt(r){const{Err:t}=Mn;if(r.length<2||r[0]!==2)throw new t("Invalid signature integer tag");const e=r[1],n=r.subarray(2,e+2);if(!e||n.length!==e)throw new t("Invalid signature integer: wrong length");if(n[0]&128)throw new t("Invalid signature integer: negative");if(n[0]===0&&!(n[1]&128))throw new t("Invalid signature integer: unnecessary leading zero");return{d:Ch(n),l:r.subarray(e+2)}},toSig(r){const{Err:t}=Mn,e=typeof r=="string"?Oh(r):r;if(!(e instanceof Uint8Array))throw new Error("ui8a expected");let n=e.length;if(n<2||e[0]!=48)throw new t("Invalid signature tag");if(e[1]!==n-2)throw new t("Invalid signature: incorrect length");const{d:s,l:i}=Mn._parseInt(e.subarray(2)),{d:o,l:a}=Mn._parseInt(i);if(a.length)throw new t("Invalid signature: left bytes after parsing");return{r:s,s:o}},hexFromSig(r){const t=u=>Number.parseInt(u[0],16)&8?"00"+u:u,e=u=>{const f=u.toString(16);return f.length&1?`0${f}`:f},n=t(e(r.s)),s=t(e(r.r)),i=n.length/2,o=s.length/2,a=e(i),c=e(o);return`30${e(o+i+4)}02${c}${s}02${a}${n}`}},Fe=BigInt(0),$t=BigInt(1);BigInt(2);const Gc=BigInt(3);BigInt(4);function Ih(r){const t=Th(r),{Fp:e}=t,n=t.toBytes||((E,m,x)=>{const v=m.toAffine();return Os(Uint8Array.from([4]),e.toBytes(v.x),e.toBytes(v.y))}),s=t.fromBytes||(E=>{const m=E.subarray(1),x=e.fromBytes(m.subarray(0,e.BYTES)),v=e.fromBytes(m.subarray(e.BYTES,2*e.BYTES));return{x,y:v}});function i(E){const{a:m,b:x}=t,v=e.sqr(E),B=e.mul(v,E);return e.add(e.add(B,e.mul(E,m)),x)}if(!e.eql(e.sqr(t.Gy),i(t.Gx)))throw new Error("bad generator point: equation left != right");function o(E){return typeof E=="bigint"&&Fe<E&&E<t.n}function a(E){if(!o(E))throw new Error("Expected valid bigint: 0 < bigint < curve.n")}function c(E){const{allowedPrivateKeyLengths:m,nByteLength:x,wrapPrivateKey:v,n:B}=t;if(m&&typeof E!="bigint"){if(E instanceof Uint8Array&&(E=Ar(E)),typeof E!="string"||!m.includes(E.length))throw new Error("Invalid key");E=E.padStart(x*2,"0")}let C;try{C=typeof E=="bigint"?E:Fn(fe("private key",E,x))}catch{throw new Error(`private key must be ${x} bytes, hex or bigint, not ${typeof E}`)}return v&&(C=Gt(C,B)),a(C),C}const u=new Map;function f(E){if(!(E instanceof h))throw new Error("ProjectivePoint expected")}class h{constructor(m,x,v){if(this.px=m,this.py=x,this.pz=v,m==null||!e.isValid(m))throw new Error("x required");if(x==null||!e.isValid(x))throw new Error("y required");if(v==null||!e.isValid(v))throw new Error("z required")}static fromAffine(m){const{x,y:v}=m||{};if(!m||!e.isValid(x)||!e.isValid(v))throw new Error("invalid affine point");if(m instanceof h)throw new Error("projective point not allowed");const B=C=>e.eql(C,e.ZERO);return B(x)&&B(v)?h.ZERO:new h(x,v,e.ONE)}get x(){return this.toAffine().x}get y(){return this.toAffine().y}static normalizeZ(m){const x=e.invertBatch(m.map(v=>v.pz));return m.map((v,B)=>v.toAffine(x[B])).map(h.fromAffine)}static fromHex(m){const x=h.fromAffine(s(fe("pointHex",m)));return x.assertValidity(),x}static fromPrivateKey(m){return h.BASE.multiply(c(m))}_setWindowSize(m){this._WINDOW_SIZE=m,u.delete(this)}assertValidity(){if(this.is0()){if(t.allowInfinityPoint&&!e.is0(this.py))return;throw new Error("bad point: ZERO")}const{x:m,y:x}=this.toAffine();if(!e.isValid(m)||!e.isValid(x))throw new Error("bad point: x or y not FE");const v=e.sqr(x),B=i(m);if(!e.eql(v,B))throw new Error("bad point: equation left != right");if(!this.isTorsionFree())throw new Error("bad point: not in prime-order subgroup")}hasEvenY(){const{y:m}=this.toAffine();if(e.isOdd)return!e.isOdd(m);throw new Error("Field doesn't support isOdd")}equals(m){f(m);const{px:x,py:v,pz:B}=this,{px:C,py:H,pz:G}=m,U=e.eql(e.mul(x,G),e.mul(C,B)),D=e.eql(e.mul(v,G),e.mul(H,B));return U&&D}negate(){return new h(this.px,e.neg(this.py),this.pz)}double(){const{a:m,b:x}=t,v=e.mul(x,Gc),{px:B,py:C,pz:H}=this;let G=e.ZERO,U=e.ZERO,D=e.ZERO,k=e.mul(B,B),lt=e.mul(C,C),q=e.mul(H,H),Z=e.mul(B,C);return Z=e.add(Z,Z),D=e.mul(B,H),D=e.add(D,D),G=e.mul(m,D),U=e.mul(v,q),U=e.add(G,U),G=e.sub(lt,U),U=e.add(lt,U),U=e.mul(G,U),G=e.mul(Z,G),D=e.mul(v,D),q=e.mul(m,q),Z=e.sub(k,q),Z=e.mul(m,Z),Z=e.add(Z,D),D=e.add(k,k),k=e.add(D,k),k=e.add(k,q),k=e.mul(k,Z),U=e.add(U,k),q=e.mul(C,H),q=e.add(q,q),k=e.mul(q,Z),G=e.sub(G,k),D=e.mul(q,lt),D=e.add(D,D),D=e.add(D,D),new h(G,U,D)}add(m){f(m);const{px:x,py:v,pz:B}=this,{px:C,py:H,pz:G}=m;let U=e.ZERO,D=e.ZERO,k=e.ZERO;const lt=t.a,q=e.mul(t.b,Gc);let Z=e.mul(x,C),Ft=e.mul(v,H),Ot=e.mul(B,G),mt=e.add(x,v),T=e.add(C,H);mt=e.mul(mt,T),T=e.add(Z,Ft),mt=e.sub(mt,T),T=e.add(x,B);let S=e.add(C,G);return T=e.mul(T,S),S=e.add(Z,Ot),T=e.sub(T,S),S=e.add(v,B),U=e.add(H,G),S=e.mul(S,U),U=e.add(Ft,Ot),S=e.sub(S,U),k=e.mul(lt,T),U=e.mul(q,Ot),k=e.add(U,k),U=e.sub(Ft,k),k=e.add(Ft,k),D=e.mul(U,k),Ft=e.add(Z,Z),Ft=e.add(Ft,Z),Ot=e.mul(lt,Ot),T=e.mul(q,T),Ft=e.add(Ft,Ot),Ot=e.sub(Z,Ot),Ot=e.mul(lt,Ot),T=e.add(T,Ot),Z=e.mul(Ft,T),D=e.add(D,Z),Z=e.mul(S,T),U=e.mul(mt,U),U=e.sub(U,Z),Z=e.mul(mt,Ft),k=e.mul(S,k),k=e.add(k,Z),new h(U,D,k)}subtract(m){return this.add(m.negate())}is0(){return this.equals(h.ZERO)}wNAF(m){return w.wNAFCached(this,u,m,x=>{const v=e.invertBatch(x.map(B=>B.pz));return x.map((B,C)=>B.toAffine(v[C])).map(h.fromAffine)})}multiplyUnsafe(m){const x=h.ZERO;if(m===Fe)return x;if(a(m),m===$t)return this;const{endo:v}=t;if(!v)return w.unsafeLadder(this,m);let{k1neg:B,k1:C,k2neg:H,k2:G}=v.splitScalar(m),U=x,D=x,k=this;for(;C>Fe||G>Fe;)C&$t&&(U=U.add(k)),G&$t&&(D=D.add(k)),k=k.double(),C>>=$t,G>>=$t;return B&&(U=U.negate()),H&&(D=D.negate()),D=new h(e.mul(D.px,v.beta),D.py,D.pz),U.add(D)}multiply(m){a(m);let x=m,v,B;const{endo:C}=t;if(C){const{k1neg:H,k1:G,k2neg:U,k2:D}=C.splitScalar(x);let{p:k,f:lt}=this.wNAF(G),{p:q,f:Z}=this.wNAF(D);k=w.constTimeNegate(H,k),q=w.constTimeNegate(U,q),q=new h(e.mul(q.px,C.beta),q.py,q.pz),v=k.add(q),B=lt.add(Z)}else{const{p:H,f:G}=this.wNAF(x);v=H,B=G}return h.normalizeZ([v,B])[0]}multiplyAndAddUnsafe(m,x,v){const B=h.BASE,C=(G,U)=>U===Fe||U===$t||!G.equals(B)?G.multiplyUnsafe(U):G.multiply(U),H=C(this,x).add(C(m,v));return H.is0()?void 0:H}toAffine(m){const{px:x,py:v,pz:B}=this,C=this.is0();m==null&&(m=C?e.ONE:e.inv(B));const H=e.mul(x,m),G=e.mul(v,m),U=e.mul(B,m);if(C)return{x:e.ZERO,y:e.ZERO};if(!e.eql(U,e.ONE))throw new Error("invZ was invalid");return{x:H,y:G}}isTorsionFree(){const{h:m,isTorsionFree:x}=t;if(m===$t)return!0;if(x)return x(h,this);throw new Error("isTorsionFree() has not been declared for the elliptic curve")}clearCofactor(){const{h:m,clearCofactor:x}=t;return m===$t?this:x?x(h,this):this.multiplyUnsafe(t.h)}toRawBytes(m=!0){return this.assertValidity(),n(h,this,m)}toHex(m=!0){return Ar(this.toRawBytes(m))}}h.BASE=new h(t.Gx,t.Gy,e.ONE),h.ZERO=new h(e.ZERO,e.ONE,e.ZERO);const g=t.nBitLength,w=Nh(h,t.endo?Math.ceil(g/2):g);return{CURVE:t,ProjectivePoint:h,normPrivateKeyToScalar:c,weierstrassEquation:i,isWithinCurveOrder:o}}function Bh(r){const t=Mc(r);return Is(t,{hash:"hash",hmac:"function",randomBytes:"function"},{bits2int:"function",bits2int_modN:"function",lowS:"boolean"}),Object.freeze({lowS:!0,...t})}function Rh(r){const t=Bh(r),{Fp:e,n}=t,s=e.BYTES+1,i=2*e.BYTES+1;function o(T){return Fe<T&&T<e.ORDER}function a(T){return Gt(T,n)}function c(T){return Mo(T,n)}const{ProjectivePoint:u,normPrivateKeyToScalar:f,weierstrassEquation:h,isWithinCurveOrder:g}=Ih({...t,toBytes(T,S,V){const tt=S.toAffine(),$=e.toBytes(tt.x),ht=Os;return V?ht(Uint8Array.from([S.hasEvenY()?2:3]),$):ht(Uint8Array.from([4]),$,e.toBytes(tt.y))},fromBytes(T){const S=T.length,V=T[0],tt=T.subarray(1);if(S===s&&(V===2||V===3)){const $=Fn(tt);if(!o($))throw new Error("Point is not on curve");const ht=h($);let It=e.sqrt(ht);const Bt=(It&$t)===$t;return(V&1)===1!==Bt&&(It=e.neg(It)),{x:$,y:It}}else if(S===i&&V===4){const $=e.fromBytes(tt.subarray(0,e.BYTES)),ht=e.fromBytes(tt.subarray(e.BYTES,2*e.BYTES));return{x:$,y:ht}}else throw new Error(`Point of length ${S} was invalid. Expected ${s} compressed bytes or ${i} uncompressed bytes`)}}),w=T=>Ar(Er(T,t.nByteLength));function E(T){const S=n>>$t;return T>S}function m(T){return E(T)?a(-T):T}const x=(T,S,V)=>Fn(T.slice(S,V));class v{constructor(S,V,tt){this.r=S,this.s=V,this.recovery=tt,this.assertValidity()}static fromCompact(S){const V=t.nByteLength;return S=fe("compactSignature",S,V*2),new v(x(S,0,V),x(S,V,2*V))}static fromDER(S){const{r:V,s:tt}=Mn.toSig(fe("DER",S));return new v(V,tt)}assertValidity(){if(!g(this.r))throw new Error("r must be 0 < r < CURVE.n");if(!g(this.s))throw new Error("s must be 0 < s < CURVE.n")}addRecoveryBit(S){return new v(this.r,this.s,S)}recoverPublicKey(S){const{r:V,s:tt,recovery:$}=this,ht=D(fe("msgHash",S));if($==null||![0,1,2,3].includes($))throw new Error("recovery id invalid");const It=$===2||$===3?V+t.n:V;if(It>=e.ORDER)throw new Error("recovery id 2 or 3 invalid");const Bt=$&1?"03":"02",be=u.fromHex(Bt+w(It)),Se=c(It),kn=a(-ht*Se),rn=a(tt*Se),ae=u.BASE.multiplyAndAddUnsafe(be,kn,rn);if(!ae)throw new Error("point at infinify");return ae.assertValidity(),ae}hasHighS(){return E(this.s)}normalizeS(){return this.hasHighS()?new v(this.r,a(-this.s),this.recovery):this}toDERRawBytes(){return br(this.toDERHex())}toDERHex(){return Mn.hexFromSig({r:this.r,s:this.s})}toCompactRawBytes(){return br(this.toCompactHex())}toCompactHex(){return w(this.r)+w(this.s)}}const B={isValidPrivateKey(T){try{return f(T),!0}catch{return!1}},normPrivateKeyToScalar:f,randomPrivateKey:()=>{const T=Lc(t.n);return xh(t.randomBytes(T),t.n)},precompute(T=8,S=u.BASE){return S._setWindowSize(T),S.multiply(BigInt(3)),S}};function C(T,S=!0){return u.fromPrivateKey(T).toRawBytes(S)}function H(T){const S=T instanceof Uint8Array,V=typeof T=="string",tt=(S||V)&&T.length;return S?tt===s||tt===i:V?tt===2*s||tt===2*i:T instanceof u}function G(T,S,V=!0){if(H(T))throw new Error("first arg must be private key");if(!H(S))throw new Error("second arg must be public key");return u.fromHex(S).multiply(f(T)).toRawBytes(V)}const U=t.bits2int||function(T){const S=Fn(T),V=T.length*8-t.nBitLength;return V>0?S>>BigInt(V):S},D=t.bits2int_modN||function(T){return a(U(T))},k=Do(t.nBitLength);function lt(T){if(typeof T!="bigint")throw new Error("bigint expected");if(!(Fe<=T&&T<k))throw new Error(`bigint expected < 2^${t.nBitLength}`);return Er(T,t.nByteLength)}function q(T,S,V=Z){if(["recovered","canonical"].some(Ee=>Ee in V))throw new Error("sign() legacy options not supported");const{hash:tt,randomBytes:$}=t;let{lowS:ht,prehash:It,extraEntropy:Bt}=V;ht==null&&(ht=!0),T=fe("msgHash",T),It&&(T=fe("prehashed msgHash",tt(T)));const be=D(T),Se=f(S),kn=[lt(Se),lt(be)];if(Bt!=null){const Ee=Bt===!0?$(e.BYTES):Bt;kn.push(fe("extraEntropy",Ee))}const rn=Os(...kn),ae=be;function Sn(Ee){const ve=U(Ee);if(!g(ve))return;const uo=c(ve),sn=u.BASE.multiply(ve).toAffine(),jt=a(sn.x);if(jt===Fe)return;const Un=a(uo*a(ae+jt*Se));if(Un===Fe)return;let dr=(sn.x===jt?0:2)|Number(sn.y&$t),li=Un;return ht&&E(Un)&&(li=m(Un),dr^=1),new v(jt,li,dr)}return{seed:rn,k2sig:Sn}}const Z={lowS:t.lowS,prehash:!1},Ft={lowS:t.lowS,prehash:!1};function Ot(T,S,V=Z){const{seed:tt,k2sig:$}=q(T,S,V),ht=t;return kc(ht.hash.outputLen,ht.nByteLength,ht.hmac)(tt,$)}u.BASE._setWindowSize(8);function mt(T,S,V,tt=Ft){var sn;const $=T;if(S=fe("msgHash",S),V=fe("publicKey",V),"strict"in tt)throw new Error("options.strict was renamed to lowS");const{lowS:ht,prehash:It}=tt;let Bt,be;try{if(typeof $=="string"||$ instanceof Uint8Array)try{Bt=v.fromDER($)}catch(jt){if(!(jt instanceof Mn.Err))throw jt;Bt=v.fromCompact($)}else if(typeof $=="object"&&typeof $.r=="bigint"&&typeof $.s=="bigint"){const{r:jt,s:Un}=$;Bt=new v(jt,Un)}else throw new Error("PARSE");be=u.fromHex(V)}catch(jt){if(jt.message==="PARSE")throw new Error("signature must be Signature instance, Uint8Array or hex string");return!1}if(ht&&Bt.hasHighS())return!1;It&&(S=t.hash(S));const{r:Se,s:kn}=Bt,rn=D(S),ae=c(kn),Sn=a(rn*ae),Ee=a(Se*ae),ve=(sn=u.BASE.multiplyAndAddUnsafe(be,Sn,Ee))==null?void 0:sn.toAffine();return ve?a(ve.x)===Se:!1}return{CURVE:t,getPublicKey:C,getSharedSecret:G,sign:Ot,verify:mt,ProjectivePoint:u,Signature:v,utils:B}}/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */function kh(r){return{hash:r,hmac:(t,...e)=>Ac(r,t,Uf(...e)),randomBytes:Df}}function Sh(r,t){const e=n=>Rh({...r,...kh(n)});return Object.freeze({...e(t),create:e})}/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */const Qc=BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"),Hc=BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"),Uh=BigInt(1),Qo=BigInt(2),_c=(r,t)=>(r+t/Qo)/t;function Dh(r){const t=Qc,e=BigInt(3),n=BigInt(6),s=BigInt(11),i=BigInt(22),o=BigInt(23),a=BigInt(44),c=BigInt(88),u=r*r*r%t,f=u*u*r%t,h=qt(f,e,t)*f%t,g=qt(h,e,t)*f%t,w=qt(g,Qo,t)*u%t,E=qt(w,s,t)*w%t,m=qt(E,i,t)*E%t,x=qt(m,a,t)*m%t,v=qt(x,c,t)*x%t,B=qt(v,a,t)*m%t,C=qt(B,e,t)*f%t,H=qt(C,o,t)*E%t,G=qt(H,n,t)*u%t,U=qt(G,Qo,t);if(!Ho.eql(Ho.sqr(U),r))throw new Error("Cannot find square root");return U}const Ho=vh(Qc,void 0,void 0,{sqrt:Dh}),dn=Sh({a:BigInt(0),b:BigInt(7),Fp:Ho,n:Hc,Gx:BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),Gy:BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),h:BigInt(1),lowS:!0,endo:{beta:BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),splitScalar:r=>{const t=Hc,e=BigInt("0x3086d221a7d46bcde86c90e49284eb15"),n=-Uh*BigInt("0xe4437ed6010e88286f547fa90abfe4c3"),s=BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"),i=e,o=BigInt("0x100000000000000000000000000000000"),a=_c(i*r,t),c=_c(-n*r,t);let u=Gt(r-a*e-c*s,t),f=Gt(-a*n-c*i,t);const h=u>o,g=f>o;if(h&&(u=t-u),g&&(f=t-f),u>o||f>o)throw new Error("splitScalar: Endomorphism failed, k="+r);return{k1neg:h,k1:u,k2neg:g,k2:f}}}},_f);BigInt(0),dn.ProjectivePoint;const _o="0x0000000000000000000000000000000000000000",Vc="0x0000000000000000000000000000000000000000000000000000000000000000",Jc=BigInt(0),jc=BigInt(1),zc=BigInt(2),Kc=BigInt(27),Wc=BigInt(28),Oi=BigInt(35),vr={};function Yc(r){return Dn(zt(r),32)}const me=class me{constructor(t,e,n,s){b(this,Mr,void 0);b(this,Gr,void 0);b(this,Qr,void 0);b(this,tr,void 0);yi(t,vr,"Signature"),d(this,Mr,e),d(this,Gr,n),d(this,Qr,s),d(this,tr,null)}get r(){return l(this,Mr)}set r(t){y(gr(t)===32,"invalid r","value",t),d(this,Mr,F(t))}get s(){return l(this,Gr)}set s(t){y(gr(t)===32,"invalid s","value",t);const e=F(t);y(parseInt(e.substring(0,3))<8,"non-canonical s","value",e),d(this,Gr,e)}get v(){return l(this,Qr)}set v(t){const e=J(t,"value");y(e===27||e===28,"invalid v","v",t),d(this,Qr,e)}get networkV(){return l(this,tr)}get legacyChainId(){const t=this.networkV;return t==null?null:me.getChainId(t)}get yParity(){return this.v===27?0:1}get yParityAndS(){const t=X(this.s);return this.yParity&&(t[0]|=128),F(t)}get compactSerialized(){return yt([this.r,this.yParityAndS])}get serialized(){return yt([this.r,this.s,this.yParity?"0x1c":"0x1b"])}[Symbol.for("nodejs.util.inspect.custom")](){return`Signature { r: "${this.r}", s: "${this.s}", yParity: ${this.yParity}, networkV: ${this.networkV} }`}clone(){const t=new me(vr,this.r,this.s,this.v);return this.networkV&&d(t,tr,this.networkV),t}toJSON(){const t=this.networkV;return{_type:"signature",networkV:t!=null?t.toString():null,r:this.r,s:this.s,v:this.v}}static getChainId(t){const e=L(t,"v");return e==Kc||e==Wc?Jc:(y(e>=Oi,"invalid EIP-155 v","v",t),(e-Oi)/zc)}static getChainIdV(t,e){return L(t)*zc+BigInt(35+e-27)}static getNormalizedV(t){const e=L(t);return e===Jc||e===Kc?27:e===jc||e===Wc?28:(y(e>=Oi,"invalid v","v",t),e&jc?27:28)}static from(t){function e(u,f){y(u,f,"signature",t)}if(t==null)return new me(vr,Vc,Vc,27);if(typeof t=="string"){const u=X(t,"signature");if(u.length===64){const f=F(u.slice(0,32)),h=u.slice(32,64),g=h[0]&128?28:27;return h[0]&=127,new me(vr,f,F(h),g)}if(u.length===65){const f=F(u.slice(0,32)),h=u.slice(32,64);e((h[0]&128)===0,"non-canonical s");const g=me.getNormalizedV(u[64]);return new me(vr,f,F(h),g)}e(!1,"invalid raw signature length")}if(t instanceof me)return t.clone();const n=t.r;e(n!=null,"missing r");const s=Yc(n),i=function(u,f){if(u!=null)return Yc(u);if(f!=null){e(it(f,32),"invalid yParityAndS");const h=X(f);return h[0]&=127,F(h)}e(!1,"missing s")}(t.s,t.yParityAndS);e((X(i)[0]&128)==0,"non-canonical s");const{networkV:o,v:a}=function(u,f,h){if(u!=null){const g=L(u);return{networkV:g>=Oi?g:void 0,v:me.getNormalizedV(g)}}if(f!=null)return e(it(f,32),"invalid yParityAndS"),{v:X(f)[0]&128?28:27};if(h!=null){switch(J(h,"sig.yParity")){case 0:return{v:27};case 1:return{v:28}}e(!1,"invalid yParity")}e(!1,"missing v")}(t.v,t.yParityAndS,t.yParity),c=new me(vr,s,i,a);return o&&d(c,tr,o),e(t.yParity==null||J(t.yParity,"sig.yParity")===c.yParity,"yParity mismatch"),e(t.yParityAndS==null||t.yParityAndS===c.yParityAndS,"yParityAndS mismatch"),c}};Mr=new WeakMap,Gr=new WeakMap,Qr=new WeakMap,tr=new WeakMap;let he=me;const er=class er{constructor(t){b(this,Ke,void 0);y(gr(t)===32,"invalid private key","privateKey","[REDACTED]"),d(this,Ke,F(t))}get privateKey(){return l(this,Ke)}get publicKey(){return er.computePublicKey(l(this,Ke))}get compressedPublicKey(){return er.computePublicKey(l(this,Ke),!0)}sign(t){y(gr(t)===32,"invalid digest length","digest",t);const e=dn.sign(Mt(t),Mt(l(this,Ke)),{lowS:!0});return he.from({r:cn(e.r,32),s:cn(e.s,32),v:e.recovery?28:27})}computeSharedSecret(t){const e=er.computePublicKey(t);return F(dn.getSharedSecret(Mt(l(this,Ke)),X(e),!1))}static computePublicKey(t,e){let n=X(t,"key");if(n.length===32){const i=dn.getPublicKey(n,!!e);return F(i)}if(n.length===64){const i=new Uint8Array(65);i[0]=4,i.set(n,1),n=i}const s=dn.ProjectivePoint.fromHex(n);return F(s.toRawBytes(e))}static recoverPublicKey(t,e){y(gr(t)===32,"invalid digest length","digest",t);const n=he.from(e);let s=dn.Signature.fromCompact(Mt(yt([n.r,n.s])));s=s.addRecoveryBit(n.yParity);const i=s.recoverPublicKey(Mt(t));return y(i!=null,"invalid signautre for digest","signature",e),"0x"+i.toHex(!1)}static addPoints(t,e,n){const s=dn.ProjectivePoint.fromHex(er.computePublicKey(t).substring(2)),i=dn.ProjectivePoint.fromHex(er.computePublicKey(e).substring(2));return"0x"+s.add(i).toHex(!!n)}};Ke=new WeakMap;let Bs=er;const Fh=BigInt(0),Lh=BigInt(36);function Zc(r){r=r.toLowerCase();const t=r.substring(2).split(""),e=new Uint8Array(40);for(let s=0;s<40;s++)e[s]=t[s].charCodeAt(0);const n=X(ot(e));for(let s=0;s<40;s+=2)n[s>>1]>>4>=8&&(t[s]=t[s].toUpperCase()),(n[s>>1]&15)>=8&&(t[s+1]=t[s+1].toUpperCase());return"0x"+t.join("")}const Vo={};for(let r=0;r<10;r++)Vo[String(r)]=String(r);for(let r=0;r<26;r++)Vo[String.fromCharCode(65+r)]=String(10+r);const Xc=15;function Mh(r){r=r.toUpperCase(),r=r.substring(4)+r.substring(0,2)+"00";let t=r.split("").map(n=>Vo[n]).join("");for(;t.length>=Xc;){let n=t.substring(0,Xc);t=parseInt(n,10)%97+t.substring(n.length)}let e=String(98-parseInt(t,10)%97);for(;e.length<2;)e="0"+e;return e}const Gh=function(){const r={};for(let t=0;t<36;t++){const e="0123456789abcdefghijklmnopqrstuvwxyz"[t];r[e]=BigInt(t)}return r}();function Qh(r){r=r.toLowerCase();let t=Fh;for(let e=0;e<r.length;e++)t=t*Lh+Gh[r[e]];return t}function Y(r){if(y(typeof r=="string","invalid address","address",r),r.match(/^(0x)?[0-9a-fA-F]{40}$/)){r.startsWith("0x")||(r="0x"+r);const t=Zc(r);return y(!r.match(/([A-F].*[a-f])|([a-f].*[A-F])/)||t===r,"bad address checksum","address",r),t}if(r.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)){y(r.substring(2,4)===Mh(r),"bad icap checksum","address",r);let t=Qh(r.substring(4)).toString(16);for(;t.length<40;)t="0"+t;return Zc("0x"+t)}y(!1,"invalid address","address",r)}function Hh(r){const t=Y(r.from);let n=L(r.nonce,"tx.nonce").toString(16);return n==="0"?n="0x":n.length%2?n="0x0"+n:n="0x"+n,Y(ut(ot(Ns([t,n])),12))}function qc(r){return r&&typeof r.getAddress=="function"}async function Jo(r,t){const e=await t;return(e==null||e==="0x0000000000000000000000000000000000000000")&&(P(typeof r!="string","unconfigured name","UNCONFIGURED_NAME",{value:r}),y(!1,"invalid AddressLike value; did not resolve to a value address","target",r)),Y(e)}function St(r,t){if(typeof r=="string")return r.match(/^0x[0-9a-f]{40}$/i)?Y(r):(P(t!=null,"ENS resolution requires a provider","UNSUPPORTED_OPERATION",{operation:"resolveName"}),Jo(r,t.resolveName(r)));if(qc(r))return Jo(r,r.getAddress());if(r&&typeof r.then=="function")return Jo(r,r);y(!1,"unsupported addressable value","target",r)}const Le={};function R(r,t){let e=!1;return t<0&&(e=!0,t*=-1),new xt(Le,`${e?"":"u"}int${t}`,r,{signed:e,width:t})}function W(r,t){return new xt(Le,`bytes${t||""}`,r,{size:t})}const $c=Symbol.for("_ethers_typed"),We=class We{constructor(t,e,n,s){A(this,"type");A(this,"value");b(this,nr,void 0);A(this,"_typedSymbol");s==null&&(s=null),yi(Le,t,"Typed"),M(this,{_typedSymbol:$c,type:e,value:n}),d(this,nr,s),this.format()}format(){if(this.type==="array")throw new Error("");if(this.type==="dynamicArray")throw new Error("");return this.type==="tuple"?`tuple(${this.value.map(t=>t.format()).join(",")})`:this.type}defaultValue(){return 0}minValue(){return 0}maxValue(){return 0}isBigInt(){return!!this.type.match(/^u?int[0-9]+$/)}isData(){return this.type.startsWith("bytes")}isString(){return this.type==="string"}get tupleName(){if(this.type!=="tuple")throw TypeError("not a tuple");return l(this,nr)}get arrayLength(){if(this.type!=="array")throw TypeError("not an array");return l(this,nr)===!0?-1:l(this,nr)===!1?this.value.length:null}static from(t,e){return new We(Le,t,e)}static uint8(t){return R(t,8)}static uint16(t){return R(t,16)}static uint24(t){return R(t,24)}static uint32(t){return R(t,32)}static uint40(t){return R(t,40)}static uint48(t){return R(t,48)}static uint56(t){return R(t,56)}static uint64(t){return R(t,64)}static uint72(t){return R(t,72)}static uint80(t){return R(t,80)}static uint88(t){return R(t,88)}static uint96(t){return R(t,96)}static uint104(t){return R(t,104)}static uint112(t){return R(t,112)}static uint120(t){return R(t,120)}static uint128(t){return R(t,128)}static uint136(t){return R(t,136)}static uint144(t){return R(t,144)}static uint152(t){return R(t,152)}static uint160(t){return R(t,160)}static uint168(t){return R(t,168)}static uint176(t){return R(t,176)}static uint184(t){return R(t,184)}static uint192(t){return R(t,192)}static uint200(t){return R(t,200)}static uint208(t){return R(t,208)}static uint216(t){return R(t,216)}static uint224(t){return R(t,224)}static uint232(t){return R(t,232)}static uint240(t){return R(t,240)}static uint248(t){return R(t,248)}static uint256(t){return R(t,256)}static uint(t){return R(t,256)}static int8(t){return R(t,-8)}static int16(t){return R(t,-16)}static int24(t){return R(t,-24)}static int32(t){return R(t,-32)}static int40(t){return R(t,-40)}static int48(t){return R(t,-48)}static int56(t){return R(t,-56)}static int64(t){return R(t,-64)}static int72(t){return R(t,-72)}static int80(t){return R(t,-80)}static int88(t){return R(t,-88)}static int96(t){return R(t,-96)}static int104(t){return R(t,-104)}static int112(t){return R(t,-112)}static int120(t){return R(t,-120)}static int128(t){return R(t,-128)}static int136(t){return R(t,-136)}static int144(t){return R(t,-144)}static int152(t){return R(t,-152)}static int160(t){return R(t,-160)}static int168(t){return R(t,-168)}static int176(t){return R(t,-176)}static int184(t){return R(t,-184)}static int192(t){return R(t,-192)}static int200(t){return R(t,-200)}static int208(t){return R(t,-208)}static int216(t){return R(t,-216)}static int224(t){return R(t,-224)}static int232(t){return R(t,-232)}static int240(t){return R(t,-240)}static int248(t){return R(t,-248)}static int256(t){return R(t,-256)}static int(t){return R(t,-256)}static bytes1(t){return W(t,1)}static bytes2(t){return W(t,2)}static bytes3(t){return W(t,3)}static bytes4(t){return W(t,4)}static bytes5(t){return W(t,5)}static bytes6(t){return W(t,6)}static bytes7(t){return W(t,7)}static bytes8(t){return W(t,8)}static bytes9(t){return W(t,9)}static bytes10(t){return W(t,10)}static bytes11(t){return W(t,11)}static bytes12(t){return W(t,12)}static bytes13(t){return W(t,13)}static bytes14(t){return W(t,14)}static bytes15(t){return W(t,15)}static bytes16(t){return W(t,16)}static bytes17(t){return W(t,17)}static bytes18(t){return W(t,18)}static bytes19(t){return W(t,19)}static bytes20(t){return W(t,20)}static bytes21(t){return W(t,21)}static bytes22(t){return W(t,22)}static bytes23(t){return W(t,23)}static bytes24(t){return W(t,24)}static bytes25(t){return W(t,25)}static bytes26(t){return W(t,26)}static bytes27(t){return W(t,27)}static bytes28(t){return W(t,28)}static bytes29(t){return W(t,29)}static bytes30(t){return W(t,30)}static bytes31(t){return W(t,31)}static bytes32(t){return W(t,32)}static address(t){return new We(Le,"address",t)}static bool(t){return new We(Le,"bool",!!t)}static bytes(t){return new We(Le,"bytes",t)}static string(t){return new We(Le,"string",t)}static array(t,e){throw new Error("not implemented yet")}static tuple(t,e){throw new Error("not implemented yet")}static overrides(t){return new We(Le,"overrides",Object.assign({},t))}static isTyped(t){return t&&typeof t=="object"&&"_typedSymbol"in t&&t._typedSymbol===$c}static dereference(t,e){if(We.isTyped(t)){if(t.type!==e)throw new Error(`invalid type: expecetd ${e}, got ${t.type}`);return t.value}return t}};nr=new WeakMap;let xt=We;class _h extends De{constructor(t){super("address","address",t,!1)}defaultValue(){return"0x0000000000000000000000000000000000000000"}encode(t,e){let n=xt.dereference(e,"string");try{n=Y(n)}catch(s){return this._throwError(s.message,e)}return t.writeValue(n)}decode(t){return Y(cn(t.readValue(),20))}}class Vh extends De{constructor(e){super(e.name,e.type,"_",e.dynamic);A(this,"coder");this.coder=e}defaultValue(){return this.coder.defaultValue()}encode(e,n){return this.coder.encode(e,n)}decode(e){return this.coder.decode(e)}}function tu(r,t,e){let n=[];if(Array.isArray(e))n=e;else if(e&&typeof e=="object"){let c={};n=t.map(u=>{const f=u.localName;return P(f,"cannot encode object for signature with missing names","INVALID_ARGUMENT",{argument:"values",info:{coder:u},value:e}),P(!c[f],"cannot encode object for signature with duplicate names","INVALID_ARGUMENT",{argument:"values",info:{coder:u},value:e}),c[f]=!0,e[f]})}else y(!1,"invalid tuple value","tuple",e);y(t.length===n.length,"types/value length mismatch","tuple",e);let s=new No,i=new No,o=[];t.forEach((c,u)=>{let f=n[u];if(c.dynamic){let h=i.length;c.encode(i,f);let g=s.writeUpdatableValue();o.push(w=>{g(w+h)})}else c.encode(s,f)}),o.forEach(c=>{c(s.length)});let a=r.appendWriter(s);return a+=r.appendWriter(i),a}function eu(r,t){let e=[],n=[],s=r.subReader(0);return t.forEach(i=>{let o=null;if(i.dynamic){let a=r.readIndex(),c=s.subReader(a);try{o=i.decode(c)}catch(u){if(Xt(u,"BUFFER_OVERRUN"))throw u;o=u,o.baseType=i.name,o.name=i.localName,o.type=i.type}}else try{o=i.decode(r)}catch(a){if(Xt(a,"BUFFER_OVERRUN"))throw a;o=a,o.baseType=i.name,o.name=i.localName,o.type=i.type}if(o==null)throw new Error("investigate");e.push(o),n.push(i.localName||null)}),vi.fromItems(e,n)}class Jh extends De{constructor(e,n,s){const i=e.type+"["+(n>=0?n:"")+"]",o=n===-1||e.dynamic;super("array",i,s,o);A(this,"coder");A(this,"length");M(this,{coder:e,length:n})}defaultValue(){const e=this.coder.defaultValue(),n=[];for(let s=0;s<this.length;s++)n.push(e);return n}encode(e,n){const s=xt.dereference(n,"array");Array.isArray(s)||this._throwError("expected array value",s);let i=this.length;i===-1&&(i=s.length,e.writeValue(s.length)),Ka(s.length,i,"coder array"+(this.localName?" "+this.localName:""));let o=[];for(let a=0;a<s.length;a++)o.push(this.coder);return tu(e,o,s)}decode(e){let n=this.length;n===-1&&(n=e.readIndex(),P(n*kt<=e.dataLength,"insufficient data length","BUFFER_OVERRUN",{buffer:e.bytes,offset:n*kt,length:e.dataLength}));let s=[];for(let i=0;i<n;i++)s.push(new Vh(this.coder));return eu(e,s)}}class jh extends De{constructor(t){super("bool","bool",t,!1)}defaultValue(){return!1}encode(t,e){const n=xt.dereference(e,"bool");return t.writeValue(n?1:0)}decode(t){return!!t.readValue()}}class nu extends De{constructor(t,e){super(t,t,e,!0)}defaultValue(){return"0x"}encode(t,e){e=Mt(e);let n=t.writeValue(e.length);return n+=t.writeBytes(e),n}decode(t){return t.readBytes(t.readIndex(),!0)}}class zh extends nu{constructor(t){super("bytes",t)}decode(t){return F(super.decode(t))}}class Kh extends De{constructor(e,n){let s="bytes"+String(e);super(s,s,n,!1);A(this,"size");M(this,{size:e},{size:"number"})}defaultValue(){return"0x0000000000000000000000000000000000000000000000000000000000000000".substring(0,2+this.size*2)}encode(e,n){let s=Mt(xt.dereference(n,this.type));return s.length!==this.size&&this._throwError("incorrect data length",n),e.writeBytes(s)}decode(e){return F(e.readBytes(this.size))}}const Wh=new Uint8Array([]);class Yh extends De{constructor(t){super("null","",t,!1)}defaultValue(){return null}encode(t,e){return e!=null&&this._throwError("not null",e),t.writeBytes(Wh)}decode(t){return t.readBytes(0),null}}const Zh=BigInt(0),Xh=BigInt(1),qh=BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");class $h extends De{constructor(e,n,s){const i=(n?"int":"uint")+e*8;super(i,i,s,!1);A(this,"size");A(this,"signed");M(this,{size:e,signed:n},{size:"number",signed:"boolean"})}defaultValue(){return 0}encode(e,n){let s=L(xt.dereference(n,this.type)),i=Ps(qh,kt*8);if(this.signed){let o=Ps(i,this.size*8-1);(s>o||s<-(o+Xh))&&this._throwError("value out-of-bounds",n),s=Xa(s,8*kt)}else(s<Zh||s>Ps(i,this.size*8))&&this._throwError("value out-of-bounds",n);return e.writeValue(s)}decode(e){let n=Ps(e.readValue(),this.size*8);return this.signed&&(n=ff(n,this.size*8)),n}}class td extends nu{constructor(t){super("string",t)}defaultValue(){return""}encode(t,e){return super.encode(t,Ue(xt.dereference(e,"string")))}decode(t){return Eo(super.decode(t))}}class Ii extends De{constructor(e,n){let s=!1;const i=[];e.forEach(a=>{a.dynamic&&(s=!0),i.push(a.type)});const o="tuple("+i.join(",")+")";super("tuple",o,n,s);A(this,"coders");M(this,{coders:Object.freeze(e.slice())})}defaultValue(){const e=[];this.coders.forEach(s=>{e.push(s.defaultValue())});const n=this.coders.reduce((s,i)=>{const o=i.localName;return o&&(s[o]||(s[o]=0),s[o]++),s},{});return this.coders.forEach((s,i)=>{let o=s.localName;!o||n[o]!==1||(o==="length"&&(o="_length"),e[o]==null&&(e[o]=e[i]))}),Object.freeze(e)}encode(e,n){const s=xt.dereference(n,"tuple");return tu(e,this.coders,s)}decode(e){return eu(e,this.coders)}}function Gn(r){return ot(Ue(r))}var ed="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";const ru=new Map([[8217,"apostrophe"],[8260,"fraction slash"],[12539,"middle dot"]]),su=4;function nd(r){let t=0;function e(){return r[t++]<<8|r[t++]}let n=e(),s=1,i=[0,1];for(let G=1;G<n;G++)i.push(s+=e());let o=e(),a=t;t+=o;let c=0,u=0;function f(){return c==0&&(u=u<<8|r[t++],c=8),u>>--c&1}const h=31,g=2**h,w=g>>>1,E=w>>1,m=g-1;let x=0;for(let G=0;G<h;G++)x=x<<1|f();let v=[],B=0,C=g;for(;;){let G=Math.floor(((x-B+1)*s-1)/C),U=0,D=n;for(;D-U>1;){let q=U+D>>>1;G<i[q]?D=q:U=q}if(U==0)break;v.push(U);let k=B+Math.floor(C*i[U]/s),lt=B+Math.floor(C*i[U+1]/s)-1;for(;!((k^lt)&w);)x=x<<1&m|f(),k=k<<1&m,lt=lt<<1&m|1;for(;k&~lt&E;)x=x&w|x<<1&m>>>1|f(),k=k<<1^w,lt=(lt^w)<<1|w|1;B=k,C=1+lt-k}let H=n-4;return v.map(G=>{switch(G-H){case 3:return H+65792+(r[a++]<<16|r[a++]<<8|r[a++]);case 2:return H+256+(r[a++]<<8|r[a++]);case 1:return H+r[a++];default:return G-1}})}function rd(r){let t=0;return()=>r[t++]}function iu(r){return rd(nd(sd(r)))}function sd(r){let t=[];[..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"].forEach((s,i)=>t[s.charCodeAt(0)]=i);let e=r.length,n=new Uint8Array(6*e>>3);for(let s=0,i=0,o=0,a=0;s<e;s++)a=a<<6|t[r.charCodeAt(s)],o+=6,o>=8&&(n[i++]=a>>(o-=8));return n}function id(r){return r&1?~r>>1:r>>1}function od(r,t){let e=Array(r);for(let n=0,s=0;n<r;n++)e[n]=s+=id(t());return e}function Rs(r,t=0){let e=[];for(;;){let n=r(),s=r();if(!s)break;t+=n;for(let i=0;i<s;i++)e.push(t+i);t+=s+1}return e}function ou(r){return ks(()=>{let t=Rs(r);if(t.length)return t})}function au(r){let t=[];for(;;){let e=r();if(e==0)break;t.push(ad(e,r))}for(;;){let e=r()-1;if(e<0)break;t.push(cd(e,r))}return t.flat()}function ks(r){let t=[];for(;;){let e=r(t.length);if(!e)break;t.push(e)}return t}function cu(r,t,e){let n=Array(r).fill().map(()=>[]);for(let s=0;s<t;s++)od(r,e).forEach((i,o)=>n[o].push(i));return n}function ad(r,t){let e=1+t(),n=t(),s=ks(t);return cu(s.length,1+r,t).flatMap((o,a)=>{let[c,...u]=o;return Array(s[a]).fill().map((f,h)=>{let g=h*n;return[c+h*e,u.map(w=>w+g)]})})}function cd(r,t){let e=1+t();return cu(e,1+r,t).map(s=>[s[0],s.slice(1)])}function ud(r){let t=[],e=Rs(r);return s(n([]),[]),t;function n(i){let o=r(),a=ks(()=>{let c=Rs(r).map(u=>e[u]);if(c.length)return n(c)});return{S:o,B:a,Q:i}}function s({S:i,B:o},a,c){if(!(i&4&&c===a[a.length-1])){i&2&&(c=a[a.length-1]),i&1&&t.push(a);for(let u of o)for(let f of u.Q)s(u,[...a,f],c)}}}function ld(r){return r.toString(16).toUpperCase().padStart(2,"0")}function uu(r){return`{${ld(r)}}`}function fd(r){let t=[];for(let e=0,n=r.length;e<n;){let s=r.codePointAt(e);e+=s<65536?1:2,t.push(s)}return t}function xr(r){let e=r.length;if(e<4096)return String.fromCodePoint(...r);let n=[];for(let s=0;s<e;)n.push(String.fromCodePoint(...r.slice(s,s+=4096)));return n.join("")}function hd(r,t){let e=r.length,n=e-t.length;for(let s=0;n==0&&s<e;s++)n=r[s]-t[s];return n}var dd="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";const Ss=44032,Bi=4352,Ri=4449,ki=4519,lu=19,fu=21,Pr=28,Si=fu*Pr,pd=lu*Si,gd=Ss+pd,yd=Bi+lu,md=Ri+fu,wd=ki+Pr;function Us(r){return r>>24&255}function hu(r){return r&16777215}let jo,du,zo,Ui;function Ad(){let r=iu(dd);jo=new Map(ou(r).flatMap((t,e)=>t.map(n=>[n,e+1<<24]))),du=new Set(Rs(r)),zo=new Map,Ui=new Map;for(let[t,e]of au(r)){if(!du.has(t)&&e.length==2){let[n,s]=e,i=Ui.get(n);i||(i=new Map,Ui.set(n,i)),i.set(s,t)}zo.set(t,e.reverse())}}function pu(r){return r>=Ss&&r<gd}function bd(r,t){if(r>=Bi&&r<yd&&t>=Ri&&t<md)return Ss+(r-Bi)*Si+(t-Ri)*Pr;if(pu(r)&&t>ki&&t<wd&&(r-Ss)%Pr==0)return r+(t-ki);{let e=Ui.get(r);return e&&(e=e.get(t),e)?e:-1}}function gu(r){jo||Ad();let t=[],e=[],n=!1;function s(i){let o=jo.get(i);o&&(n=!0,i|=o),t.push(i)}for(let i of r)for(;;){if(i<128)t.push(i);else if(pu(i)){let o=i-Ss,a=o/Si|0,c=o%Si/Pr|0,u=o%Pr;s(Bi+a),s(Ri+c),u>0&&s(ki+u)}else{let o=zo.get(i);o?e.push(...o):s(i)}if(!e.length)break;i=e.pop()}if(n&&t.length>1){let i=Us(t[0]);for(let o=1;o<t.length;o++){let a=Us(t[o]);if(a==0||i<=a){i=a;continue}let c=o-1;for(;;){let u=t[c+1];if(t[c+1]=t[c],t[c]=u,!c||(i=Us(t[--c]),i<=a))break}i=Us(t[o])}}return t}function Ed(r){let t=[],e=[],n=-1,s=0;for(let i of r){let o=Us(i),a=hu(i);if(n==-1)o==0?n=a:t.push(a);else if(s>0&&s>=o)o==0?(t.push(n,...e),e.length=0,n=a):e.push(a),s=o;else{let c=bd(n,a);c>=0?n=c:s==0&&o==0?(t.push(n),n=a):(e.push(a),s=o)}}return n>=0&&t.push(n,...e),t}function yu(r){return gu(r).map(hu)}function vd(r){return Ed(gu(r))}const mu=45,wu=".",Au=65039,bu=1,Nr=r=>Array.from(r);function Ds(r,t){return r.P.has(t)||r.Q.has(t)}class xd extends Array{get is_emoji(){return!0}}let Ko,Eu,Qn,Wo,vu,Tr,Yo,Cr,xu,Pu,Zo;function Xo(){if(Ko)return;let r=iu(ed);const t=()=>Rs(r),e=()=>new Set(t());Ko=new Map(au(r)),Eu=e(),Qn=t(),Wo=new Set(t().map(f=>Qn[f])),Qn=new Set(Qn),vu=e(),e();let n=ou(r),s=r();const i=()=>new Set(t().flatMap(f=>n[f]).concat(t()));Tr=ks(f=>{let h=ks(r).map(g=>g+96);if(h.length){let g=f>=s;h[0]-=32,h=xr(h),g&&(h=`Restricted[${h}]`);let w=i(),E=i(),m=!r();return{N:h,P:w,Q:E,M:m,R:g}}}),Yo=e(),Cr=new Map;let o=t().concat(Nr(Yo)).sort((f,h)=>f-h);o.forEach((f,h)=>{let g=r(),w=o[h]=g?o[h-g]:{V:[],M:new Map};w.V.push(f),Yo.has(f)||Cr.set(f,w)});for(let{V:f,M:h}of new Set(Cr.values())){let g=[];for(let E of f){let m=Tr.filter(v=>Ds(v,E)),x=g.find(({G:v})=>m.some(B=>v.has(B)));x||(x={G:new Set,V:[]},g.push(x)),x.V.push(E),m.forEach(v=>x.G.add(v))}let w=g.flatMap(E=>Nr(E.G));for(let{G:E,V:m}of g){let x=new Set(w.filter(v=>!E.has(v)));for(let v of m)h.set(v,x)}}let a=new Set,c=new Set;const u=f=>a.has(f)?c.add(f):a.add(f);for(let f of Tr){for(let h of f.P)u(h);for(let h of f.Q)u(h)}for(let f of a)!Cr.has(f)&&!c.has(f)&&Cr.set(f,bu);xu=new Set(Nr(a).concat(Nr(yu(a)))),Pu=ud(r).map(f=>xd.from(f)).sort(hd),Zo=new Map;for(let f of Pu){let h=[Zo];for(let g of f){let w=h.map(E=>{let m=E.get(g);return m||(m=new Map,E.set(g,m)),m});g===Au?h.push(...w):h=w}for(let g of h)g.V=f}}function qo(r){return(Nu(r)?"":`${$o(Di([r]))} `)+uu(r)}function $o(r){return`"${r}"‎`}function Pd(r){if(r.length>=4&&r[2]==mu&&r[3]==mu)throw new Error(`invalid label extension: "${xr(r.slice(0,4))}"`)}function Nd(r){for(let e=r.lastIndexOf(95);e>0;)if(r[--e]!==95)throw new Error("underscore allowed only at start")}function Td(r){let t=r[0],e=ru.get(t);if(e)throw Fs(`leading ${e}`);let n=r.length,s=-1;for(let i=1;i<n;i++){t=r[i];let o=ru.get(t);if(o){if(s==i)throw Fs(`${e} + ${o}`);s=i+1,e=o}}if(s==n)throw Fs(`trailing ${e}`)}function Di(r,t=uu){let e=[];Cd(r[0])&&e.push("◌");let n=0,s=r.length;for(let i=0;i<s;i++){let o=r[i];Nu(o)&&(e.push(xr(r.slice(n,i))),e.push(t(o)),n=i+1)}return e.push(xr(r.slice(n,s))),e.join("")}function Cd(r){return Xo(),Qn.has(r)}function Nu(r){return Xo(),vu.has(r)}function Od(r){return kd(Id(r,vd,Dd))}function Id(r,t,e){if(!r)return[];Xo();let n=0;return r.split(wu).map(s=>{let i=fd(s),o={input:i,offset:n};n+=i.length+1;try{let a=o.tokens=Ud(i,t,e),c=a.length,u;if(!c)throw new Error("empty label");let f=o.output=a.flat();if(Nd(f),!(o.emoji=c>1||a[0].is_emoji)&&f.every(g=>g<128))Pd(f),u="ASCII";else{let g=a.flatMap(w=>w.is_emoji?[]:w);if(!g.length)u="Emoji";else{if(Qn.has(f[0]))throw Fs("leading combining mark");for(let m=1;m<c;m++){let x=a[m];if(!x.is_emoji&&Qn.has(x[0]))throw Fs(`emoji + combining mark: "${xr(a[m-1])} + ${Di([x[0]])}"`)}Td(f);let w=Nr(new Set(g)),[E]=Rd(w);Sd(E,g),Bd(E,w),u=E.N}}o.type=u}catch(a){o.error=a}return o})}function Bd(r,t){let e,n=[];for(let s of t){let i=Cr.get(s);if(i===bu)return;if(i){let o=i.M.get(s);if(e=e?e.filter(a=>o.has(a)):Nr(o),!e.length)return}else n.push(s)}if(e){for(let s of e)if(n.every(i=>Ds(s,i)))throw new Error(`whole-script confusable: ${r.N}/${s.N}`)}}function Rd(r){let t=Tr;for(let e of r){let n=t.filter(s=>Ds(s,e));if(!n.length)throw Tr.some(s=>Ds(s,e))?Cu(t[0],e):Tu(e);if(t=n,n.length==1)break}return t}function kd(r){return r.map(({input:t,error:e,output:n})=>{if(e){let s=e.message;throw new Error(r.length==1?s:`Invalid label ${$o(Di(t))}: ${s}`)}return xr(n)}).join(wu)}function Tu(r){return new Error(`disallowed character: ${qo(r)}`)}function Cu(r,t){let e=qo(t),n=Tr.find(s=>s.P.has(t));return n&&(e=`${n.N} ${e}`),new Error(`illegal mixture: ${r.N} + ${e}`)}function Fs(r){return new Error(`illegal placement: ${r}`)}function Sd(r,t){for(let e of t)if(!Ds(r,e))throw Cu(r,e);if(r.M){let e=yu(t);for(let n=1,s=e.length;n<s;n++)if(Wo.has(e[n])){let i=n+1;for(let o;i<s&&Wo.has(o=e[i]);i++)for(let a=n;a<i;a++)if(e[a]==o)throw new Error(`duplicate non-spacing marks: ${qo(o)}`);if(i-n>su)throw new Error(`excessive non-spacing marks: ${$o(Di(e.slice(n-1,i)))} (${i-n}/${su})`);n=i}}}function Ud(r,t,e){let n=[],s=[];for(r=r.slice().reverse();r.length;){let i=Fd(r);if(i)s.length&&(n.push(t(s)),s=[]),n.push(e(i));else{let o=r.pop();if(xu.has(o))s.push(o);else{let a=Ko.get(o);if(a)s.push(...a);else if(!Eu.has(o))throw Tu(o)}}}return s.length&&n.push(t(s)),n}function Dd(r){return r.filter(t=>t!=Au)}function Fd(r,t){let e=Zo,n,s=r.length;for(;s&&(e=e.get(r[--s]),!!e);){let{V:i}=e;i&&(n=i,t&&t.push(...r.slice(s).reverse()),r.length=s)}return n}const Ou=new Uint8Array(32);Ou.fill(0);function Iu(r){return y(r.length!==0,"invalid ENS name; empty component","comp",r),r}function Bu(r){const t=Ue(Ld(r)),e=[];if(r.length===0)return e;let n=0;for(let s=0;s<t.length;s++)t[s]===46&&(e.push(Iu(t.slice(n,s))),n=s+1);return y(n<t.length,"invalid ENS name; empty component","name",r),e.push(Iu(t.slice(n))),e}function Ld(r){try{if(r.length===0)throw new Error("empty label");return Od(r)}catch(t){y(!1,`invalid ENS name (${t.message})`,"name",r)}}function ta(r){y(typeof r=="string","invalid ENS name; not a string","name",r),y(r.length,"invalid ENS name (empty label)","name",r);let t=Ou;const e=Bu(r);for(;e.length;)t=ot(yt([t,ot(e.pop())]));return F(t)}function Md(r){return F(yt(Bu(r).map(t=>{if(t.length>63)throw new Error("invalid DNS encoded entry; length exceeds 63 bytes");const e=new Uint8Array(t.length+1);return e.set(t,1),e[0]=e.length-1,e})))+"00"}function ea(r,t){return{address:Y(r),storageKeys:t.map((e,n)=>(y(it(e,32),"invalid slot",`storageKeys[${n}]`,e),e.toLowerCase()))}}function Hn(r){if(Array.isArray(r))return r.map((e,n)=>Array.isArray(e)?(y(e.length===2,"invalid slot set",`value[${n}]`,e),ea(e[0],e[1])):(y(e!=null&&typeof e=="object","invalid address-slot set","value",r),ea(e.address,e.storageKeys)));y(r!=null&&typeof r=="object","invalid access list","value",r);const t=Object.keys(r).map(e=>{const n=r[e].reduce((s,i)=>(s[i]=!0,s),{});return ea(e,Object.keys(n).sort())});return t.sort((e,n)=>e.address.localeCompare(n.address)),t}function Gd(r){let t;return typeof r=="string"?t=Bs.computePublicKey(r,!1):t=r.publicKey,Y(ot("0x"+t.substring(4)).substring(26))}function Qd(r,t){return Gd(Bs.recoverPublicKey(r,t))}const Qt=BigInt(0),Hd=BigInt(2),_d=BigInt(27),Vd=BigInt(28),Jd=BigInt(35),jd=BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");function na(r){return r==="0x"?null:Y(r)}function Ru(r,t){try{return Hn(r)}catch(e){y(!1,e.message,t,r)}}function Fi(r,t){return r==="0x"?0:J(r,t)}function Ut(r,t){if(r==="0x")return Qt;const e=L(r,t);return y(e<=jd,"value exceeds uint size",t,e),e}function bt(r,t){const e=L(r,"value"),n=zt(e);return y(n.length<=32,"value too large",`tx.${t}`,e),n}function ku(r){return Hn(r).map(t=>[t.address,t.storageKeys])}function zd(r){const t=xo(r);y(Array.isArray(t)&&(t.length===9||t.length===6),"invalid field count for legacy transaction","data",r);const e={type:0,nonce:Fi(t[0],"nonce"),gasPrice:Ut(t[1],"gasPrice"),gasLimit:Ut(t[2],"gasLimit"),to:na(t[3]),value:Ut(t[4],"value"),data:F(t[5]),chainId:Qt};if(t.length===6)return e;const n=Ut(t[6],"v"),s=Ut(t[7],"r"),i=Ut(t[8],"s");if(s===Qt&&i===Qt)e.chainId=n;else{let o=(n-Jd)/Hd;o<Qt&&(o=Qt),e.chainId=o,y(o!==Qt||n===_d||n===Vd,"non-canonical legacy v","v",t[6]),e.signature=he.from({r:Dn(t[7],32),s:Dn(t[8],32),v:n}),e.hash=ot(r)}return e}function Su(r,t){const e=[bt(r.nonce||0,"nonce"),bt(r.gasPrice||0,"gasPrice"),bt(r.gasLimit||0,"gasLimit"),r.to!=null?Y(r.to):"0x",bt(r.value||0,"value"),r.data||"0x"];let n=Qt;if(r.chainId!=Qt)n=L(r.chainId,"tx.chainId"),y(!t||t.networkV==null||t.legacyChainId===n,"tx.chainId/sig.v mismatch","sig",t);else if(r.signature){const i=r.signature.legacyChainId;i!=null&&(n=i)}if(!t)return n!==Qt&&(e.push(zt(n)),e.push("0x"),e.push("0x")),Ns(e);let s=BigInt(27+t.yParity);return n!==Qt?s=he.getChainIdV(n,t.v):BigInt(t.v)!==s&&y(!1,"tx.chainId/sig.v mismatch","sig",t),e.push(zt(s)),e.push(zt(t.r)),e.push(zt(t.s)),Ns(e)}function Uu(r,t){let e;try{if(e=Fi(t[0],"yParity"),e!==0&&e!==1)throw new Error("bad yParity")}catch{y(!1,"invalid yParity","yParity",t[0])}const n=Dn(t[1],32),s=Dn(t[2],32),i=he.from({r:n,s,yParity:e});r.signature=i}function Kd(r){const t=xo(X(r).slice(1));y(Array.isArray(t)&&(t.length===9||t.length===12),"invalid field count for transaction type: 2","data",F(r));const e=Ut(t[2],"maxPriorityFeePerGas"),n=Ut(t[3],"maxFeePerGas"),s={type:2,chainId:Ut(t[0],"chainId"),nonce:Fi(t[1],"nonce"),maxPriorityFeePerGas:e,maxFeePerGas:n,gasPrice:null,gasLimit:Ut(t[4],"gasLimit"),to:na(t[5]),value:Ut(t[6],"value"),data:F(t[7]),accessList:Ru(t[8],"accessList")};return t.length===9||(s.hash=ot(r),Uu(s,t.slice(9))),s}function Du(r,t){const e=[bt(r.chainId||0,"chainId"),bt(r.nonce||0,"nonce"),bt(r.maxPriorityFeePerGas||0,"maxPriorityFeePerGas"),bt(r.maxFeePerGas||0,"maxFeePerGas"),bt(r.gasLimit||0,"gasLimit"),r.to!=null?Y(r.to):"0x",bt(r.value||0,"value"),r.data||"0x",ku(r.accessList||[])];return t&&(e.push(bt(t.yParity,"yParity")),e.push(zt(t.r)),e.push(zt(t.s))),yt(["0x02",Ns(e)])}function Wd(r){const t=xo(X(r).slice(1));y(Array.isArray(t)&&(t.length===8||t.length===11),"invalid field count for transaction type: 1","data",F(r));const e={type:1,chainId:Ut(t[0],"chainId"),nonce:Fi(t[1],"nonce"),gasPrice:Ut(t[2],"gasPrice"),gasLimit:Ut(t[3],"gasLimit"),to:na(t[4]),value:Ut(t[5],"value"),data:F(t[6]),accessList:Ru(t[7],"accessList")};return t.length===8||(e.hash=ot(r),Uu(e,t.slice(8))),e}function Fu(r,t){const e=[bt(r.chainId||0,"chainId"),bt(r.nonce||0,"nonce"),bt(r.gasPrice||0,"gasPrice"),bt(r.gasLimit||0,"gasLimit"),r.to!=null?Y(r.to):"0x",bt(r.value||0,"value"),r.data||"0x",ku(r.accessList||[])];return t&&(e.push(bt(t.yParity,"recoveryParam")),e.push(zt(t.r)),e.push(zt(t.s))),yt(["0x01",Ns(e)])}const An=class An{constructor(){b(this,Ye,void 0);b(this,Hr,void 0);b(this,_r,void 0);b(this,Vr,void 0);b(this,Jr,void 0);b(this,jr,void 0);b(this,zr,void 0);b(this,Kr,void 0);b(this,Wr,void 0);b(this,Yr,void 0);b(this,Zr,void 0);b(this,Xr,void 0);d(this,Ye,null),d(this,Hr,null),d(this,Vr,0),d(this,Jr,BigInt(0)),d(this,jr,null),d(this,zr,null),d(this,Kr,null),d(this,_r,"0x"),d(this,Wr,BigInt(0)),d(this,Yr,BigInt(0)),d(this,Zr,null),d(this,Xr,null)}get type(){return l(this,Ye)}set type(t){switch(t){case null:d(this,Ye,null);break;case 0:case"legacy":d(this,Ye,0);break;case 1:case"berlin":case"eip-2930":d(this,Ye,1);break;case 2:case"london":case"eip-1559":d(this,Ye,2);break;default:y(!1,"unsupported transaction type","type",t)}}get typeName(){switch(this.type){case 0:return"legacy";case 1:return"eip-2930";case 2:return"eip-1559"}return null}get to(){return l(this,Hr)}set to(t){d(this,Hr,t==null?null:Y(t))}get nonce(){return l(this,Vr)}set nonce(t){d(this,Vr,J(t,"value"))}get gasLimit(){return l(this,Jr)}set gasLimit(t){d(this,Jr,L(t))}get gasPrice(){const t=l(this,jr);return t==null&&(this.type===0||this.type===1)?Qt:t}set gasPrice(t){d(this,jr,t==null?null:L(t,"gasPrice"))}get maxPriorityFeePerGas(){const t=l(this,zr);return t??(this.type===2?Qt:null)}set maxPriorityFeePerGas(t){d(this,zr,t==null?null:L(t,"maxPriorityFeePerGas"))}get maxFeePerGas(){const t=l(this,Kr);return t??(this.type===2?Qt:null)}set maxFeePerGas(t){d(this,Kr,t==null?null:L(t,"maxFeePerGas"))}get data(){return l(this,_r)}set data(t){d(this,_r,F(t))}get value(){return l(this,Wr)}set value(t){d(this,Wr,L(t,"value"))}get chainId(){return l(this,Yr)}set chainId(t){d(this,Yr,L(t))}get signature(){return l(this,Zr)||null}set signature(t){d(this,Zr,t==null?null:he.from(t))}get accessList(){const t=l(this,Xr)||null;return t??(this.type===1||this.type===2?[]:null)}set accessList(t){d(this,Xr,t==null?null:Hn(t))}get hash(){return this.signature==null?null:ot(this.serialized)}get unsignedHash(){return ot(this.unsignedSerialized)}get from(){return this.signature==null?null:Qd(this.unsignedHash,this.signature)}get fromPublicKey(){return this.signature==null?null:Bs.recoverPublicKey(this.unsignedHash,this.signature)}isSigned(){return this.signature!=null}get serialized(){switch(P(this.signature!=null,"cannot serialize unsigned transaction; maybe you meant .unsignedSerialized","UNSUPPORTED_OPERATION",{operation:".serialized"}),this.inferType()){case 0:return Su(this,this.signature);case 1:return Fu(this,this.signature);case 2:return Du(this,this.signature)}P(!1,"unsupported transaction type","UNSUPPORTED_OPERATION",{operation:".serialized"})}get unsignedSerialized(){switch(this.inferType()){case 0:return Su(this);case 1:return Fu(this);case 2:return Du(this)}P(!1,"unsupported transaction type","UNSUPPORTED_OPERATION",{operation:".unsignedSerialized"})}inferType(){return this.inferTypes().pop()}inferTypes(){const t=this.gasPrice!=null,e=this.maxFeePerGas!=null||this.maxPriorityFeePerGas!=null,n=this.accessList!=null;this.maxFeePerGas!=null&&this.maxPriorityFeePerGas!=null&&P(this.maxFeePerGas>=this.maxPriorityFeePerGas,"priorityFee cannot be more than maxFee","BAD_DATA",{value:this}),P(!e||this.type!==0&&this.type!==1,"transaction type cannot have maxFeePerGas or maxPriorityFeePerGas","BAD_DATA",{value:this}),P(this.type!==0||!n,"legacy transaction cannot have accessList","BAD_DATA",{value:this});const s=[];return this.type!=null?s.push(this.type):e?s.push(2):t?(s.push(1),n||s.push(0)):n?(s.push(1),s.push(2)):(s.push(0),s.push(1),s.push(2)),s.sort(),s}isLegacy(){return this.type===0}isBerlin(){return this.type===1}isLondon(){return this.type===2}clone(){return An.from(this)}toJSON(){const t=e=>e==null?null:e.toString();return{type:this.type,to:this.to,data:this.data,nonce:this.nonce,gasLimit:t(this.gasLimit),gasPrice:t(this.gasPrice),maxPriorityFeePerGas:t(this.maxPriorityFeePerGas),maxFeePerGas:t(this.maxFeePerGas),value:t(this.value),chainId:t(this.chainId),sig:this.signature?this.signature.toJSON():null,accessList:this.accessList}}static from(t){if(t==null)return new An;if(typeof t=="string"){const n=X(t);if(n[0]>=127)return An.from(zd(n));switch(n[0]){case 1:return An.from(Wd(n));case 2:return An.from(Kd(n))}P(!1,"unsupported transaction type","UNSUPPORTED_OPERATION",{operation:"from"})}const e=new An;return t.type!=null&&(e.type=t.type),t.to!=null&&(e.to=t.to),t.nonce!=null&&(e.nonce=t.nonce),t.gasLimit!=null&&(e.gasLimit=t.gasLimit),t.gasPrice!=null&&(e.gasPrice=t.gasPrice),t.maxPriorityFeePerGas!=null&&(e.maxPriorityFeePerGas=t.maxPriorityFeePerGas),t.maxFeePerGas!=null&&(e.maxFeePerGas=t.maxFeePerGas),t.data!=null&&(e.data=t.data),t.value!=null&&(e.value=t.value),t.chainId!=null&&(e.chainId=t.chainId),t.signature!=null&&(e.signature=he.from(t.signature)),t.accessList!=null&&(e.accessList=t.accessList),t.hash!=null&&(y(e.isSigned(),"unsigned transaction cannot define hash","tx",t),y(e.hash===t.hash,"hash mismatch","tx",t)),t.from!=null&&(y(e.isSigned(),"unsigned transaction cannot define from","tx",t),y(e.from.toLowerCase()===(t.from||"").toLowerCase(),"from mismatch","tx",t)),e}};Ye=new WeakMap,Hr=new WeakMap,_r=new WeakMap,Vr=new WeakMap,Jr=new WeakMap,jr=new WeakMap,zr=new WeakMap,Kr=new WeakMap,Wr=new WeakMap,Yr=new WeakMap,Zr=new WeakMap,Xr=new WeakMap;let Li=An;const Lu=new Uint8Array(32);Lu.fill(0);const Yd=BigInt(-1),Mu=BigInt(0),Gu=BigInt(1),Zd=BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");function Xd(r){const t=X(r),e=t.length%32;return e?yt([t,Lu.slice(e)]):F(t)}const qd=cn(Gu,32),$d=cn(Mu,32),Qu={name:"string",version:"string",chainId:"uint256",verifyingContract:"address",salt:"bytes32"},ra=["name","version","chainId","verifyingContract","salt"];function Hu(r){return function(t){return y(typeof t=="string",`invalid domain value for ${JSON.stringify(r)}`,`domain.${r}`,t),t}}const tp={name:Hu("name"),version:Hu("version"),chainId:function(r){const t=L(r,"domain.chainId");return y(t>=0,"invalid chain ID","domain.chainId",r),Number.isSafeInteger(t)?Number(t):mr(t)},verifyingContract:function(r){try{return Y(r).toLowerCase()}catch{}y(!1,'invalid domain value "verifyingContract"',"domain.verifyingContract",r)},salt:function(r){const t=X(r,"domain.salt");return y(t.length===32,'invalid domain value "salt"',"domain.salt",r),F(t)}};function sa(r){{const t=r.match(/^(u?)int(\d*)$/);if(t){const e=t[1]==="",n=parseInt(t[2]||"256");y(n%8===0&&n!==0&&n<=256&&(t[2]==null||t[2]===String(n)),"invalid numeric width","type",r);const s=Ps(Zd,e?n-1:n),i=e?(s+Gu)*Yd:Mu;return function(o){const a=L(o,"value");return y(a>=i&&a<=s,`value out-of-bounds for ${r}`,"value",a),cn(e?Xa(a,256):a,32)}}}{const t=r.match(/^bytes(\d+)$/);if(t){const e=parseInt(t[1]);return y(e!==0&&e<=32&&t[1]===String(e),"invalid bytes width","type",r),function(n){const s=X(n);return y(s.length===e,`invalid length for ${r}`,"value",n),Xd(n)}}}switch(r){case"address":return function(t){return Dn(Y(t),32)};case"bool":return function(t){return t?qd:$d};case"bytes":return function(t){return ot(t)};case"string":return function(t){return Gn(t)}}return null}function _u(r,t){return`${r}(${t.map(({name:e,type:n})=>n+" "+e).join(",")})`}const ne=class ne{constructor(t){b(this,ro);A(this,"primaryType");b(this,Ys,void 0);b(this,Ze,void 0);b(this,qr,void 0);d(this,Ys,JSON.stringify(t)),d(this,Ze,new Map),d(this,qr,new Map);const e=new Map,n=new Map,s=new Map;Object.keys(t).forEach(a=>{e.set(a,new Set),n.set(a,[]),s.set(a,new Set)});for(const a in t){const c=new Set;for(const u of t[a]){y(!c.has(u.name),`duplicate variable name ${JSON.stringify(u.name)} in ${JSON.stringify(a)}`,"types",t),c.add(u.name);const f=u.type.match(/^([^\x5b]*)(\x5b|$)/)[1]||null;y(f!==a,`circular type reference to ${JSON.stringify(f)}`,"types",t),!sa(f)&&(y(n.has(f),`unknown type ${JSON.stringify(f)}`,"types",t),n.get(f).push(a),e.get(a).add(f))}}const i=Array.from(n.keys()).filter(a=>n.get(a).length===0);y(i.length!==0,"missing primary type","types",t),y(i.length===1,`ambiguous primary types or unused types: ${i.map(a=>JSON.stringify(a)).join(", ")}`,"types",t),M(this,{primaryType:i[0]});function o(a,c){y(!c.has(a),`circular type reference to ${JSON.stringify(a)}`,"types",t),c.add(a);for(const u of e.get(a))if(n.has(u)){o(u,c);for(const f of c)s.get(f).add(u)}c.delete(a)}o(this.primaryType,new Set);for(const[a,c]of s){const u=Array.from(c);u.sort(),l(this,Ze).set(a,_u(a,t[a])+u.map(f=>_u(f,t[f])).join(""))}}get types(){return JSON.parse(l(this,Ys))}getEncoder(t){let e=l(this,qr).get(t);return e||(e=I(this,ro,$l).call(this,t),l(this,qr).set(t,e)),e}encodeType(t){const e=l(this,Ze).get(t);return y(e,`unknown type: ${JSON.stringify(t)}`,"name",t),e}encodeData(t,e){return this.getEncoder(t)(e)}hashStruct(t,e){return ot(this.encodeData(t,e))}encode(t){return this.encodeData(this.primaryType,t)}hash(t){return this.hashStruct(this.primaryType,t)}_visit(t,e,n){if(sa(t))return n(t,e);const s=t.match(/^(.*)(\x5b(\d*)\x5d)$/);if(s)return y(!s[3]||parseInt(s[3])===e.length,`array length mismatch; expected length ${parseInt(s[3])}`,"value",e),e.map(o=>this._visit(s[1],o,n));const i=this.types[t];if(i)return i.reduce((o,{name:a,type:c})=>(o[a]=this._visit(c,e[a],n),o),{});y(!1,`unknown type: ${t}`,"type",t)}visit(t,e){return this._visit(this.primaryType,t,e)}static from(t){return new ne(t)}static getPrimaryType(t){return ne.from(t).primaryType}static hashStruct(t,e,n){return ne.from(e).hashStruct(t,n)}static hashDomain(t){const e=[];for(const n in t){if(t[n]==null)continue;const s=Qu[n];y(s,`invalid typed-data domain key: ${JSON.stringify(n)}`,"domain",t),e.push({name:n,type:s})}return e.sort((n,s)=>ra.indexOf(n.name)-ra.indexOf(s.name)),ne.hashStruct("EIP712Domain",{EIP712Domain:e},t)}static encode(t,e,n){return yt(["0x1901",ne.hashDomain(t),ne.from(e).hash(n)])}static hash(t,e,n){return ot(ne.encode(t,e,n))}static async resolveNames(t,e,n,s){t=Object.assign({},t);for(const a in t)t[a]==null&&delete t[a];const i={};t.verifyingContract&&!it(t.verifyingContract,20)&&(i[t.verifyingContract]="0x");const o=ne.from(e);o.visit(n,(a,c)=>(a==="address"&&!it(c,20)&&(i[c]="0x"),c));for(const a in i)i[a]=await s(a);return t.verifyingContract&&i[t.verifyingContract]&&(t.verifyingContract=i[t.verifyingContract]),n=o.visit(n,(a,c)=>a==="address"&&i[c]?i[c]:c),{domain:t,value:n}}static getPayload(t,e,n){ne.hashDomain(t);const s={},i=[];ra.forEach(c=>{const u=t[c];u!=null&&(s[c]=tp[c](u),i.push({name:c,type:Qu[c]}))});const o=ne.from(e),a=Object.assign({},e);return y(a.EIP712Domain==null,"types must not contain EIP712Domain type","types.EIP712Domain",e),a.EIP712Domain=i,o.encode(n),{types:a,domain:s,primaryType:o.primaryType,message:o.visit(n,(c,u)=>{if(c.match(/^bytes(\d*)/))return F(X(u));if(c.match(/^u?int/))return L(u).toString();switch(c){case"address":return u.toLowerCase();case"bool":return!!u;case"string":return y(typeof u=="string","invalid string","value",u),u}y(!1,"unsupported type","type",c)})}}};Ys=new WeakMap,Ze=new WeakMap,qr=new WeakMap,ro=new WeakSet,$l=function(t){{const s=sa(t);if(s)return s}const e=t.match(/^(.*)(\x5b(\d*)\x5d)$/);if(e){const s=e[1],i=this.getEncoder(s);return o=>{y(!e[3]||parseInt(e[3])===o.length,`array length mismatch; expected length ${parseInt(e[3])}`,"value",o);let a=o.map(i);return l(this,Ze).has(s)&&(a=a.map(ot)),ot(yt(a))}}const n=this.types[t];if(n){const s=Gn(l(this,Ze).get(t));return i=>{const o=n.map(({name:a,type:c})=>{const u=this.getEncoder(c)(i[a]);return l(this,Ze).has(c)?ot(u):u});return o.unshift(s),yt(o)}}y(!1,`unknown type: ${t}`,"type",t)};let Mi=ne;function Dt(r){const t=new Set;return r.forEach(e=>t.add(e)),Object.freeze(t)}const ep=Dt("external public payable".split(" ")),Vu="constant external internal payable private public pure view",np=Dt(Vu.split(" ")),Ju="constructor error event fallback function receive struct",ju=Dt(Ju.split(" ")),zu="calldata memory storage payable indexed",rp=Dt(zu.split(" ")),sp=[Ju,zu,"tuple returns",Vu].join(" "),ip=Dt(sp.split(" ")),op={"(":"OPEN_PAREN",")":"CLOSE_PAREN","[":"OPEN_BRACKET","]":"CLOSE_BRACKET",",":"COMMA","@":"AT"},ap=new RegExp("^(\\s*)"),cp=new RegExp("^([0-9]+)"),up=new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)"),Ku=new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)$"),Wu=new RegExp("^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$"),so=class so{constructor(t){b(this,Zs);b(this,vt,void 0);b(this,we,void 0);d(this,vt,0),d(this,we,t.slice())}get offset(){return l(this,vt)}get length(){return l(this,we).length-l(this,vt)}clone(){return new so(l(this,we))}reset(){d(this,vt,0)}popKeyword(t){const e=this.peek();if(e.type!=="KEYWORD"||!t.has(e.text))throw new Error(`expected keyword ${e.text}`);return this.pop().text}popType(t){if(this.peek().type!==t)throw new Error(`expected ${t}; got ${JSON.stringify(this.peek())}`);return this.pop().text}popParen(){const t=this.peek();if(t.type!=="OPEN_PAREN")throw new Error("bad start");const e=I(this,Zs,Fa).call(this,l(this,vt)+1,t.match+1);return d(this,vt,t.match+1),e}popParams(){const t=this.peek();if(t.type!=="OPEN_PAREN")throw new Error("bad start");const e=[];for(;l(this,vt)<t.match-1;){const n=this.peek().linkNext;e.push(I(this,Zs,Fa).call(this,l(this,vt)+1,n)),d(this,vt,n)}return d(this,vt,t.match+1),e}peek(){if(l(this,vt)>=l(this,we).length)throw new Error("out-of-bounds");return l(this,we)[l(this,vt)]}peekKeyword(t){const e=this.peekType("KEYWORD");return e!=null&&t.has(e)?e:null}peekType(t){if(this.length===0)return null;const e=this.peek();return e.type===t?e.text:null}pop(){const t=this.peek();return hi(this,vt)._++,t}toString(){const t=[];for(let e=l(this,vt);e<l(this,we).length;e++){const n=l(this,we)[e];t.push(`${n.type}:${n.text}`)}return`<TokenString ${t.join(" ")}>`}};vt=new WeakMap,we=new WeakMap,Zs=new WeakSet,Fa=function(t=0,e=0){return new so(l(this,we).slice(t,e).map(n=>Object.freeze(Object.assign({},n,{match:n.match-t,linkBack:n.linkBack-t,linkNext:n.linkNext-t}))))};let de=so;function pn(r){const t=[],e=o=>{const a=i<r.length?JSON.stringify(r[i]):"$EOI";throw new Error(`invalid token ${a} at ${i}: ${o}`)};let n=[],s=[],i=0;for(;i<r.length;){let o=r.substring(i),a=o.match(ap);a&&(i+=a[1].length,o=r.substring(i));const c={depth:n.length,linkBack:-1,linkNext:-1,match:-1,type:"",text:"",offset:i,value:-1};t.push(c);let u=op[o[0]]||"";if(u){if(c.type=u,c.text=o[0],i++,u==="OPEN_PAREN")n.push(t.length-1),s.push(t.length-1);else if(u=="CLOSE_PAREN")n.length===0&&e("no matching open bracket"),c.match=n.pop(),t[c.match].match=t.length-1,c.depth--,c.linkBack=s.pop(),t[c.linkBack].linkNext=t.length-1;else if(u==="COMMA")c.linkBack=s.pop(),t[c.linkBack].linkNext=t.length-1,s.push(t.length-1);else if(u==="OPEN_BRACKET")c.type="BRACKET";else if(u==="CLOSE_BRACKET"){let f=t.pop().text;if(t.length>0&&t[t.length-1].type==="NUMBER"){const h=t.pop().text;f=h+f,t[t.length-1].value=J(h)}if(t.length===0||t[t.length-1].type!=="BRACKET")throw new Error("missing opening bracket");t[t.length-1].text+=f}continue}if(a=o.match(up),a){if(c.text=a[1],i+=c.text.length,ip.has(c.text)){c.type="KEYWORD";continue}if(c.text.match(Wu)){c.type="TYPE";continue}c.type="ID";continue}if(a=o.match(cp),a){c.text=a[1],c.type="NUMBER",i+=c.text.length;continue}throw new Error(`unexpected token ${JSON.stringify(o[0])} at position ${i}`)}return new de(t.map(o=>Object.freeze(o)))}function Yu(r,t){let e=[];for(const n in t.keys())r.has(n)&&e.push(n);if(e.length>1)throw new Error(`conflicting types: ${e.join(", ")}`)}function Gi(r,t){if(t.peekKeyword(ju)){const e=t.pop().text;if(e!==r)throw new Error(`expected ${r}, got ${e}`)}return t.popType("ID")}function Me(r,t){const e=new Set;for(;;){const n=r.peekType("KEYWORD");if(n==null||t&&!t.has(n))break;if(r.pop(),e.has(n))throw new Error(`duplicate keywords: ${JSON.stringify(n)}`);e.add(n)}return Object.freeze(e)}function Zu(r){let t=Me(r,np);return Yu(t,Dt("constant payable nonpayable".split(" "))),Yu(t,Dt("pure view payable nonpayable".split(" "))),t.has("view")?"view":t.has("pure")?"pure":t.has("payable")?"payable":t.has("nonpayable")?"nonpayable":t.has("constant")?"view":"nonpayable"}function Ge(r,t){return r.popParams().map(e=>Et.from(e,t))}function Xu(r){if(r.peekType("AT")){if(r.pop(),r.peekType("NUMBER"))return L(r.pop().text);throw new Error("invalid gas")}return null}function _n(r){if(r.length)throw new Error(`unexpected tokens: ${r.toString()}`)}const lp=new RegExp(/^(.*)\[([0-9]*)\]$/);function qu(r){const t=r.match(Wu);if(y(t,"invalid type","type",r),r==="uint")return"uint256";if(r==="int")return"int256";if(t[2]){const e=parseInt(t[2]);y(e!==0&&e<=32,"invalid bytes length","type",r)}else if(t[3]){const e=parseInt(t[3]);y(e!==0&&e<=256&&e%8===0,"invalid numeric width","type",r)}return r}const at={},Ht=Symbol.for("_ethers_internal"),$u="_ParamTypeInternal",tl="_ErrorInternal",el="_EventInternal",nl="_ConstructorInternal",rl="_FallbackInternal",sl="_FunctionInternal",il="_StructInternal",re=class re{constructor(t,e,n,s,i,o,a,c){b(this,$r);A(this,"name");A(this,"type");A(this,"baseType");A(this,"indexed");A(this,"components");A(this,"arrayLength");A(this,"arrayChildren");if(yi(t,at,"ParamType"),Object.defineProperty(this,Ht,{value:$u}),o&&(o=Object.freeze(o.slice())),s==="array"){if(a==null||c==null)throw new Error("")}else if(a!=null||c!=null)throw new Error("");if(s==="tuple"){if(o==null)throw new Error("")}else if(o!=null)throw new Error("");M(this,{name:e,type:n,baseType:s,indexed:i,components:o,arrayLength:a,arrayChildren:c})}format(t){if(t==null&&(t="sighash"),t==="json"){const n=this.name||"";if(this.isArray()){const i=JSON.parse(this.arrayChildren.format("json"));return i.name=n,i.type+=`[${this.arrayLength<0?"":String(this.arrayLength)}]`,JSON.stringify(i)}const s={type:this.baseType==="tuple"?"tuple":this.type,name:n};return typeof this.indexed=="boolean"&&(s.indexed=this.indexed),this.isTuple()&&(s.components=this.components.map(i=>JSON.parse(i.format(t)))),JSON.stringify(s)}let e="";return this.isArray()?(e+=this.arrayChildren.format(t),e+=`[${this.arrayLength<0?"":String(this.arrayLength)}]`):this.isTuple()?(t!=="sighash"&&(e+=this.type),e+="("+this.components.map(n=>n.format(t)).join(t==="full"?", ":",")+")"):e+=this.type,t!=="sighash"&&(this.indexed===!0&&(e+=" indexed"),t==="full"&&this.name&&(e+=" "+this.name)),e}isArray(){return this.baseType==="array"}isTuple(){return this.baseType==="tuple"}isIndexable(){return this.indexed!=null}walk(t,e){if(this.isArray()){if(!Array.isArray(t))throw new Error("invalid array value");if(this.arrayLength!==-1&&t.length!==this.arrayLength)throw new Error("array is wrong length");const n=this;return t.map(s=>n.arrayChildren.walk(s,e))}if(this.isTuple()){if(!Array.isArray(t))throw new Error("invalid tuple value");if(t.length!==this.components.length)throw new Error("array is wrong length");const n=this;return t.map((s,i)=>n.components[i].walk(s,e))}return e(this.type,t)}async walkAsync(t,e){const n=[],s=[t];return I(this,$r,ho).call(this,n,t,e,i=>{s[0]=i}),n.length&&await Promise.all(n),s[0]}static from(t,e){if(re.isParamType(t))return t;if(typeof t=="string")try{return re.from(pn(t),e)}catch{y(!1,"invalid param type","obj",t)}else if(t instanceof de){let a="",c="",u=null;Me(t,Dt(["tuple"])).has("tuple")||t.peekType("OPEN_PAREN")?(c="tuple",u=t.popParams().map(m=>re.from(m)),a=`tuple(${u.map(m=>m.format()).join(",")})`):(a=qu(t.popType("TYPE")),c=a);let f=null,h=null;for(;t.length&&t.peekType("BRACKET");){const m=t.pop();f=new re(at,"",a,c,null,u,h,f),h=m.value,a+=m.text,c="array",u=null}let g=null;if(Me(t,rp).has("indexed")){if(!e)throw new Error("");g=!0}const E=t.peekType("ID")?t.pop().text:"";if(t.length)throw new Error("leftover tokens");return new re(at,E,a,c,g,u,h,f)}const n=t.name;y(!n||typeof n=="string"&&n.match(Ku),"invalid name","obj.name",n);let s=t.indexed;s!=null&&(y(e,"parameter cannot be indexed","obj.indexed",t.indexed),s=!!s);let i=t.type,o=i.match(lp);if(o){const a=parseInt(o[2]||"-1"),c=re.from({type:o[1],components:t.components});return new re(at,n||"",i,"array",s,null,a,c)}if(i==="tuple"||i.startsWith("tuple(")||i.startsWith("(")){const a=t.components!=null?t.components.map(u=>re.from(u)):null;return new re(at,n||"",i,"tuple",s,a,null,null)}return i=qu(t.type),new re(at,n||"",i,i,s,null,null,null)}static isParamType(t){return t&&t[Ht]===$u}};$r=new WeakSet,ho=function(t,e,n,s){if(this.isArray()){if(!Array.isArray(e))throw new Error("invalid array value");if(this.arrayLength!==-1&&e.length!==this.arrayLength)throw new Error("array is wrong length");const o=this.arrayChildren,a=e.slice();a.forEach((c,u)=>{var f;I(f=o,$r,ho).call(f,t,c,n,h=>{a[u]=h})}),s(a);return}if(this.isTuple()){const o=this.components;let a;if(Array.isArray(e))a=e.slice();else{if(e==null||typeof e!="object")throw new Error("invalid tuple value");a=o.map(c=>{if(!c.name)throw new Error("cannot use object value with unnamed components");if(!(c.name in e))throw new Error(`missing value for component ${c.name}`);return e[c.name]})}if(a.length!==this.components.length)throw new Error("array is wrong length");a.forEach((c,u)=>{var f;I(f=o[u],$r,ho).call(f,t,c,n,h=>{a[u]=h})}),s(a);return}const i=n(this.type,e);i.then?t.push(async function(){s(await i)}()):s(i)};let Et=re;class Vn{constructor(t,e,n){A(this,"type");A(this,"inputs");yi(t,at,"Fragment"),n=Object.freeze(n.slice()),M(this,{type:e,inputs:n})}static from(t){if(typeof t=="string"){try{Vn.from(JSON.parse(t))}catch{}return Vn.from(pn(t))}if(t instanceof de)switch(t.peekKeyword(ju)){case"constructor":return Qe.from(t);case"error":return _t.from(t);case"event":return Pe.from(t);case"fallback":case"receive":return He.from(t);case"function":return Ne.from(t);case"struct":return Jn.from(t)}else if(typeof t=="object"){switch(t.type){case"constructor":return Qe.from(t);case"error":return _t.from(t);case"event":return Pe.from(t);case"fallback":case"receive":return He.from(t);case"function":return Ne.from(t);case"struct":return Jn.from(t)}P(!1,`unsupported type: ${t.type}`,"UNSUPPORTED_OPERATION",{operation:"Fragment.from"})}y(!1,"unsupported frgament object","obj",t)}static isConstructor(t){return Qe.isFragment(t)}static isError(t){return _t.isFragment(t)}static isEvent(t){return Pe.isFragment(t)}static isFunction(t){return Ne.isFragment(t)}static isStruct(t){return Jn.isFragment(t)}}class Qi extends Vn{constructor(e,n,s,i){super(e,n,i);A(this,"name");y(typeof s=="string"&&s.match(Ku),"invalid identifier","name",s),i=Object.freeze(i.slice()),M(this,{name:s})}}function Ls(r,t){return"("+t.map(e=>e.format(r)).join(r==="full"?", ":",")+")"}class _t extends Qi{constructor(t,e,n){super(t,"error",e,n),Object.defineProperty(this,Ht,{value:tl})}get selector(){return Gn(this.format("sighash")).substring(0,10)}format(t){if(t==null&&(t="sighash"),t==="json")return JSON.stringify({type:"error",name:this.name,inputs:this.inputs.map(n=>JSON.parse(n.format(t)))});const e=[];return t!=="sighash"&&e.push("error"),e.push(this.name+Ls(t,this.inputs)),e.join(" ")}static from(t){if(_t.isFragment(t))return t;if(typeof t=="string")return _t.from(pn(t));if(t instanceof de){const e=Gi("error",t),n=Ge(t);return _n(t),new _t(at,e,n)}return new _t(at,t.name,t.inputs?t.inputs.map(Et.from):[])}static isFragment(t){return t&&t[Ht]===tl}}class Pe extends Qi{constructor(e,n,s,i){super(e,"event",n,s);A(this,"anonymous");Object.defineProperty(this,Ht,{value:el}),M(this,{anonymous:i})}get topicHash(){return Gn(this.format("sighash"))}format(e){if(e==null&&(e="sighash"),e==="json")return JSON.stringify({type:"event",anonymous:this.anonymous,name:this.name,inputs:this.inputs.map(s=>JSON.parse(s.format(e)))});const n=[];return e!=="sighash"&&n.push("event"),n.push(this.name+Ls(e,this.inputs)),e!=="sighash"&&this.anonymous&&n.push("anonymous"),n.join(" ")}static getTopicHash(e,n){return n=(n||[]).map(i=>Et.from(i)),new Pe(at,e,n,!1).topicHash}static from(e){if(Pe.isFragment(e))return e;if(typeof e=="string")try{return Pe.from(pn(e))}catch{y(!1,"invalid event fragment","obj",e)}else if(e instanceof de){const n=Gi("event",e),s=Ge(e,!0),i=!!Me(e,Dt(["anonymous"])).has("anonymous");return _n(e),new Pe(at,n,s,i)}return new Pe(at,e.name,e.inputs?e.inputs.map(n=>Et.from(n,!0)):[],!!e.anonymous)}static isFragment(e){return e&&e[Ht]===el}}class Qe extends Vn{constructor(e,n,s,i,o){super(e,n,s);A(this,"payable");A(this,"gas");Object.defineProperty(this,Ht,{value:nl}),M(this,{payable:i,gas:o})}format(e){if(P(e!=null&&e!=="sighash","cannot format a constructor for sighash","UNSUPPORTED_OPERATION",{operation:"format(sighash)"}),e==="json")return JSON.stringify({type:"constructor",stateMutability:this.payable?"payable":"undefined",payable:this.payable,gas:this.gas!=null?this.gas:void 0,inputs:this.inputs.map(s=>JSON.parse(s.format(e)))});const n=[`constructor${Ls(e,this.inputs)}`];return n.push(this.payable?"payable":"nonpayable"),this.gas!=null&&n.push(`@${this.gas.toString()}`),n.join(" ")}static from(e){if(Qe.isFragment(e))return e;if(typeof e=="string")try{return Qe.from(pn(e))}catch{y(!1,"invalid constuctor fragment","obj",e)}else if(e instanceof de){Me(e,Dt(["constructor"]));const n=Ge(e),s=!!Me(e,ep).has("payable"),i=Xu(e);return _n(e),new Qe(at,"constructor",n,s,i)}return new Qe(at,"constructor",e.inputs?e.inputs.map(Et.from):[],!!e.payable,e.gas!=null?e.gas:null)}static isFragment(e){return e&&e[Ht]===nl}}class He extends Vn{constructor(e,n,s){super(e,"fallback",n);A(this,"payable");Object.defineProperty(this,Ht,{value:rl}),M(this,{payable:s})}format(e){const n=this.inputs.length===0?"receive":"fallback";if(e==="json"){const s=this.payable?"payable":"nonpayable";return JSON.stringify({type:n,stateMutability:s})}return`${n}()${this.payable?" payable":""}`}static from(e){if(He.isFragment(e))return e;if(typeof e=="string")try{return He.from(pn(e))}catch{y(!1,"invalid fallback fragment","obj",e)}else if(e instanceof de){const n=e.toString(),s=e.peekKeyword(Dt(["fallback","receive"]));if(y(s,"type must be fallback or receive","obj",n),e.popKeyword(Dt(["fallback","receive"]))==="receive"){const c=Ge(e);return y(c.length===0,"receive cannot have arguments","obj.inputs",c),Me(e,Dt(["payable"])),_n(e),new He(at,[],!0)}let o=Ge(e);o.length?y(o.length===1&&o[0].type==="bytes","invalid fallback inputs","obj.inputs",o.map(c=>c.format("minimal")).join(", ")):o=[Et.from("bytes")];const a=Zu(e);if(y(a==="nonpayable"||a==="payable","fallback cannot be constants","obj.stateMutability",a),Me(e,Dt(["returns"])).has("returns")){const c=Ge(e);y(c.length===1&&c[0].type==="bytes","invalid fallback outputs","obj.outputs",c.map(u=>u.format("minimal")).join(", "))}return _n(e),new He(at,o,a==="payable")}if(e.type==="receive")return new He(at,[],!0);if(e.type==="fallback"){const n=[Et.from("bytes")],s=e.stateMutability==="payable";return new He(at,n,s)}y(!1,"invalid fallback description","obj",e)}static isFragment(e){return e&&e[Ht]===rl}}class Ne extends Qi{constructor(e,n,s,i,o,a){super(e,"function",n,i);A(this,"constant");A(this,"outputs");A(this,"stateMutability");A(this,"payable");A(this,"gas");Object.defineProperty(this,Ht,{value:sl}),o=Object.freeze(o.slice()),M(this,{constant:s==="view"||s==="pure",gas:a,outputs:o,payable:s==="payable",stateMutability:s})}get selector(){return Gn(this.format("sighash")).substring(0,10)}format(e){if(e==null&&(e="sighash"),e==="json")return JSON.stringify({type:"function",name:this.name,constant:this.constant,stateMutability:this.stateMutability!=="nonpayable"?this.stateMutability:void 0,payable:this.payable,gas:this.gas!=null?this.gas:void 0,inputs:this.inputs.map(s=>JSON.parse(s.format(e))),outputs:this.outputs.map(s=>JSON.parse(s.format(e)))});const n=[];return e!=="sighash"&&n.push("function"),n.push(this.name+Ls(e,this.inputs)),e!=="sighash"&&(this.stateMutability!=="nonpayable"&&n.push(this.stateMutability),this.outputs&&this.outputs.length&&(n.push("returns"),n.push(Ls(e,this.outputs))),this.gas!=null&&n.push(`@${this.gas.toString()}`)),n.join(" ")}static getSelector(e,n){return n=(n||[]).map(i=>Et.from(i)),new Ne(at,e,"view",n,[],null).selector}static from(e){if(Ne.isFragment(e))return e;if(typeof e=="string")try{return Ne.from(pn(e))}catch{y(!1,"invalid function fragment","obj",e)}else if(e instanceof de){const s=Gi("function",e),i=Ge(e),o=Zu(e);let a=[];Me(e,Dt(["returns"])).has("returns")&&(a=Ge(e));const c=Xu(e);return _n(e),new Ne(at,s,o,i,a,c)}let n=e.stateMutability;return n==null&&(n="payable",typeof e.constant=="boolean"?(n="view",e.constant||(n="payable",typeof e.payable=="boolean"&&!e.payable&&(n="nonpayable"))):typeof e.payable=="boolean"&&!e.payable&&(n="nonpayable")),new Ne(at,e.name,n,e.inputs?e.inputs.map(Et.from):[],e.outputs?e.outputs.map(Et.from):[],e.gas!=null?e.gas:null)}static isFragment(e){return e&&e[Ht]===sl}}class Jn extends Qi{constructor(t,e,n){super(t,"struct",e,n),Object.defineProperty(this,Ht,{value:il})}format(){throw new Error("@TODO")}static from(t){if(typeof t=="string")try{return Jn.from(pn(t))}catch{y(!1,"invalid struct fragment","obj",t)}else if(t instanceof de){const e=Gi("struct",t),n=Ge(t);return _n(t),new Jn(at,e,n)}return new Jn(at,t.name,t.inputs?t.inputs.map(Et.from):[])}static isFragment(t){return t&&t[Ht]===il}}const pe=new Map;pe.set(0,"GENERIC_PANIC"),pe.set(1,"ASSERT_FALSE"),pe.set(17,"OVERFLOW"),pe.set(18,"DIVIDE_BY_ZERO"),pe.set(33,"ENUM_RANGE_ERROR"),pe.set(34,"BAD_STORAGE_DATA"),pe.set(49,"STACK_UNDERFLOW"),pe.set(50,"ARRAY_RANGE_ERROR"),pe.set(65,"OUT_OF_MEMORY"),pe.set(81,"UNINITIALIZED_FUNCTION_CALL");const fp=new RegExp(/^bytes([0-9]*)$/),hp=new RegExp(/^(u?int)([0-9]*)$/);let ia=null;function dp(r,t,e,n){let s="missing revert data",i=null;const o=null;let a=null;if(e){s="execution reverted";const u=X(e);if(e=F(e),u.length===0)s+=" (no data present; likely require(false) occurred",i="require(false)";else if(u.length%32!==4)s+=" (could not decode reason; invalid data length)";else if(F(u.slice(0,4))==="0x08c379a0")try{i=n.decode(["string"],u.slice(4))[0],a={signature:"Error(string)",name:"Error",args:[i]},s+=`: ${JSON.stringify(i)}`}catch{s+=" (could not decode reason; invalid string data)"}else if(F(u.slice(0,4))==="0x4e487b71")try{const f=Number(n.decode(["uint256"],u.slice(4))[0]);a={signature:"Panic(uint256)",name:"Panic",args:[f]},i=`Panic due to ${pe.get(f)||"UNKNOWN"}(${f})`,s+=`: ${i}`}catch{s+=" (could not decode panic code)"}else s+=" (unknown custom error)"}const c={to:t.to?Y(t.to):null,data:t.data||"0x"};return t.from&&(c.from=Y(t.from)),gt(s,"CALL_EXCEPTION",{action:r,data:e,reason:i,transaction:c,invocation:o,revert:a})}const io=class io{constructor(){b(this,bn)}getDefaultValue(t){const e=t.map(s=>I(this,bn,Es).call(this,Et.from(s)));return new Ii(e,"_").defaultValue()}encode(t,e){Ka(e.length,t.length,"types/values length mismatch");const n=t.map(o=>I(this,bn,Es).call(this,Et.from(o))),s=new Ii(n,"_"),i=new No;return s.encode(i,e),i.data}decode(t,e,n){const s=t.map(o=>I(this,bn,Es).call(this,Et.from(o)));return new Ii(s,"_").decode(new To(e,n))}static defaultAbiCoder(){return ia==null&&(ia=new io),ia}static getBuiltinCallException(t,e,n){return dp(t,e,n,io.defaultAbiCoder())}};bn=new WeakSet,Es=function(t){if(t.isArray())return new Jh(I(this,bn,Es).call(this,t.arrayChildren),t.arrayLength,t.name);if(t.isTuple())return new Ii(t.components.map(n=>I(this,bn,Es).call(this,n)),t.name);switch(t.baseType){case"address":return new _h(t.name);case"bool":return new jh(t.name);case"string":return new td(t.name);case"bytes":return new zh(t.name);case"":return new Yh(t.name)}let e=t.type.match(hp);if(e){let n=parseInt(e[2]||"256");return y(n!==0&&n<=256&&n%8===0,"invalid "+e[1]+" bit length","param",t),new $h(n/8,e[1]==="int",t.name)}if(e=t.type.match(fp),e){let n=parseInt(e[1]);return y(n!==0&&n<=32,"invalid bytes length","param",t),new Kh(n,t.name)}y(!1,"invalid type","type",t.type)};let Ms=io;class pp{constructor(t,e,n){A(this,"fragment");A(this,"name");A(this,"signature");A(this,"topic");A(this,"args");const s=t.name,i=t.format();M(this,{fragment:t,name:s,signature:i,topic:e,args:n})}}class gp{constructor(t,e,n,s){A(this,"fragment");A(this,"name");A(this,"args");A(this,"signature");A(this,"selector");A(this,"value");const i=t.name,o=t.format();M(this,{fragment:t,name:i,args:n,signature:o,selector:e,value:s})}}class yp{constructor(t,e,n){A(this,"fragment");A(this,"name");A(this,"args");A(this,"signature");A(this,"selector");const s=t.name,i=t.format();M(this,{fragment:t,name:s,args:n,signature:i,selector:e})}}class ol{constructor(t){A(this,"hash");A(this,"_isIndexed");M(this,{hash:t,_isIndexed:!0})}static isIndexed(t){return!!(t&&t._isIndexed)}}const al={0:"generic panic",1:"assert(false)",17:"arithmetic overflow",18:"division or modulo by zero",33:"enum overflow",34:"invalid encoded storage byte array accessed",49:"out-of-bounds array access; popping on an empty array",50:"out-of-bounds access of an array or bytesN",65:"out of memory",81:"uninitialized function"},cl={"0x08c379a0":{signature:"Error(string)",name:"Error",inputs:["string"],reason:r=>`reverted with reason string ${JSON.stringify(r)}`},"0x4e487b71":{signature:"Panic(uint256)",name:"Panic",inputs:["uint256"],reason:r=>{let t="unknown panic code";return r>=0&&r<=255&&al[r.toString()]&&(t=al[r.toString()]),`reverted with panic code 0x${r.toString(16)} (${t})`}}},ns=class ns{constructor(t){b(this,ts);b(this,es);A(this,"fragments");A(this,"deploy");A(this,"fallback");A(this,"receive");b(this,Ce,void 0);b(this,Oe,void 0);b(this,Ie,void 0);b(this,Nt,void 0);let e=[];typeof t=="string"?e=JSON.parse(t):e=t,d(this,Ie,new Map),d(this,Ce,new Map),d(this,Oe,new Map);const n=[];for(const o of e)try{n.push(Vn.from(o))}catch(a){console.log("EE",a)}M(this,{fragments:Object.freeze(n)});let s=null,i=!1;d(this,Nt,this.getAbiCoder()),this.fragments.forEach((o,a)=>{let c;switch(o.type){case"constructor":if(this.deploy){console.log("duplicate definition - constructor");return}M(this,{deploy:o});return;case"fallback":o.inputs.length===0?i=!0:(y(!s||o.payable!==s.payable,"conflicting fallback fragments",`fragments[${a}]`,o),s=o,i=s.payable);return;case"function":c=l(this,Ie);break;case"event":c=l(this,Oe);break;case"error":c=l(this,Ce);break;default:return}const u=o.format();c.has(u)||c.set(u,o)}),this.deploy||M(this,{deploy:Qe.from("constructor()")}),M(this,{fallback:s,receive:i})}format(t){const e=t?"minimal":"full";return this.fragments.map(s=>s.format(e))}formatJson(){const t=this.fragments.map(e=>e.format("json"));return JSON.stringify(t.map(e=>JSON.parse(e)))}getAbiCoder(){return Ms.defaultAbiCoder()}getFunctionName(t){const e=I(this,ts,po).call(this,t,null,!1);return y(e,"no matching function","key",t),e.name}hasFunction(t){return!!I(this,ts,po).call(this,t,null,!1)}getFunction(t,e){return I(this,ts,po).call(this,t,e||null,!0)}forEachFunction(t){const e=Array.from(l(this,Ie).keys());e.sort((n,s)=>n.localeCompare(s));for(let n=0;n<e.length;n++){const s=e[n];t(l(this,Ie).get(s),n)}}getEventName(t){const e=I(this,es,go).call(this,t,null,!1);return y(e,"no matching event","key",t),e.name}hasEvent(t){return!!I(this,es,go).call(this,t,null,!1)}getEvent(t,e){return I(this,es,go).call(this,t,e||null,!0)}forEachEvent(t){const e=Array.from(l(this,Oe).keys());e.sort((n,s)=>n.localeCompare(s));for(let n=0;n<e.length;n++){const s=e[n];t(l(this,Oe).get(s),n)}}getError(t,e){if(it(t)){const s=t.toLowerCase();if(cl[s])return _t.from(cl[s].signature);for(const i of l(this,Ce).values())if(s===i.selector)return i;return null}if(t.indexOf("(")===-1){const s=[];for(const[i,o]of l(this,Ce))i.split("(")[0]===t&&s.push(o);if(s.length===0)return t==="Error"?_t.from("error Error(string)"):t==="Panic"?_t.from("error Panic(uint256)"):null;if(s.length>1){const i=s.map(o=>JSON.stringify(o.format())).join(", ");y(!1,`ambiguous error description (i.e. ${i})`,"name",t)}return s[0]}if(t=_t.from(t).format(),t==="Error(string)")return _t.from("error Error(string)");if(t==="Panic(uint256)")return _t.from("error Panic(uint256)");const n=l(this,Ce).get(t);return n||null}forEachError(t){const e=Array.from(l(this,Ce).keys());e.sort((n,s)=>n.localeCompare(s));for(let n=0;n<e.length;n++){const s=e[n];t(l(this,Ce).get(s),n)}}_decodeParams(t,e){return l(this,Nt).decode(t,e)}_encodeParams(t,e){return l(this,Nt).encode(t,e)}encodeDeploy(t){return this._encodeParams(this.deploy.inputs,t||[])}decodeErrorResult(t,e){if(typeof t=="string"){const n=this.getError(t);y(n,"unknown error","fragment",t),t=n}return y(ut(e,0,4)===t.selector,`data signature does not match error ${t.name}.`,"data",e),this._decodeParams(t.inputs,ut(e,4))}encodeErrorResult(t,e){if(typeof t=="string"){const n=this.getError(t);y(n,"unknown error","fragment",t),t=n}return yt([t.selector,this._encodeParams(t.inputs,e||[])])}decodeFunctionData(t,e){if(typeof t=="string"){const n=this.getFunction(t);y(n,"unknown function","fragment",t),t=n}return y(ut(e,0,4)===t.selector,`data signature does not match function ${t.name}.`,"data",e),this._decodeParams(t.inputs,ut(e,4))}encodeFunctionData(t,e){if(typeof t=="string"){const n=this.getFunction(t);y(n,"unknown function","fragment",t),t=n}return yt([t.selector,this._encodeParams(t.inputs,e||[])])}decodeFunctionResult(t,e){if(typeof t=="string"){const i=this.getFunction(t);y(i,"unknown function","fragment",t),t=i}let n="invalid length for result data";const s=Mt(e);if(s.length%32===0)try{return l(this,Nt).decode(t.outputs,s)}catch{n="could not decode result data"}P(!1,n,"BAD_DATA",{value:F(s),info:{method:t.name,signature:t.format()}})}makeError(t,e){const n=X(t,"data"),s=Ms.getBuiltinCallException("call",e,n),i="execution reverted (unknown custom error)";if(s.message.startsWith(i)){const a=F(n.slice(0,4)),c=this.getError(a);if(c)try{const u=l(this,Nt).decode(c.inputs,n.slice(4));s.revert={name:c.name,signature:c.format(),args:u},s.reason=s.revert.signature,s.message=`execution reverted: ${s.reason}`}catch{s.message="execution reverted (coult not decode custom error)"}}const o=this.parseTransaction(e);return o&&(s.invocation={method:o.name,signature:o.signature,args:o.args}),s}encodeFunctionResult(t,e){if(typeof t=="string"){const n=this.getFunction(t);y(n,"unknown function","fragment",t),t=n}return F(l(this,Nt).encode(t.outputs,e||[]))}encodeFilterTopics(t,e){if(typeof t=="string"){const i=this.getEvent(t);y(i,"unknown event","eventFragment",t),t=i}P(e.length<=t.inputs.length,`too many arguments for ${t.format()}`,"UNEXPECTED_ARGUMENT",{count:e.length,expectedCount:t.inputs.length});const n=[];t.anonymous||n.push(t.topicHash);const s=(i,o)=>i.type==="string"?Gn(o):i.type==="bytes"?ot(F(o)):(i.type==="bool"&&typeof o=="boolean"?o=o?"0x01":"0x00":i.type.match(/^u?int/)?o=cn(o):i.type.match(/^bytes/)?o=lf(o,32):i.type==="address"&&l(this,Nt).encode(["address"],[o]),Dn(F(o),32));for(e.forEach((i,o)=>{const a=t.inputs[o];if(!a.indexed){y(i==null,"cannot filter non-indexed parameters; must be null","contract."+a.name,i);return}i==null?n.push(null):a.baseType==="array"||a.baseType==="tuple"?y(!1,"filtering with tuples or arrays not supported","contract."+a.name,i):Array.isArray(i)?n.push(i.map(c=>s(a,c))):n.push(s(a,i))});n.length&&n[n.length-1]===null;)n.pop();return n}encodeEventLog(t,e){if(typeof t=="string"){const o=this.getEvent(t);y(o,"unknown event","eventFragment",t),t=o}const n=[],s=[],i=[];return t.anonymous||n.push(t.topicHash),y(e.length===t.inputs.length,"event arguments/values mismatch","values",e),t.inputs.forEach((o,a)=>{const c=e[a];if(o.indexed)if(o.type==="string")n.push(Gn(c));else if(o.type==="bytes")n.push(ot(c));else{if(o.baseType==="tuple"||o.baseType==="array")throw new Error("not implemented");n.push(l(this,Nt).encode([o.type],[c]))}else s.push(o),i.push(c)}),{data:l(this,Nt).encode(s,i),topics:n}}decodeEventLog(t,e,n){if(typeof t=="string"){const w=this.getEvent(t);y(w,"unknown event","eventFragment",t),t=w}if(n!=null&&!t.anonymous){const w=t.topicHash;y(it(n[0],32)&&n[0].toLowerCase()===w,"fragment/topic mismatch","topics[0]",n[0]),n=n.slice(1)}const s=[],i=[],o=[];t.inputs.forEach((w,E)=>{w.indexed?w.type==="string"||w.type==="bytes"||w.baseType==="tuple"||w.baseType==="array"?(s.push(Et.from({type:"bytes32",name:w.name})),o.push(!0)):(s.push(w),o.push(!1)):(i.push(w),o.push(!1))});const a=n!=null?l(this,Nt).decode(s,yt(n)):null,c=l(this,Nt).decode(i,e,!0),u=[],f=[];let h=0,g=0;return t.inputs.forEach((w,E)=>{let m=null;if(w.indexed)if(a==null)m=new ol(null);else if(o[E])m=new ol(a[g++]);else try{m=a[g++]}catch(x){m=x}else try{m=c[h++]}catch(x){m=x}u.push(m),f.push(w.name||null)}),vi.fromItems(u,f)}parseTransaction(t){const e=X(t.data,"tx.data"),n=L(t.value!=null?t.value:0,"tx.value"),s=this.getFunction(F(e.slice(0,4)));if(!s)return null;const i=l(this,Nt).decode(s.inputs,e.slice(4));return new gp(s,s.selector,i,n)}parseCallResult(t){throw new Error("@TODO")}parseLog(t){const e=this.getEvent(t.topics[0]);return!e||e.anonymous?null:new pp(e,e.topicHash,this.decodeEventLog(e,t.data,t.topics))}parseError(t){const e=F(t),n=this.getError(ut(e,0,4));if(!n)return null;const s=l(this,Nt).decode(n.inputs,ut(e,4));return new yp(n,n.selector,s)}static from(t){return t instanceof ns?t:typeof t=="string"?new ns(JSON.parse(t)):typeof t.format=="function"?new ns(t.format("json")):new ns(t)}};Ce=new WeakMap,Oe=new WeakMap,Ie=new WeakMap,Nt=new WeakMap,ts=new WeakSet,po=function(t,e,n){if(it(t)){const i=t.toLowerCase();for(const o of l(this,Ie).values())if(i===o.selector)return o;return null}if(t.indexOf("(")===-1){const i=[];for(const[o,a]of l(this,Ie))o.split("(")[0]===t&&i.push(a);if(e){const o=e.length>0?e[e.length-1]:null;let a=e.length,c=!0;xt.isTyped(o)&&o.type==="overrides"&&(c=!1,a--);for(let u=i.length-1;u>=0;u--){const f=i[u].inputs.length;f!==a&&(!c||f!==a-1)&&i.splice(u,1)}for(let u=i.length-1;u>=0;u--){const f=i[u].inputs;for(let h=0;h<e.length;h++)if(xt.isTyped(e[h])){if(h>=f.length){if(e[h].type==="overrides")continue;i.splice(u,1);break}if(e[h].type!==f[h].baseType){i.splice(u,1);break}}}}if(i.length===1&&e&&e.length!==i[0].inputs.length){const o=e[e.length-1];(o==null||Array.isArray(o)||typeof o!="object")&&i.splice(0,1)}if(i.length===0)return null;if(i.length>1&&n){const o=i.map(a=>JSON.stringify(a.format())).join(", ");y(!1,`ambiguous function description (i.e. matches ${o})`,"key",t)}return i[0]}const s=l(this,Ie).get(Ne.from(t).format());return s||null},es=new WeakSet,go=function(t,e,n){if(it(t)){const i=t.toLowerCase();for(const o of l(this,Oe).values())if(i===o.topicHash)return o;return null}if(t.indexOf("(")===-1){const i=[];for(const[o,a]of l(this,Oe))o.split("(")[0]===t&&i.push(a);if(e){for(let o=i.length-1;o>=0;o--)i[o].inputs.length<e.length&&i.splice(o,1);for(let o=i.length-1;o>=0;o--){const a=i[o].inputs;for(let c=0;c<e.length;c++)if(xt.isTyped(e[c])&&e[c].type!==a[c].baseType){i.splice(o,1);break}}}if(i.length===0)return null;if(i.length>1&&n){const o=i.map(a=>JSON.stringify(a.format())).join(", ");y(!1,`ambiguous event description (i.e. matches ${o})`,"key",t)}return i[0]}const s=l(this,Oe).get(Pe.from(t).format());return s||null};let oa=ns;const ul=BigInt(0);function Gs(r){return r??null}function Pt(r){return r==null?null:r.toString()}class ll{constructor(t,e,n){A(this,"gasPrice");A(this,"maxFeePerGas");A(this,"maxPriorityFeePerGas");M(this,{gasPrice:Gs(t),maxFeePerGas:Gs(e),maxPriorityFeePerGas:Gs(n)})}toJSON(){const{gasPrice:t,maxFeePerGas:e,maxPriorityFeePerGas:n}=this;return{_type:"FeeData",gasPrice:Pt(t),maxFeePerGas:Pt(e),maxPriorityFeePerGas:Pt(n)}}}function Hi(r){const t={};r.to&&(t.to=r.to),r.from&&(t.from=r.from),r.data&&(t.data=F(r.data));const e="chainId,gasLimit,gasPrice,maxFeePerGas,maxPriorityFeePerGas,value".split(/,/);for(const s of e)!(s in r)||r[s]==null||(t[s]=L(r[s],`request.${s}`));const n="type,nonce".split(/,/);for(const s of n)!(s in r)||r[s]==null||(t[s]=J(r[s],`request.${s}`));return r.accessList&&(t.accessList=Hn(r.accessList)),"blockTag"in r&&(t.blockTag=r.blockTag),"enableCcipRead"in r&&(t.enableCcipRead=!!r.enableCcipRead),"customData"in r&&(t.customData=r.customData),t}class mp{constructor(t,e){A(this,"provider");A(this,"number");A(this,"hash");A(this,"timestamp");A(this,"parentHash");A(this,"nonce");A(this,"difficulty");A(this,"gasLimit");A(this,"gasUsed");A(this,"miner");A(this,"extraData");A(this,"baseFeePerGas");b(this,Xe,void 0);d(this,Xe,t.transactions.map(n=>typeof n!="string"?new Hs(n,e):n)),M(this,{provider:e,hash:Gs(t.hash),number:t.number,timestamp:t.timestamp,parentHash:t.parentHash,nonce:t.nonce,difficulty:t.difficulty,gasLimit:t.gasLimit,gasUsed:t.gasUsed,miner:t.miner,extraData:t.extraData,baseFeePerGas:Gs(t.baseFeePerGas)})}get transactions(){return l(this,Xe).map(t=>typeof t=="string"?t:t.hash)}get prefetchedTransactions(){const t=l(this,Xe).slice();return t.length===0?[]:(P(typeof t[0]=="object","transactions were not prefetched with block request","UNSUPPORTED_OPERATION",{operation:"transactionResponses()"}),t)}toJSON(){const{baseFeePerGas:t,difficulty:e,extraData:n,gasLimit:s,gasUsed:i,hash:o,miner:a,nonce:c,number:u,parentHash:f,timestamp:h,transactions:g}=this;return{_type:"Block",baseFeePerGas:Pt(t),difficulty:Pt(e),extraData:n,gasLimit:Pt(s),gasUsed:Pt(i),hash:o,miner:a,nonce:c,number:u,parentHash:f,timestamp:h,transactions:g}}[Symbol.iterator](){let t=0;const e=this.transactions;return{next:()=>t<this.length?{value:e[t++],done:!1}:{value:void 0,done:!0}}}get length(){return l(this,Xe).length}get date(){return this.timestamp==null?null:new Date(this.timestamp*1e3)}async getTransaction(t){let e;if(typeof t=="number")e=l(this,Xe)[t];else{const n=t.toLowerCase();for(const s of l(this,Xe))if(typeof s=="string"){if(s!==n)continue;e=s;break}else{if(s.hash===n)continue;e=s;break}}if(e==null)throw new Error("no such tx");return typeof e=="string"?await this.provider.getTransaction(e):e}getPrefetchedTransaction(t){const e=this.prefetchedTransactions;if(typeof t=="number")return e[t];t=t.toLowerCase();for(const n of e)if(n.hash===t)return n;y(!1,"no matching transaction","indexOrHash",t)}isMined(){return!!this.hash}isLondon(){return!!this.baseFeePerGas}orphanedEvent(){if(!this.isMined())throw new Error("");return wp(this)}}Xe=new WeakMap;class Qs{constructor(t,e){A(this,"provider");A(this,"transactionHash");A(this,"blockHash");A(this,"blockNumber");A(this,"removed");A(this,"address");A(this,"data");A(this,"topics");A(this,"index");A(this,"transactionIndex");this.provider=e;const n=Object.freeze(t.topics.slice());M(this,{transactionHash:t.transactionHash,blockHash:t.blockHash,blockNumber:t.blockNumber,removed:t.removed,address:t.address,data:t.data,topics:n,index:t.index,transactionIndex:t.transactionIndex})}toJSON(){const{address:t,blockHash:e,blockNumber:n,data:s,index:i,removed:o,topics:a,transactionHash:c,transactionIndex:u}=this;return{_type:"log",address:t,blockHash:e,blockNumber:n,data:s,index:i,removed:o,topics:a,transactionHash:c,transactionIndex:u}}async getBlock(){const t=await this.provider.getBlock(this.blockHash);return P(!!t,"failed to find transaction","UNKNOWN_ERROR",{}),t}async getTransaction(){const t=await this.provider.getTransaction(this.transactionHash);return P(!!t,"failed to find transaction","UNKNOWN_ERROR",{}),t}async getTransactionReceipt(){const t=await this.provider.getTransactionReceipt(this.transactionHash);return P(!!t,"failed to find transaction receipt","UNKNOWN_ERROR",{}),t}removedEvent(){return Ap(this)}}class fl{constructor(t,e){A(this,"provider");A(this,"to");A(this,"from");A(this,"contractAddress");A(this,"hash");A(this,"index");A(this,"blockHash");A(this,"blockNumber");A(this,"logsBloom");A(this,"gasUsed");A(this,"cumulativeGasUsed");A(this,"gasPrice");A(this,"type");A(this,"status");A(this,"root");b(this,Xs,void 0);d(this,Xs,Object.freeze(t.logs.map(s=>new Qs(s,e))));let n=ul;t.effectiveGasPrice!=null?n=t.effectiveGasPrice:t.gasPrice!=null&&(n=t.gasPrice),M(this,{provider:e,to:t.to,from:t.from,contractAddress:t.contractAddress,hash:t.hash,index:t.index,blockHash:t.blockHash,blockNumber:t.blockNumber,logsBloom:t.logsBloom,gasUsed:t.gasUsed,cumulativeGasUsed:t.cumulativeGasUsed,gasPrice:n,type:t.type,status:t.status,root:t.root})}get logs(){return l(this,Xs)}toJSON(){const{to:t,from:e,contractAddress:n,hash:s,index:i,blockHash:o,blockNumber:a,logsBloom:c,logs:u,status:f,root:h}=this;return{_type:"TransactionReceipt",blockHash:o,blockNumber:a,contractAddress:n,cumulativeGasUsed:Pt(this.cumulativeGasUsed),from:e,gasPrice:Pt(this.gasPrice),gasUsed:Pt(this.gasUsed),hash:s,index:i,logs:u,logsBloom:c,root:h,status:f,to:t}}get length(){return this.logs.length}[Symbol.iterator](){let t=0;return{next:()=>t<this.length?{value:this.logs[t++],done:!1}:{value:void 0,done:!0}}}get fee(){return this.gasUsed*this.gasPrice}async getBlock(){const t=await this.provider.getBlock(this.blockHash);if(t==null)throw new Error("TODO");return t}async getTransaction(){const t=await this.provider.getTransaction(this.hash);if(t==null)throw new Error("TODO");return t}async getResult(){return await this.provider.getTransactionResult(this.hash)}async confirmations(){return await this.provider.getBlockNumber()-this.blockNumber+1}removedEvent(){return dl(this)}reorderedEvent(t){return P(!t||t.isMined(),"unmined 'other' transction cannot be orphaned","UNSUPPORTED_OPERATION",{operation:"reorderedEvent(other)"}),hl(this,t)}}Xs=new WeakMap;const Ia=class Ia{constructor(t,e){A(this,"provider");A(this,"blockNumber");A(this,"blockHash");A(this,"index");A(this,"hash");A(this,"type");A(this,"to");A(this,"from");A(this,"nonce");A(this,"gasLimit");A(this,"gasPrice");A(this,"maxPriorityFeePerGas");A(this,"maxFeePerGas");A(this,"data");A(this,"value");A(this,"chainId");A(this,"signature");A(this,"accessList");b(this,En,void 0);this.provider=e,this.blockNumber=t.blockNumber!=null?t.blockNumber:null,this.blockHash=t.blockHash!=null?t.blockHash:null,this.hash=t.hash,this.index=t.index,this.type=t.type,this.from=t.from,this.to=t.to||null,this.gasLimit=t.gasLimit,this.nonce=t.nonce,this.data=t.data,this.value=t.value,this.gasPrice=t.gasPrice,this.maxPriorityFeePerGas=t.maxPriorityFeePerGas!=null?t.maxPriorityFeePerGas:null,this.maxFeePerGas=t.maxFeePerGas!=null?t.maxFeePerGas:null,this.chainId=t.chainId,this.signature=t.signature,this.accessList=t.accessList!=null?t.accessList:null,d(this,En,-1)}toJSON(){const{blockNumber:t,blockHash:e,index:n,hash:s,type:i,to:o,from:a,nonce:c,data:u,signature:f,accessList:h}=this;return{_type:"TransactionReceipt",accessList:h,blockNumber:t,blockHash:e,chainId:Pt(this.chainId),data:u,from:a,gasLimit:Pt(this.gasLimit),gasPrice:Pt(this.gasPrice),hash:s,maxFeePerGas:Pt(this.maxFeePerGas),maxPriorityFeePerGas:Pt(this.maxPriorityFeePerGas),nonce:c,signature:f,to:o,index:n,type:i,value:Pt(this.value)}}async getBlock(){let t=this.blockNumber;if(t==null){const n=await this.getTransaction();n&&(t=n.blockNumber)}if(t==null)return null;const e=this.provider.getBlock(t);if(e==null)throw new Error("TODO");return e}async getTransaction(){return this.provider.getTransaction(this.hash)}async confirmations(){if(this.blockNumber==null){const{tx:e,blockNumber:n}=await Rt({tx:this.getTransaction(),blockNumber:this.provider.getBlockNumber()});return e==null||e.blockNumber==null?0:n-e.blockNumber+1}return await this.provider.getBlockNumber()-this.blockNumber+1}async wait(t,e){const n=t??1,s=e??0;let i=l(this,En),o=-1,a=i===-1;const c=async()=>{if(a)return null;const{blockNumber:g,nonce:w}=await Rt({blockNumber:this.provider.getBlockNumber(),nonce:this.provider.getTransactionCount(this.from)});if(w<this.nonce){i=g;return}if(a)return null;const E=await this.getTransaction();if(!(E&&E.blockNumber!=null))for(o===-1&&(o=i-3,o<l(this,En)&&(o=l(this,En)));o<=g;){if(a)return null;const m=await this.provider.getBlock(o,!0);if(m==null)return;for(const x of m)if(x===this.hash)return;for(let x=0;x<m.length;x++){const v=await m.getTransaction(x);if(v.from===this.from&&v.nonce===this.nonce){if(a)return null;const B=await this.provider.getTransactionReceipt(v.hash);if(B==null||g-B.blockNumber+1<n)return;let C="replaced";v.data===this.data&&v.to===this.to&&v.value===this.value?C="repriced":v.data==="0x"&&v.from===v.to&&v.value===ul&&(C="cancelled"),P(!1,"transaction was replaced","TRANSACTION_REPLACED",{cancelled:C==="replaced"||C==="cancelled",reason:C,replacement:v.replaceableTransaction(i),hash:v.hash,receipt:B})}}o++}},u=g=>{if(g==null||g.status!==0)return g;P(!1,"transaction execution reverted","CALL_EXCEPTION",{action:"sendTransaction",data:null,reason:null,invocation:null,revert:null,transaction:{to:g.to,from:g.from,data:""},receipt:g})},f=await this.provider.getTransactionReceipt(this.hash);if(n===0)return u(f);if(f){if(await f.confirmations()>=n)return u(f)}else if(await c(),n===0)return null;return await new Promise((g,w)=>{const E=[],m=()=>{E.forEach(v=>v())};if(E.push(()=>{a=!0}),s>0){const v=setTimeout(()=>{m(),w(gt("wait for transaction timeout","TIMEOUT"))},s);E.push(()=>{clearTimeout(v)})}const x=async v=>{if(await v.confirmations()>=n){m();try{g(u(v))}catch(B){w(B)}}};if(E.push(()=>{this.provider.off(this.hash,x)}),this.provider.on(this.hash,x),i>=0){const v=async()=>{try{await c()}catch(B){if(Xt(B,"TRANSACTION_REPLACED")){m(),w(B);return}}a||this.provider.once("block",v)};E.push(()=>{this.provider.off("block",v)}),this.provider.once("block",v)}})}isMined(){return this.blockHash!=null}isLegacy(){return this.type===0}isBerlin(){return this.type===1}isLondon(){return this.type===2}removedEvent(){return P(this.isMined(),"unmined transaction canot be orphaned","UNSUPPORTED_OPERATION",{operation:"removeEvent()"}),dl(this)}reorderedEvent(t){return P(this.isMined(),"unmined transaction canot be orphaned","UNSUPPORTED_OPERATION",{operation:"removeEvent()"}),P(!t||t.isMined(),"unmined 'other' transaction canot be orphaned","UNSUPPORTED_OPERATION",{operation:"removeEvent()"}),hl(this,t)}replaceableTransaction(t){y(Number.isInteger(t)&&t>=0,"invalid startBlock","startBlock",t);const e=new Ia(this,this.provider);return d(e,En,t),e}};En=new WeakMap;let Hs=Ia;function wp(r){return{orphan:"drop-block",hash:r.hash,number:r.number}}function hl(r,t){return{orphan:"reorder-transaction",tx:r,other:t}}function dl(r){return{orphan:"drop-transaction",tx:r}}function Ap(r){return{orphan:"drop-log",log:{transactionHash:r.transactionHash,blockHash:r.blockHash,blockNumber:r.blockNumber,address:r.address,data:r.data,topics:Object.freeze(r.topics.slice()),index:r.index}}}class aa extends Qs{constructor(e,n,s){super(e,e.provider);A(this,"interface");A(this,"fragment");A(this,"args");const i=n.decodeEventLog(s,e.data,e.topics);M(this,{args:i,fragment:s,interface:n})}get eventName(){return this.fragment.name}get eventSignature(){return this.fragment.format()}}class pl extends Qs{constructor(e,n){super(e,e.provider);A(this,"error");M(this,{error:n})}}class bp extends fl{constructor(e,n,s){super(s,n);b(this,rs,void 0);d(this,rs,e)}get logs(){return super.logs.map(e=>{const n=e.topics.length?l(this,rs).getEvent(e.topics[0]):null;if(n)try{return new aa(e,l(this,rs),n)}catch(s){return new pl(e,s)}return e})}}rs=new WeakMap;class ca extends Hs{constructor(e,n,s){super(s,n);b(this,qs,void 0);d(this,qs,e)}async wait(e){const n=await super.wait(e);return n==null?null:new bp(l(this,qs),this.provider,n)}}qs=new WeakMap;class gl extends tc{constructor(e,n,s,i){super(e,n,s);A(this,"log");M(this,{log:i})}async getBlock(){return await this.log.getBlock()}async getTransaction(){return await this.log.getTransaction()}async getTransactionReceipt(){return await this.log.getTransactionReceipt()}}class Ep extends gl{constructor(t,e,n,s,i){super(t,e,n,new aa(i,t.interface,s));const o=t.interface.decodeEventLog(s,this.log.data,this.log.topics);M(this,{args:o,fragment:s})}get eventName(){return this.fragment.name}get eventSignature(){return this.fragment.format()}}const yl=BigInt(0);function ml(r){return r&&typeof r.call=="function"}function wl(r){return r&&typeof r.estimateGas=="function"}function _i(r){return r&&typeof r.resolveName=="function"}function Al(r){return r&&typeof r.sendTransaction=="function"}function bl(r){if(r!=null){if(_i(r))return r;if(r.provider)return r.provider}}class vp{constructor(t,e,n){b(this,$s,void 0);A(this,"fragment");if(M(this,{fragment:e}),e.inputs.length<n.length)throw new Error("too many arguments");const s=jn(t.runner,"resolveName"),i=_i(s)?s:null;d(this,$s,async function(){const o=await Promise.all(e.inputs.map((a,c)=>n[c]==null?null:a.walkAsync(n[c],(f,h)=>f==="address"?Array.isArray(h)?Promise.all(h.map(g=>St(g,i))):St(h,i):h)));return t.interface.encodeFilterTopics(e,o)}())}getTopicFilter(){return l(this,$s)}}$s=new WeakMap;function jn(r,t){return r==null?null:typeof r[t]=="function"?r:r.provider&&typeof r.provider[t]=="function"?r.provider:null}function zn(r){return r==null?null:r.provider||null}async function El(r,t){const e=xt.dereference(r,"overrides");y(typeof e=="object","invalid overrides parameter","overrides",r);const n=Hi(e);return y(n.to==null||(t||[]).indexOf("to")>=0,"cannot override to","overrides.to",n.to),y(n.data==null||(t||[]).indexOf("data")>=0,"cannot override data","overrides.data",n.data),n.from&&(n.from=n.from),n}async function xp(r,t,e){const n=jn(r,"resolveName"),s=_i(n)?n:null;return await Promise.all(t.map((i,o)=>i.walkAsync(e[o],(a,c)=>(c=xt.dereference(c,a),a==="address"?St(c,s):c))))}function Pp(r){const t=async function(o){const a=await El(o,["data"]);a.to=await r.getAddress(),a.from&&(a.from=await St(a.from,bl(r.runner)));const c=r.interface,u=L(a.value||yl,"overrides.value")===yl,f=(a.data||"0x")==="0x";c.fallback&&!c.fallback.payable&&c.receive&&!f&&!u&&y(!1,"cannot send data to receive or send value to non-payable fallback","overrides",o),y(c.fallback||f,"cannot send data to receive-only contract","overrides.data",a.data);const h=c.receive||c.fallback&&c.fallback.payable;return y(h||u,"cannot send value to non-payable fallback","overrides.value",a.value),y(c.fallback||f,"cannot send data to receive-only contract","overrides.data",a.data),a},e=async function(o){const a=jn(r.runner,"call");P(ml(a),"contract runner does not support calling","UNSUPPORTED_OPERATION",{operation:"call"});const c=await t(o);try{return await a.call(c)}catch(u){throw Ao(u)&&u.data?r.interface.makeError(u.data,c):u}},n=async function(o){const a=r.runner;P(Al(a),"contract runner does not support sending transactions","UNSUPPORTED_OPERATION",{operation:"sendTransaction"});const c=await a.sendTransaction(await t(o)),u=zn(r.runner);return new ca(r.interface,u,c)},s=async function(o){const a=jn(r.runner,"estimateGas");return P(wl(a),"contract runner does not support gas estimation","UNSUPPORTED_OPERATION",{operation:"estimateGas"}),await a.estimateGas(await t(o))},i=async o=>await n(o);return M(i,{_contract:r,estimateGas:s,populateTransaction:t,send:n,staticCall:e}),i}function Np(r,t){const e=function(...u){const f=r.interface.getFunction(t,u);return P(f,"no matching fragment","UNSUPPORTED_OPERATION",{operation:"fragment",info:{key:t,args:u}}),f},n=async function(...u){const f=e(...u);let h={};if(f.inputs.length+1===u.length&&(h=await El(u.pop()),h.from&&(h.from=await St(h.from,bl(r.runner)))),f.inputs.length!==u.length)throw new Error("internal error: fragment inputs doesn't match arguments; should not happen");const g=await xp(r.runner,f.inputs,u);return Object.assign({},h,await Rt({to:r.getAddress(),data:r.interface.encodeFunctionData(f,g)}))},s=async function(...u){const f=await a(...u);return f.length===1?f[0]:f},i=async function(...u){const f=r.runner;P(Al(f),"contract runner does not support sending transactions","UNSUPPORTED_OPERATION",{operation:"sendTransaction"});const h=await f.sendTransaction(await n(...u)),g=zn(r.runner);return new ca(r.interface,g,h)},o=async function(...u){const f=jn(r.runner,"estimateGas");return P(wl(f),"contract runner does not support gas estimation","UNSUPPORTED_OPERATION",{operation:"estimateGas"}),await f.estimateGas(await n(...u))},a=async function(...u){const f=jn(r.runner,"call");P(ml(f),"contract runner does not support calling","UNSUPPORTED_OPERATION",{operation:"call"});const h=await n(...u);let g="0x";try{g=await f.call(h)}catch(E){throw Ao(E)&&E.data?r.interface.makeError(E.data,h):E}const w=e(...u);return r.interface.decodeFunctionResult(w,g)},c=async(...u)=>e(...u).constant?await s(...u):await i(...u);return M(c,{name:r.interface.getFunctionName(t),_contract:r,_key:t,getFragment:e,estimateGas:o,populateTransaction:n,send:i,staticCall:s,staticCallResult:a}),Object.defineProperty(c,"fragment",{configurable:!1,enumerable:!0,get:()=>{const u=r.interface.getFunction(t);return P(u,"no matching fragment","UNSUPPORTED_OPERATION",{operation:"fragment",info:{key:t}}),u}}),c}function Tp(r,t){const e=function(...s){const i=r.interface.getEvent(t,s);return P(i,"no matching fragment","UNSUPPORTED_OPERATION",{operation:"fragment",info:{key:t,args:s}}),i},n=function(...s){return new vp(r,e(...s),s)};return M(n,{name:r.interface.getEventName(t),_contract:r,_key:t,getFragment:e}),Object.defineProperty(n,"fragment",{configurable:!1,enumerable:!0,get:()=>{const s=r.interface.getEvent(t);return P(s,"no matching fragment","UNSUPPORTED_OPERATION",{operation:"fragment",info:{key:t}}),s}}),n}const Vi=Symbol.for("_ethersInternal_contract"),vl=new WeakMap;function Cp(r,t){vl.set(r[Vi],t)}function Kt(r){return vl.get(r[Vi])}function Op(r){return r&&typeof r=="object"&&"getTopicFilter"in r&&typeof r.getTopicFilter=="function"&&r.fragment}async function ua(r,t){let e,n=null;if(Array.isArray(t)){const i=function(o){if(it(o,32))return o;const a=r.interface.getEvent(o);return y(a,"unknown fragment","name",o),a.topicHash};e=t.map(o=>o==null?null:Array.isArray(o)?o.map(i):i(o))}else t==="*"?e=[null]:typeof t=="string"?it(t,32)?e=[t]:(n=r.interface.getEvent(t),y(n,"unknown fragment","event",t),e=[n.topicHash]):Op(t)?e=await t.getTopicFilter():"fragment"in t?(n=t.fragment,e=[n.topicHash]):y(!1,"unknown event name","event",t);e=e.map(i=>{if(i==null)return null;if(Array.isArray(i)){const o=Array.from(new Set(i.map(a=>a.toLowerCase())).values());return o.length===1?o[0]:(o.sort(),o)}return i.toLowerCase()});const s=e.map(i=>i==null?"null":Array.isArray(i)?i.join("|"):i).join("&");return{fragment:n,tag:s,topics:e}}async function _s(r,t){const{subs:e}=Kt(r);return e.get((await ua(r,t)).tag)||null}async function xl(r,t,e){const n=zn(r.runner);P(n,"contract runner does not support subscribing","UNSUPPORTED_OPERATION",{operation:t});const{fragment:s,tag:i,topics:o}=await ua(r,e),{addr:a,subs:c}=Kt(r);let u=c.get(i);if(!u){const h={address:a||r,topics:o},g=x=>{let v=s;if(v==null)try{v=r.interface.getEvent(x.topics[0])}catch{}if(v){const B=v,C=s?r.interface.decodeEventLog(s,x.data,x.topics):[];fa(r,e,C,H=>new Ep(r,H,e,B,x))}else fa(r,e,[],B=>new gl(r,B,e,x))};let w=[];u={tag:i,listeners:[],start:()=>{w.length||w.push(n.on(h,g))},stop:async()=>{if(w.length==0)return;let x=w;w=[],await Promise.all(x),n.off(h,g)}},c.set(i,u)}return u}let la=Promise.resolve();async function Ip(r,t,e,n){await la;const s=await _s(r,t);if(!s)return!1;const i=s.listeners.length;return s.listeners=s.listeners.filter(({listener:o,once:a})=>{const c=Array.from(e);n&&c.push(n(a?null:o));try{o.call(r,...c)}catch{}return!a}),s.listeners.length===0&&(s.stop(),Kt(r).subs.delete(s.tag)),i>0}async function fa(r,t,e,n){try{await la}catch{}const s=Ip(r,t,e,n);return la=s,await s}const Ji=["then"],ti=class ti{constructor(t,e,n,s){A(this,"target");A(this,"interface");A(this,"runner");A(this,"filters");A(this,Tg);A(this,"fallback");y(typeof t=="string"||qc(t),"invalid value for Contract target","target",t),n==null&&(n=null);const i=oa.from(e);M(this,{target:t,runner:n,interface:i}),Object.defineProperty(this,Vi,{value:{}});let o,a=null,c=null;if(s){const h=zn(n);c=new ca(this.interface,h,s)}let u=new Map;if(typeof t=="string")if(it(t))a=t,o=Promise.resolve(t);else{const h=jn(n,"resolveName");if(!_i(h))throw gt("contract runner does not support name resolution","UNSUPPORTED_OPERATION",{operation:"resolveName"});o=h.resolveName(t).then(g=>{if(g==null)throw gt("an ENS name used for a contract target must be correctly configured","UNCONFIGURED_NAME",{value:t});return Kt(this).addr=g,g})}else o=t.getAddress().then(h=>{if(h==null)throw new Error("TODO");return Kt(this).addr=h,h});Cp(this,{addrPromise:o,addr:a,deployTx:c,subs:u});const f=new Proxy({},{get:(h,g,w)=>{if(typeof g=="symbol"||Ji.indexOf(g)>=0)return Reflect.get(h,g,w);try{return this.getEvent(g)}catch(E){if(!Xt(E,"INVALID_ARGUMENT")||E.argument!=="key")throw E}},has:(h,g)=>Ji.indexOf(g)>=0?Reflect.has(h,g):Reflect.has(h,g)||this.interface.hasEvent(String(g))});return M(this,{filters:f}),M(this,{fallback:i.receive||i.fallback?Pp(this):null}),new Proxy(this,{get:(h,g,w)=>{if(typeof g=="symbol"||g in h||Ji.indexOf(g)>=0)return Reflect.get(h,g,w);try{return h.getFunction(g)}catch(E){if(!Xt(E,"INVALID_ARGUMENT")||E.argument!=="key")throw E}},has:(h,g)=>typeof g=="symbol"||g in h||Ji.indexOf(g)>=0?Reflect.has(h,g):h.interface.hasFunction(g)})}connect(t){return new ti(this.target,this.interface,t)}attach(t){return new ti(t,this.interface,this.runner)}async getAddress(){return await Kt(this).addrPromise}async getDeployedCode(){const t=zn(this.runner);P(t,"runner does not support .provider","UNSUPPORTED_OPERATION",{operation:"getDeployedCode"});const e=await t.getCode(await this.getAddress());return e==="0x"?null:e}async waitForDeployment(){const t=this.deploymentTransaction();if(t)return await t.wait(),this;if(await this.getDeployedCode()!=null)return this;const n=zn(this.runner);return P(n!=null,"contract runner does not support .provider","UNSUPPORTED_OPERATION",{operation:"waitForDeployment"}),new Promise((s,i)=>{const o=async()=>{try{if(await this.getDeployedCode()!=null)return s(this);n.once("block",o)}catch(a){i(a)}};o()})}deploymentTransaction(){return Kt(this).deployTx}getFunction(t){return typeof t!="string"&&(t=t.format()),Np(this,t)}getEvent(t){return typeof t!="string"&&(t=t.format()),Tp(this,t)}async queryTransaction(t){throw new Error("@TODO")}async queryFilter(t,e,n){e==null&&(e=0),n==null&&(n="latest");const{addr:s,addrPromise:i}=Kt(this),o=s||await i,{fragment:a,topics:c}=await ua(this,t),u={address:o,topics:c,fromBlock:e,toBlock:n},f=zn(this.runner);return P(f,"contract runner does not have a provider","UNSUPPORTED_OPERATION",{operation:"queryFilter"}),(await f.getLogs(u)).map(h=>{let g=a;if(g==null)try{g=this.interface.getEvent(h.topics[0])}catch{}if(g)try{return new aa(h,this.interface,g)}catch(w){return new pl(h,w)}return new Qs(h,f)})}async on(t,e){const n=await xl(this,"on",t);return n.listeners.push({listener:e,once:!1}),n.start(),this}async once(t,e){const n=await xl(this,"once",t);return n.listeners.push({listener:e,once:!0}),n.start(),this}async emit(t,...e){return await fa(this,t,e,null)}async listenerCount(t){if(t){const s=await _s(this,t);return s?s.listeners.length:0}const{subs:e}=Kt(this);let n=0;for(const{listeners:s}of e.values())n+=s.length;return n}async listeners(t){if(t){const s=await _s(this,t);return s?s.listeners.map(({listener:i})=>i):[]}const{subs:e}=Kt(this);let n=[];for(const{listeners:s}of e.values())n=n.concat(s.map(({listener:i})=>i));return n}async off(t,e){const n=await _s(this,t);if(!n)return this;if(e){const s=n.listeners.map(({listener:i})=>i).indexOf(e);s>=0&&n.listeners.splice(s,1)}return(e==null||n.listeners.length===0)&&(n.stop(),Kt(this).subs.delete(n.tag)),this}async removeAllListeners(t){if(t){const e=await _s(this,t);if(!e)return this;e.stop(),Kt(this).subs.delete(e.tag)}else{const{subs:e}=Kt(this);for(const{tag:n,stop:s}of e.values())s(),e.delete(n)}return this}async addListener(t,e){return await this.on(t,e)}async removeListener(t,e){return await this.off(t,e)}static buildClass(t){class e extends ti{constructor(s,i=null){super(s,t,i)}}return e}static from(t,e,n){return n==null&&(n=null),new this(t,e,n)}};Tg=Vi;let ha=ti;function Bp(){return ha}class gn extends Bp(){}function da(r){return r.match(/^ipfs:\/\/ipfs\//i)?r=r.substring(12):r.match(/^ipfs:\/\//i)?r=r.substring(7):y(!1,"unsupported IPFS format","link",r),`https://gateway.ipfs.io/ipfs/${r}`}class Rp{constructor(t){A(this,"name");M(this,{name:t})}connect(t){return this}supportsCoinType(t){return!1}async encodeAddress(t,e){throw new Error("unsupported coin")}async decodeAddress(t,e){throw new Error("unsupported coin")}}const Pl=new RegExp("^(ipfs)://(.*)$","i"),Nl=[new RegExp("^(https)://(.*)$","i"),new RegExp("^(data):(.*)$","i"),Pl,new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$","i")],ss=class ss{constructor(t,e,n){b(this,xn);A(this,"provider");A(this,"address");A(this,"name");b(this,vn,void 0);b(this,rr,void 0);M(this,{provider:t,address:e,name:n}),d(this,vn,null),d(this,rr,new gn(e,["function supportsInterface(bytes4) view returns (bool)","function resolve(bytes, bytes) view returns (bytes)","function addr(bytes32) view returns (address)","function addr(bytes32, uint) view returns (bytes)","function text(bytes32, string) view returns (string)","function contenthash(bytes32) view returns (bytes)"],t))}async supportsWildcard(){return l(this,vn)==null&&d(this,vn,(async()=>{try{return await l(this,rr).supportsInterface("0x9061b923")}catch(t){if(Xt(t,"CALL_EXCEPTION"))return!1;throw d(this,vn,null),t}})()),await l(this,vn)}async getAddress(t){if(t==null&&(t=60),t===60)try{const i=await I(this,xn,vs).call(this,"addr(bytes32)");return i==null||i===_o?null:i}catch(i){if(Xt(i,"CALL_EXCEPTION"))return null;throw i}if(t>=0&&t<2147483648){let i=t+2147483648;const o=await I(this,xn,vs).call(this,"addr(bytes32,uint)",[i]);if(it(o,20))return Y(o)}let e=null;for(const i of this.provider.plugins)if(i instanceof Rp&&i.supportsCoinType(t)){e=i;break}if(e==null)return null;const n=await I(this,xn,vs).call(this,"addr(bytes32,uint)",[t]);if(n==null||n==="0x")return null;const s=await e.decodeAddress(t,n);if(s!=null)return s;P(!1,"invalid coin data","UNSUPPORTED_OPERATION",{operation:`getAddress(${t})`,info:{coinType:t,data:n}})}async getText(t){const e=await I(this,xn,vs).call(this,"text(bytes32,string)",[t]);return e==null||e==="0x"?null:e}async getContentHash(){const t=await I(this,xn,vs).call(this,"contenthash(bytes32)");if(t==null||t==="0x")return null;const e=t.match(/^0x(e3010170|e5010172)(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);if(e){const s=e[1]==="e3010170"?"ipfs":"ipns",i=parseInt(e[4],16);if(e[5].length===i*2)return`${s}://${pf("0x"+e[2])}`}const n=t.match(/^0xe40101fa011b20([0-9a-f]*)$/);if(n&&n[1].length===64)return`bzz://${n[1]}`;P(!1,"invalid or unsupported content hash data","UNSUPPORTED_OPERATION",{operation:"getContentHash()",info:{data:t}})}async getAvatar(){return(await this._getAvatar()).url}async _getAvatar(){const t=[{type:"name",value:this.name}];try{const e=await this.getText("avatar");if(e==null)return t.push({type:"!avatar",value:""}),{url:null,linkage:t};t.push({type:"avatar",value:e});for(let n=0;n<Nl.length;n++){const s=e.match(Nl[n]);if(s==null)continue;const i=s[1].toLowerCase();switch(i){case"https":case"data":return t.push({type:"url",value:e}),{linkage:t,url:e};case"ipfs":{const o=da(e);return t.push({type:"ipfs",value:e}),t.push({type:"url",value:o}),{linkage:t,url:o}}case"erc721":case"erc1155":{const o=i==="erc721"?"tokenURI(uint256)":"uri(uint256)";t.push({type:i,value:e});const a=await this.getAddress();if(a==null)return t.push({type:"!owner",value:""}),{url:null,linkage:t};const c=(s[2]||"").split("/");if(c.length!==2)return t.push({type:`!${i}caip`,value:s[2]||""}),{url:null,linkage:t};const u=c[1],f=new gn(c[0],["function tokenURI(uint) view returns (string)","function ownerOf(uint) view returns (address)","function uri(uint) view returns (string)","function balanceOf(address, uint256) view returns (uint)"],this.provider);if(i==="erc721"){const m=await f.ownerOf(u);if(a!==m)return t.push({type:"!owner",value:m}),{url:null,linkage:t};t.push({type:"owner",value:m})}else if(i==="erc1155"){const m=await f.balanceOf(a,u);if(!m)return t.push({type:"!balance",value:"0"}),{url:null,linkage:t};t.push({type:"balance",value:m.toString()})}let h=await f[o](u);if(h==null||h==="0x")return t.push({type:"!metadata-url",value:""}),{url:null,linkage:t};t.push({type:"metadata-url-base",value:h}),i==="erc1155"&&(h=h.replace("{id}",cn(u,32).substring(2)),t.push({type:"metadata-url-expanded",value:h})),h.match(/^ipfs:/i)&&(h=da(h)),t.push({type:"metadata-url",value:h});let g={};const w=await new un(h).send();w.assertOk();try{g=w.bodyJson}catch{try{t.push({type:"!metadata",value:w.bodyText})}catch{const v=w.body;return v&&t.push({type:"!metadata",value:F(v)}),{url:null,linkage:t}}return{url:null,linkage:t}}if(!g)return t.push({type:"!metadata",value:""}),{url:null,linkage:t};t.push({type:"metadata",value:JSON.stringify(g)});let E=g.image;if(typeof E!="string")return t.push({type:"!imageUrl",value:""}),{url:null,linkage:t};if(!E.match(/^(https:\/\/|data:)/i)){if(E.match(Pl)==null)return t.push({type:"!imageUrl-ipfs",value:E}),{url:null,linkage:t};t.push({type:"imageUrl-ipfs",value:E}),E=da(E)}return t.push({type:"url",value:E}),{linkage:t,url:E}}}}}catch{}return{linkage:t,url:null}}static async getEnsAddress(t){const e=await t.getNetwork(),n=e.getPlugin("org.ethers.plugins.network.Ens");return P(n,"network does not support ENS","UNSUPPORTED_OPERATION",{operation:"getEnsAddress",info:{network:e}}),n.address}static async fromName(t,e){var s;let n=e;for(;;){if(n===""||n==="."||e!=="eth"&&n==="eth")return null;const i=await I(s=ss,oo,tf).call(s,t,n);if(i!=null){const o=new ss(t,i,e);return n!==e&&!await o.supportsWildcard()?null:o}n=n.split(".").slice(1).join(".")}}};vn=new WeakMap,rr=new WeakMap,xn=new WeakSet,vs=async function(t,e){e=(e||[]).slice();const n=l(this,rr).interface;e.unshift(ta(this.name));let s=null;await this.supportsWildcard()&&(s=n.getFunction(t),P(s,"missing fragment","UNKNOWN_ERROR",{info:{funcName:t}}),e=[Md(this.name),n.encodeFunctionData(s,e)],t="resolve(bytes,bytes)"),e.push({enableCcipRead:!0});try{const i=await l(this,rr)[t](...e);return s?n.decodeFunctionResult(s,i)[0]:i}catch(i){if(!Xt(i,"CALL_EXCEPTION"))throw i}return null},oo=new WeakSet,tf=async function(t,e){const n=await ss.getEnsAddress(t);try{const i=await new gn(n,["function resolver(bytes32) view returns (address)"],t).resolver(ta(e),{enableCcipRead:!0});return i===_o?null:i}catch(s){throw s}return null},b(ss,oo);let ji=ss;const Tl=BigInt(0);function ct(r,t){return function(e){return e==null?t:r(e)}}function pa(r){return t=>{if(!Array.isArray(t))throw new Error("not an array");return t.map(e=>r(e))}}function Vs(r,t){return e=>{const n={};for(const s in r){let i=s;if(t&&s in t&&!(i in e)){for(const o of t[s])if(o in e){i=o;break}}try{const o=r[s](e[i]);o!==void 0&&(n[s]=o)}catch(o){const a=o instanceof Error?o.message:"not-an-error";P(!1,`invalid value for value.${s} (${a})`,"BAD_DATA",{value:e})}}return n}}function kp(r){switch(r){case!0:case"true":return!0;case!1:case"false":return!1}y(!1,`invalid boolean; ${JSON.stringify(r)}`,"value",r)}function Or(r){return y(it(r,!0),"invalid data","value",r),r}function te(r){return y(it(r,32),"invalid hash","value",r),r}const Sp=Vs({address:Y,blockHash:te,blockNumber:J,data:Or,index:J,removed:ct(kp,!1),topics:pa(te),transactionHash:te,transactionIndex:J},{index:["logIndex"]});function Up(r){return Sp(r)}const Dp=Vs({hash:ct(te),parentHash:te,number:J,timestamp:J,nonce:ct(Or),difficulty:L,gasLimit:L,gasUsed:L,miner:ct(Y),extraData:Or,baseFeePerGas:ct(L)});function Fp(r){const t=Dp(r);return t.transactions=r.transactions.map(e=>typeof e=="string"?e:Cl(e)),t}const Lp=Vs({transactionIndex:J,blockNumber:J,transactionHash:te,address:Y,topics:pa(te),data:Or,index:J,blockHash:te},{index:["logIndex"]});function Mp(r){return Lp(r)}const Gp=Vs({to:ct(Y,null),from:ct(Y,null),contractAddress:ct(Y,null),index:J,root:ct(F),gasUsed:L,logsBloom:ct(Or),blockHash:te,hash:te,logs:pa(Mp),blockNumber:J,cumulativeGasUsed:L,effectiveGasPrice:ct(L),status:ct(J),type:ct(J,0)},{effectiveGasPrice:["gasPrice"],hash:["transactionHash"],index:["transactionIndex"]});function Qp(r){return Gp(r)}function Cl(r){r.to&&L(r.to)===Tl&&(r.to="0x0000000000000000000000000000000000000000");const t=Vs({hash:te,type:e=>e==="0x"||e==null?0:J(e),accessList:ct(Hn,null),blockHash:ct(te,null),blockNumber:ct(J,null),transactionIndex:ct(J,null),from:Y,gasPrice:ct(L),maxPriorityFeePerGas:ct(L),maxFeePerGas:ct(L),gasLimit:L,to:ct(Y,null),value:L,nonce:J,data:Or,creates:ct(Y,null),chainId:ct(L,null)},{data:["input"],gasLimit:["gas"]})(r);if(t.to==null&&t.creates==null&&(t.creates=Hh(t)),(r.type===1||r.type===2)&&r.accessList==null&&(t.accessList=[]),r.signature?t.signature=he.from(r.signature):t.signature=he.from(r),t.chainId==null){const e=t.signature.legacyChainId;e!=null&&(t.chainId=e)}return t.blockHash&&L(t.blockHash)===Tl&&(t.blockHash=null),t}const Hp="0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";class Js{constructor(t){A(this,"name");M(this,{name:t})}clone(){return new Js(this.name)}}class zi extends Js{constructor(e,n){e==null&&(e=0);super(`org.ethers.network.plugins.GasCost#${e||0}`);A(this,"effectiveBlock");A(this,"txBase");A(this,"txCreate");A(this,"txDataZero");A(this,"txDataNonzero");A(this,"txAccessListStorageKey");A(this,"txAccessListAddress");const s={effectiveBlock:e};function i(o,a){let c=(n||{})[o];c==null&&(c=a),y(typeof c=="number",`invalud value for ${o}`,"costs",n),s[o]=c}i("txBase",21e3),i("txCreate",32e3),i("txDataZero",4),i("txDataNonzero",16),i("txAccessListStorageKey",1900),i("txAccessListAddress",2400),M(this,s)}clone(){return new zi(this.effectiveBlock,this)}}class Ki extends Js{constructor(e,n){super("org.ethers.plugins.network.Ens");A(this,"address");A(this,"targetNetwork");M(this,{address:e||Hp,targetNetwork:n??1})}clone(){return new Ki(this.address,this.targetNetwork)}}class Ol extends Js{constructor(e,n){super("org.ethers.plugins.network.FetchUrlFeeDataPlugin");b(this,ei,void 0);b(this,ni,void 0);d(this,ei,e),d(this,ni,n)}get url(){return l(this,ei)}get processFunc(){return l(this,ni)}clone(){return this}}ei=new WeakMap,ni=new WeakMap;const ga=new Map,as=class as{constructor(t,e){b(this,is,void 0);b(this,os,void 0);b(this,Pn,void 0);d(this,is,t),d(this,os,L(e)),d(this,Pn,new Map)}toJSON(){return{name:this.name,chainId:String(this.chainId)}}get name(){return l(this,is)}set name(t){d(this,is,t)}get chainId(){return l(this,os)}set chainId(t){d(this,os,L(t,"chainId"))}matches(t){if(t==null)return!1;if(typeof t=="string"){try{return this.chainId===L(t)}catch{}return this.name===t}if(typeof t=="number"||typeof t=="bigint"){try{return this.chainId===L(t)}catch{}return!1}if(typeof t=="object"){if(t.chainId!=null){try{return this.chainId===L(t.chainId)}catch{}return!1}return t.name!=null?this.name===t.name:!1}return!1}get plugins(){return Array.from(l(this,Pn).values())}attachPlugin(t){if(l(this,Pn).get(t.name))throw new Error(`cannot replace existing plugin: ${t.name} `);return l(this,Pn).set(t.name,t.clone()),this}getPlugin(t){return l(this,Pn).get(t)||null}getPlugins(t){return this.plugins.filter(e=>e.name.split("#")[0]===t)}clone(){const t=new as(this.name,this.chainId);return this.plugins.forEach(e=>{t.attachPlugin(e.clone())}),t}computeIntrinsicGas(t){const e=this.getPlugin("org.ethers.plugins.network.GasCost")||new zi;let n=e.txBase;if(t.to==null&&(n+=e.txCreate),t.data)for(let s=2;s<t.data.length;s+=2)t.data.substring(s,s+2)==="00"?n+=e.txDataZero:n+=e.txDataNonzero;if(t.accessList){const s=Hn(t.accessList);for(const i in s)n+=e.txAccessListAddress+e.txAccessListStorageKey*s[i].storageKeys.length}return n}static from(t){if(Vp(),t==null)return as.from("mainnet");if(typeof t=="number"&&(t=BigInt(t)),typeof t=="string"||typeof t=="bigint"){const e=ga.get(t);if(e)return e();if(typeof t=="bigint")return new as("unknown",t);y(!1,"unknown network","network",t)}if(typeof t.clone=="function")return t.clone();if(typeof t=="object"){y(typeof t.name=="string"&&typeof t.chainId=="number","invalid network object name or chainId","network",t);const e=new as(t.name,t.chainId);return(t.ensAddress||t.ensNetwork!=null)&&e.attachPlugin(new Ki(t.ensAddress,t.ensNetwork)),e}y(!1,"invalid network","network",t)}static register(t,e){typeof t=="number"&&(t=BigInt(t));const n=ga.get(t);n&&y(!1,`conflicting network for ${JSON.stringify(n.name)}`,"nameOrChainId",t),ga.set(t,e)}};is=new WeakMap,os=new WeakMap,Pn=new WeakMap;let _e=as;function Il(r,t){const e=String(r);if(!e.match(/^[0-9.]+$/))throw new Error(`invalid gwei value: ${r}`);const n=e.split(".");if(n.length===1&&n.push(""),n.length!==2)throw new Error(`invalid gwei value: ${r}`);for(;n[1].length<t;)n[1]+="0";if(n[1].length>9){let s=BigInt(n[1].substring(0,9));n[1].substring(9).match(/^0+$/)||s++,n[1]=s.toString()}return BigInt(n[0]+n[1])}function Bl(r){return new Ol(r,async(t,e,n)=>{n.setHeader("User-Agent","ethers");let s;try{const[i,o]=await Promise.all([n.send(),t()]);s=i;const a=s.bodyJson.standard;return{gasPrice:o.gasPrice,maxFeePerGas:Il(a.maxFee,9),maxPriorityFeePerGas:Il(a.maxPriorityFee,9)}}catch(i){P(!1,`error encountered with polygon gas station (${JSON.stringify(n.url)})`,"SERVER_ERROR",{request:n,response:s,error:i})}})}function _p(r){return new Ol("data:",async(t,e,n)=>{const s=await t();if(s.maxFeePerGas==null||s.maxPriorityFeePerGas==null)return s;const i=s.maxFeePerGas-s.maxPriorityFeePerGas;return{gasPrice:s.gasPrice,maxFeePerGas:i+r,maxPriorityFeePerGas:r}})}let Rl=!1;function Vp(){if(Rl)return;Rl=!0;function r(t,e,n){const s=function(){const i=new _e(t,e);return n.ensNetwork!=null&&i.attachPlugin(new Ki(null,n.ensNetwork)),i.attachPlugin(new zi),(n.plugins||[]).forEach(o=>{i.attachPlugin(o)}),i};_e.register(t,s),_e.register(e,s),n.altNames&&n.altNames.forEach(i=>{_e.register(i,s)})}r("mainnet",1,{ensNetwork:1,altNames:["homestead"]}),r("ropsten",3,{ensNetwork:3}),r("rinkeby",4,{ensNetwork:4}),r("goerli",5,{ensNetwork:5}),r("kovan",42,{ensNetwork:42}),r("sepolia",11155111,{}),r("classic",61,{}),r("classicKotti",6,{}),r("arbitrum",42161,{ensNetwork:1}),r("arbitrum-goerli",421613,{}),r("bnb",56,{ensNetwork:1}),r("bnbt",97,{}),r("linea",59144,{ensNetwork:1}),r("linea-goerli",59140,{}),r("matic",137,{ensNetwork:1,plugins:[Bl("https://gasstation.polygon.technology/v2")]}),r("matic-mumbai",80001,{altNames:["maticMumbai","maticmum"],plugins:[Bl("https://gasstation-testnet.polygon.technology/v2")]}),r("optimism",10,{ensNetwork:1,plugins:[_p(BigInt("1000000"))]}),r("optimism-goerli",420,{}),r("xdai",100,{ensNetwork:1})}function ya(r){return JSON.parse(JSON.stringify(r))}class Jp{constructor(t){b(this,cs);b(this,qe,void 0);b(this,se,void 0);b(this,Nn,void 0);b(this,Be,void 0);d(this,qe,t),d(this,se,null),d(this,Nn,4e3),d(this,Be,-2)}get pollingInterval(){return l(this,Nn)}set pollingInterval(t){d(this,Nn,t)}start(){l(this,se)||(d(this,se,l(this,qe)._setTimeout(I(this,cs,yo).bind(this),l(this,Nn))),I(this,cs,yo).call(this))}stop(){l(this,se)&&(l(this,qe)._clearTimeout(l(this,se)),d(this,se,null))}pause(t){this.stop(),t&&d(this,Be,-2)}resume(){this.start()}}qe=new WeakMap,se=new WeakMap,Nn=new WeakMap,Be=new WeakMap,cs=new WeakSet,yo=async function(){try{const t=await l(this,qe).getBlockNumber();if(l(this,Be)===-2){d(this,Be,t);return}if(t!==l(this,Be)){for(let e=l(this,Be)+1;e<=t;e++){if(l(this,se)==null)return;await l(this,qe).emit("block",e)}d(this,Be,t)}}catch{}l(this,se)!=null&&d(this,se,l(this,qe)._setTimeout(I(this,cs,yo).bind(this),l(this,Nn)))};class kl{constructor(t){b(this,sr,void 0);b(this,ir,void 0);b(this,Tn,void 0);d(this,sr,t),d(this,Tn,!1),d(this,ir,e=>{this._poll(e,l(this,sr))})}async _poll(t,e){throw new Error("sub-classes must override this")}start(){l(this,Tn)||(d(this,Tn,!0),l(this,ir).call(this,-2),l(this,sr).on("block",l(this,ir)))}stop(){l(this,Tn)&&(d(this,Tn,!1),l(this,sr).off("block",l(this,ir)))}pause(t){this.stop()}resume(){this.start()}}sr=new WeakMap,ir=new WeakMap,Tn=new WeakMap;class jp extends kl{constructor(e,n){super(e);b(this,ao,void 0);d(this,ao,ya(n))}async _poll(e,n){throw new Error("@TODO")}}ao=new WeakMap;class zp extends kl{constructor(e,n){super(e);b(this,us,void 0);d(this,us,n)}async _poll(e,n){const s=await n.getTransactionReceipt(l(this,us));s&&n.emit(l(this,us),s)}}us=new WeakMap;class ma{constructor(t,e){b(this,co);b(this,$e,void 0);b(this,ls,void 0);b(this,fs,void 0);b(this,Cn,void 0);b(this,ie,void 0);d(this,$e,t),d(this,ls,ya(e)),d(this,fs,I(this,co,ef).bind(this)),d(this,Cn,!1),d(this,ie,-2)}start(){l(this,Cn)||(d(this,Cn,!0),l(this,ie)===-2&&l(this,$e).getBlockNumber().then(t=>{d(this,ie,t)}),l(this,$e).on("block",l(this,fs)))}stop(){l(this,Cn)&&(d(this,Cn,!1),l(this,$e).off("block",l(this,fs)))}pause(t){this.stop(),t&&d(this,ie,-2)}resume(){this.start()}}$e=new WeakMap,ls=new WeakMap,fs=new WeakMap,Cn=new WeakMap,ie=new WeakMap,co=new WeakSet,ef=async function(t){if(l(this,ie)===-2)return;const e=ya(l(this,ls));e.fromBlock=l(this,ie)+1,e.toBlock=t;const n=await l(this,$e).getLogs(e);if(n.length===0){l(this,ie)<t-60&&d(this,ie,t-60);return}for(const s of n)l(this,$e).emit(l(this,ls),s),d(this,ie,s.blockNumber)};const Kp=BigInt(2),Wp=10;function Wi(r){return r&&typeof r.then=="function"}function Yi(r,t){return r+":"+JSON.stringify(t,(e,n)=>{if(n==null)return"null";if(typeof n=="bigint")return`bigint:${n.toString()}`;if(typeof n=="string")return n.toLowerCase();if(typeof n=="object"&&!Array.isArray(n)){const s=Object.keys(n);return s.sort(),s.reduce((i,o)=>(i[o]=n[o],i),{})}return n})}class Sl{constructor(t){A(this,"name");M(this,{name:t})}start(){}stop(){}pause(t){}resume(){}}function Yp(r){return JSON.parse(JSON.stringify(r))}function wa(r){return r=Array.from(new Set(r).values()),r.sort(),r}async function Aa(r,t){if(r==null)throw new Error("invalid event");if(Array.isArray(r)&&(r={topics:r}),typeof r=="string")switch(r){case"block":case"pending":case"debug":case"error":case"network":return{type:r,tag:r}}if(it(r,32)){const e=r.toLowerCase();return{type:"transaction",tag:Yi("tx",{hash:e}),hash:e}}if(r.orphan){const e=r;return{type:"orphan",tag:Yi("orphan",e),filter:Yp(e)}}if(r.address||r.topics){const e=r,n={topics:(e.topics||[]).map(s=>s==null?null:Array.isArray(s)?wa(s.map(i=>i.toLowerCase())):s.toLowerCase())};if(e.address){const s=[],i=[],o=a=>{it(a)?s.push(a):i.push((async()=>{s.push(await St(a,t))})())};Array.isArray(e.address)?e.address.forEach(o):o(e.address),i.length&&await Promise.all(i),n.address=wa(s.map(a=>a.toLowerCase()))}return{filter:n,tag:Yi("event",n),type:"event"}}y(!1,"unknown ProviderEvent","event",r)}function ba(){return new Date().getTime()}const Zp={cacheTimeout:250,pollingInterval:4e3};class Xp{constructor(t,e){b(this,Vt);b(this,si);b(this,ii);b(this,ar);b(this,oi);b(this,cr);b(this,gs);b(this,Tt,void 0);b(this,On,void 0);b(this,Ct,void 0);b(this,hs,void 0);b(this,Zt,void 0);b(this,or,void 0);b(this,In,void 0);b(this,tn,void 0);b(this,ri,void 0);b(this,oe,void 0);b(this,ds,void 0);b(this,ps,void 0);if(d(this,ps,Object.assign({},Zp,e||{})),t==="any")d(this,or,!0),d(this,Zt,null);else if(t){const n=_e.from(t);d(this,or,!1),d(this,Zt,Promise.resolve(n)),setTimeout(()=>{this.emit("network",n,null)},0)}else d(this,or,!1),d(this,Zt,null);d(this,tn,-1),d(this,In,new Map),d(this,Tt,new Map),d(this,On,new Map),d(this,Ct,null),d(this,hs,!1),d(this,ri,1),d(this,oe,new Map),d(this,ds,!1)}get pollingInterval(){return l(this,ps).pollingInterval}get provider(){return this}get plugins(){return Array.from(l(this,On).values())}attachPlugin(t){if(l(this,On).get(t.name))throw new Error(`cannot replace existing plugin: ${t.name} `);return l(this,On).set(t.name,t.connect(this)),this}getPlugin(t){return l(this,On).get(t)||null}get disableCcipRead(){return l(this,ds)}set disableCcipRead(t){d(this,ds,!!t)}async ccipReadFetch(t,e,n){if(this.disableCcipRead||n.length===0||t.to==null)return null;const s=t.to.toLowerCase(),i=e.toLowerCase(),o=[];for(let a=0;a<n.length;a++){const c=n[a],u=c.replace("{sender}",s).replace("{data}",i),f=new un(u);c.indexOf("{data}")===-1&&(f.body={data:i,sender:s}),this.emit("debug",{action:"sendCcipReadFetchRequest",request:f,index:a,urls:n});let h="unknown error";const g=await f.send();try{const w=g.bodyJson;if(w.data)return this.emit("debug",{action:"receiveCcipReadFetchResult",request:f,result:w}),w.data;w.message&&(h=w.message),this.emit("debug",{action:"receiveCcipReadFetchError",request:f,result:w})}catch{}P(g.statusCode<400||g.statusCode>=500,`response not found during CCIP fetch: ${h}`,"OFFCHAIN_FAULT",{reason:"404_MISSING_RESOURCE",transaction:t,info:{url:c,errorMessage:h}}),o.push(h)}P(!1,`error encountered during CCIP fetch: ${o.map(a=>JSON.stringify(a)).join(", ")}`,"OFFCHAIN_FAULT",{reason:"500_SERVER_ERROR",transaction:t,info:{urls:n,errorMessages:o}})}_wrapBlock(t,e){return new mp(Fp(t),this)}_wrapLog(t,e){return new Qs(Up(t),this)}_wrapTransactionReceipt(t,e){return new fl(Qp(t),this)}_wrapTransactionResponse(t,e){return new Hs(Cl(t),this)}_detectNetwork(){P(!1,"sub-classes must implement this","UNSUPPORTED_OPERATION",{operation:"_detectNetwork"})}async _perform(t){P(!1,`unsupported method: ${t.method}`,"UNSUPPORTED_OPERATION",{operation:t.method,info:t})}async getBlockNumber(){const t=J(await I(this,Vt,ce).call(this,{method:"getBlockNumber"}),"%response");return l(this,tn)>=0&&d(this,tn,t),t}_getAddress(t){return St(t,this)}_getBlockTag(t){if(t==null)return"latest";switch(t){case"earliest":return"0x0";case"latest":case"pending":case"safe":case"finalized":return t}if(it(t))return it(t,32)?t:mr(t);if(typeof t=="bigint"&&(t=J(t,"blockTag")),typeof t=="number")return t>=0?mr(t):l(this,tn)>=0?mr(l(this,tn)+t):this.getBlockNumber().then(e=>mr(e+t));y(!1,"invalid blockTag","blockTag",t)}_getFilter(t){const e=(t.topics||[]).map(c=>c==null?null:Array.isArray(c)?wa(c.map(u=>u.toLowerCase())):c.toLowerCase()),n="blockHash"in t?t.blockHash:void 0,s=(c,u,f)=>{let h;switch(c.length){case 0:break;case 1:h=c[0];break;default:c.sort(),h=c}if(n&&(u!=null||f!=null))throw new Error("invalid filter");const g={};return h&&(g.address=h),e.length&&(g.topics=e),u&&(g.fromBlock=u),f&&(g.toBlock=f),n&&(g.blockHash=n),g};let i=[];if(t.address)if(Array.isArray(t.address))for(const c of t.address)i.push(this._getAddress(c));else i.push(this._getAddress(t.address));let o;"fromBlock"in t&&(o=this._getBlockTag(t.fromBlock));let a;return"toBlock"in t&&(a=this._getBlockTag(t.toBlock)),i.filter(c=>typeof c!="string").length||o!=null&&typeof o!="string"||a!=null&&typeof a!="string"?Promise.all([Promise.all(i),o,a]).then(c=>s(c[0],c[1],c[2])):s(i,o,a)}_getTransactionRequest(t){const e=Hi(t),n=[];if(["to","from"].forEach(s=>{if(e[s]==null)return;const i=St(e[s],this);Wi(i)?n.push(async function(){e[s]=await i}()):e[s]=i}),e.blockTag!=null){const s=this._getBlockTag(e.blockTag);Wi(s)?n.push(async function(){e.blockTag=await s}()):e.blockTag=s}return n.length?async function(){return await Promise.all(n),e}():e}async getNetwork(){if(l(this,Zt)==null){const s=this._detectNetwork().then(i=>(this.emit("network",i,null),i),i=>{throw l(this,Zt)===s&&d(this,Zt,null),i});return d(this,Zt,s),(await s).clone()}const t=l(this,Zt),[e,n]=await Promise.all([t,this._detectNetwork()]);return e.chainId!==n.chainId&&(l(this,or)?(this.emit("network",n,e),l(this,Zt)===t&&d(this,Zt,Promise.resolve(n))):P(!1,`network changed: ${e.chainId} => ${n.chainId} `,"NETWORK_ERROR",{event:"changed"})),e.clone()}async getFeeData(){const t=await this.getNetwork(),e=async()=>{const{_block:s,gasPrice:i}=await Rt({_block:I(this,oi,Ga).call(this,"latest",!1),gasPrice:(async()=>{try{const u=await I(this,Vt,ce).call(this,{method:"getGasPrice"});return L(u,"%response")}catch{}return null})()});let o=null,a=null;const c=this._wrapBlock(s,t);return c&&c.baseFeePerGas&&(a=BigInt("1000000000"),o=c.baseFeePerGas*Kp+a),new ll(i,o,a)},n=t.getPlugin("org.ethers.plugins.network.FetchUrlFeeDataPlugin");if(n){const s=new un(n.url),i=await n.processFunc(e,this,s);return new ll(i.gasPrice,i.maxFeePerGas,i.maxPriorityFeePerGas)}return await e()}async estimateGas(t){let e=this._getTransactionRequest(t);return Wi(e)&&(e=await e),L(await I(this,Vt,ce).call(this,{method:"estimateGas",transaction:e}),"%response")}async call(t){const{tx:e,blockTag:n}=await Rt({tx:this._getTransactionRequest(t),blockTag:this._getBlockTag(t.blockTag)});return await I(this,ii,Ma).call(this,I(this,si,La).call(this,e,n,t.enableCcipRead?0:-1))}async getBalance(t,e){return L(await I(this,ar,pi).call(this,{method:"getBalance"},t,e),"%response")}async getTransactionCount(t,e){return J(await I(this,ar,pi).call(this,{method:"getTransactionCount"},t,e),"%response")}async getCode(t,e){return F(await I(this,ar,pi).call(this,{method:"getCode"},t,e))}async getStorage(t,e,n){const s=L(e,"position");return F(await I(this,ar,pi).call(this,{method:"getStorage",position:s},t,n))}async broadcastTransaction(t){const{blockNumber:e,hash:n,network:s}=await Rt({blockNumber:this.getBlockNumber(),hash:this._perform({method:"broadcastTransaction",signedTransaction:t}),network:this.getNetwork()}),i=Li.from(t);if(i.hash!==n)throw new Error("@TODO: the returned hash did not match");return this._wrapTransactionResponse(i,s).replaceableTransaction(e)}async getBlock(t,e){const{network:n,params:s}=await Rt({network:this.getNetwork(),params:I(this,oi,Ga).call(this,t,!!e)});return s==null?null:this._wrapBlock(s,n)}async getTransaction(t){const{network:e,params:n}=await Rt({network:this.getNetwork(),params:I(this,Vt,ce).call(this,{method:"getTransaction",hash:t})});return n==null?null:this._wrapTransactionResponse(n,e)}async getTransactionReceipt(t){const{network:e,params:n}=await Rt({network:this.getNetwork(),params:I(this,Vt,ce).call(this,{method:"getTransactionReceipt",hash:t})});if(n==null)return null;if(n.gasPrice==null&&n.effectiveGasPrice==null){const s=await I(this,Vt,ce).call(this,{method:"getTransaction",hash:t});if(s==null)throw new Error("report this; could not find tx or effectiveGasPrice");n.effectiveGasPrice=s.gasPrice}return this._wrapTransactionReceipt(n,e)}async getTransactionResult(t){const{result:e}=await Rt({network:this.getNetwork(),result:I(this,Vt,ce).call(this,{method:"getTransactionResult",hash:t})});return e==null?null:F(e)}async getLogs(t){let e=this._getFilter(t);Wi(e)&&(e=await e);const{network:n,params:s}=await Rt({network:this.getNetwork(),params:I(this,Vt,ce).call(this,{method:"getLogs",filter:e})});return s.map(i=>this._wrapLog(i,n))}_getProvider(t){P(!1,"provider cannot connect to target network","UNSUPPORTED_OPERATION",{operation:"_getProvider()"})}async getResolver(t){return await ji.fromName(this,t)}async getAvatar(t){const e=await this.getResolver(t);return e?await e.getAvatar():null}async resolveName(t){const e=await this.getResolver(t);return e?await e.getAddress():null}async lookupAddress(t){t=Y(t);const e=ta(t.substring(2).toLowerCase()+".addr.reverse");try{const n=await ji.getEnsAddress(this),i=await new gn(n,["function resolver(bytes32) view returns (address)"],this).resolver(e);if(i==null||i===_o)return null;const a=await new gn(i,["function name(bytes32) view returns (string)"],this).name(e);return await this.resolveName(a)!==t?null:a}catch(n){if(Xt(n,"BAD_DATA")&&n.value==="0x"||Xt(n,"CALL_EXCEPTION"))return null;throw n}return null}async waitForTransaction(t,e,n){const s=e??1;return s===0?this.getTransactionReceipt(t):new Promise(async(i,o)=>{let a=null;const c=async u=>{try{const f=await this.getTransactionReceipt(t);if(f!=null&&u-f.blockNumber+1>=s){i(f),a&&(clearTimeout(a),a=null);return}}catch(f){console.log("EEE",f)}this.once("block",c)};n!=null&&(a=setTimeout(()=>{a!=null&&(a=null,this.off("block",c),o(gt("timeout","TIMEOUT",{reason:"timeout"})))},n)),c(await this.getBlockNumber())})}async waitForBlock(t){P(!1,"not implemented yet","NOT_IMPLEMENTED",{operation:"waitForBlock"})}_clearTimeout(t){const e=l(this,oe).get(t);e&&(e.timer&&clearTimeout(e.timer),l(this,oe).delete(t))}_setTimeout(t,e){e==null&&(e=0);const n=hi(this,ri)._++,s=()=>{l(this,oe).delete(n),t()};if(this.paused)l(this,oe).set(n,{timer:null,func:s,time:e});else{const i=setTimeout(s,e);l(this,oe).set(n,{timer:i,func:s,time:ba()})}return n}_forEachSubscriber(t){for(const e of l(this,Tt).values())t(e.subscriber)}_getSubscriber(t){switch(t.type){case"debug":case"error":case"network":return new Sl(t.type);case"block":{const e=new Jp(this);return e.pollingInterval=this.pollingInterval,e}case"event":return new ma(this,t.filter);case"transaction":return new zp(this,t.hash);case"orphan":return new jp(this,t.filter)}throw new Error(`unsupported event: ${t.type}`)}_recoverSubscriber(t,e){for(const n of l(this,Tt).values())if(n.subscriber===t){n.started&&n.subscriber.stop(),n.subscriber=e,n.started&&e.start(),l(this,Ct)!=null&&e.pause(l(this,Ct));break}}async on(t,e){const n=await I(this,gs,mo).call(this,t);return n.listeners.push({listener:e,once:!1}),n.started||(n.subscriber.start(),n.started=!0,l(this,Ct)!=null&&n.subscriber.pause(l(this,Ct))),this}async once(t,e){const n=await I(this,gs,mo).call(this,t);return n.listeners.push({listener:e,once:!0}),n.started||(n.subscriber.start(),n.started=!0,l(this,Ct)!=null&&n.subscriber.pause(l(this,Ct))),this}async emit(t,...e){const n=await I(this,cr,gi).call(this,t,e);if(!n||n.listeners.length===0)return!1;const s=n.listeners.length;return n.listeners=n.listeners.filter(({listener:i,once:o})=>{const a=new tc(this,o?null:i,t);try{i.call(this,...e,a)}catch{}return!o}),n.listeners.length===0&&(n.started&&n.subscriber.stop(),l(this,Tt).delete(n.tag)),s>0}async listenerCount(t){if(t){const n=await I(this,cr,gi).call(this,t);return n?n.listeners.length:0}let e=0;for(const{listeners:n}of l(this,Tt).values())e+=n.length;return e}async listeners(t){if(t){const n=await I(this,cr,gi).call(this,t);return n?n.listeners.map(({listener:s})=>s):[]}let e=[];for(const{listeners:n}of l(this,Tt).values())e=e.concat(n.map(({listener:s})=>s));return e}async off(t,e){const n=await I(this,cr,gi).call(this,t);if(!n)return this;if(e){const s=n.listeners.map(({listener:i})=>i).indexOf(e);s>=0&&n.listeners.splice(s,1)}return(!e||n.listeners.length===0)&&(n.started&&n.subscriber.stop(),l(this,Tt).delete(n.tag)),this}async removeAllListeners(t){if(t){const{tag:e,started:n,subscriber:s}=await I(this,gs,mo).call(this,t);n&&s.stop(),l(this,Tt).delete(e)}else for(const[e,{started:n,subscriber:s}]of l(this,Tt))n&&s.stop(),l(this,Tt).delete(e);return this}async addListener(t,e){return await this.on(t,e)}async removeListener(t,e){return this.off(t,e)}get destroyed(){return l(this,hs)}destroy(){this.removeAllListeners();for(const t of l(this,oe).keys())this._clearTimeout(t);d(this,hs,!0)}get paused(){return l(this,Ct)!=null}set paused(t){!!t!==this.paused&&(this.paused?this.resume():this.pause(!1))}pause(t){if(d(this,tn,-1),l(this,Ct)!=null){if(l(this,Ct)==!!t)return;P(!1,"cannot change pause type; resume first","UNSUPPORTED_OPERATION",{operation:"pause"})}this._forEachSubscriber(e=>e.pause(t)),d(this,Ct,!!t);for(const e of l(this,oe).values())e.timer&&clearTimeout(e.timer),e.time=ba()-e.time}resume(){if(l(this,Ct)!=null){this._forEachSubscriber(t=>t.resume()),d(this,Ct,null);for(const t of l(this,oe).values()){let e=t.time;e<0&&(e=0),t.time=ba(),setTimeout(t.func,e)}}}}Tt=new WeakMap,On=new WeakMap,Ct=new WeakMap,hs=new WeakMap,Zt=new WeakMap,or=new WeakMap,In=new WeakMap,tn=new WeakMap,ri=new WeakMap,oe=new WeakMap,ds=new WeakMap,ps=new WeakMap,Vt=new WeakSet,ce=async function(t){const e=l(this,ps).cacheTimeout;if(e<0)return await this._perform(t);const n=Yi(t.method,t);let s=l(this,In).get(n);return s||(s=this._perform(t),l(this,In).set(n,s),setTimeout(()=>{l(this,In).get(n)===s&&l(this,In).delete(n)},e)),await s},si=new WeakSet,La=async function(t,e,n){P(n<Wp,"CCIP read exceeded maximum redirections","OFFCHAIN_FAULT",{reason:"TOO_MANY_REDIRECTS",transaction:Object.assign({},t,{blockTag:e,enableCcipRead:!0})});const s=Hi(t);try{return F(await this._perform({method:"call",transaction:s,blockTag:e}))}catch(i){if(!this.disableCcipRead&&Ao(i)&&i.data&&n>=0&&e==="latest"&&s.to!=null&&ut(i.data,0,4)==="0x556f1830"){const o=i.data,a=await St(s.to,this);let c;try{c=ng(ut(i.data,4))}catch(h){P(!1,h.message,"OFFCHAIN_FAULT",{reason:"BAD_DATA",transaction:s,info:{data:o}})}P(c.sender.toLowerCase()===a.toLowerCase(),"CCIP Read sender mismatch","CALL_EXCEPTION",{action:"call",data:o,reason:"OffchainLookup",transaction:s,invocation:null,revert:{signature:"OffchainLookup(address,string[],bytes,bytes4,bytes)",name:"OffchainLookup",args:c.errorArgs}});const u=await this.ccipReadFetch(s,c.calldata,c.urls);P(u!=null,"CCIP Read failed to fetch data","OFFCHAIN_FAULT",{reason:"FETCH_FAILED",transaction:s,info:{data:i.data,errorArgs:c.errorArgs}});const f={to:a,data:yt([c.selector,eg([u,c.extraData])])};this.emit("debug",{action:"sendCcipReadCall",transaction:f});try{const h=await I(this,si,La).call(this,f,e,n+1);return this.emit("debug",{action:"receiveCcipReadCallResult",transaction:Object.assign({},f),result:h}),h}catch(h){throw this.emit("debug",{action:"receiveCcipReadCallError",transaction:Object.assign({},f),error:h}),h}}throw i}},ii=new WeakSet,Ma=async function(t){const{value:e}=await Rt({network:this.getNetwork(),value:t});return e},ar=new WeakSet,pi=async function(t,e,n){let s=this._getAddress(e),i=this._getBlockTag(n);return(typeof s!="string"||typeof i!="string")&&([s,i]=await Promise.all([s,i])),await I(this,ii,Ma).call(this,I(this,Vt,ce).call(this,Object.assign(t,{address:s,blockTag:i})))},oi=new WeakSet,Ga=async function(t,e){if(it(t,32))return await I(this,Vt,ce).call(this,{method:"getBlock",blockHash:t,includeTransactions:e});let n=this._getBlockTag(t);return typeof n!="string"&&(n=await n),await I(this,Vt,ce).call(this,{method:"getBlock",blockTag:n,includeTransactions:e})},cr=new WeakSet,gi=async function(t,e){let n=await Aa(t,this);return n.type==="event"&&e&&e.length>0&&e[0].removed===!0&&(n=await Aa({orphan:"drop-log",log:e[0]},this)),l(this,Tt).get(n.tag)||null},gs=new WeakSet,mo=async function(t){const e=await Aa(t,this),n=e.tag;let s=l(this,Tt).get(n);return s||(s={subscriber:this._getSubscriber(e),tag:n,addressableMap:new WeakMap,nameMap:new Map,started:!1,listeners:[]},l(this,Tt).set(n,s)),s};function qp(r,t){try{const e=Ea(r,t);if(e)return Eo(e)}catch{}return null}function Ea(r,t){if(r==="0x")return null;try{const e=J(ut(r,t,t+32)),n=J(ut(r,e,e+32));return ut(r,e+32,e+32+n)}catch{}return null}function Ul(r){const t=zt(r);if(t.length>32)throw new Error("internal; should not happen");const e=new Uint8Array(32);return e.set(t,32-t.length),e}function $p(r){if(r.length%32===0)return r;const t=new Uint8Array(Math.ceil(r.length/32)*32);return t.set(r),t}const tg=new Uint8Array([]);function eg(r){const t=[];let e=0;for(let n=0;n<r.length;n++)t.push(tg),e+=32;for(let n=0;n<r.length;n++){const s=X(r[n]);t[n]=Ul(e),t.push(Ul(s.length)),t.push($p(s)),e+=32+Math.ceil(s.length/32)*32}return yt(t)}const Dl="0x0000000000000000000000000000000000000000000000000000000000000000";function ng(r){const t={sender:"",urls:[],calldata:"",selector:"",extraData:"",errorArgs:[]};P(gr(r)>=5*32,"insufficient OffchainLookup data","OFFCHAIN_FAULT",{reason:"insufficient OffchainLookup data"});const e=ut(r,0,32);P(ut(e,0,12)===ut(Dl,0,12),"corrupt OffchainLookup sender","OFFCHAIN_FAULT",{reason:"corrupt OffchainLookup sender"}),t.sender=ut(e,12);try{const n=[],s=J(ut(r,32,64)),i=J(ut(r,s,s+32)),o=ut(r,s+32);for(let a=0;a<i;a++){const c=qp(o,a*32);if(c==null)throw new Error("abort");n.push(c)}t.urls=n}catch{P(!1,"corrupt OffchainLookup urls","OFFCHAIN_FAULT",{reason:"corrupt OffchainLookup urls"})}try{const n=Ea(r,64);if(n==null)throw new Error("abort");t.calldata=n}catch{P(!1,"corrupt OffchainLookup calldata","OFFCHAIN_FAULT",{reason:"corrupt OffchainLookup calldata"})}P(ut(r,100,128)===ut(Dl,0,28),"corrupt OffchainLookup callbaackSelector","OFFCHAIN_FAULT",{reason:"corrupt OffchainLookup callbaackSelector"}),t.selector=ut(r,96,100);try{const n=Ea(r,128);if(n==null)throw new Error("abort");t.extraData=n}catch{P(!1,"corrupt OffchainLookup extraData","OFFCHAIN_FAULT",{reason:"corrupt OffchainLookup extraData"})}return t.errorArgs="sender,urls,calldata,selector,extraData".split(/,/).map(n=>t[n]),t}function Ir(r,t){if(r.provider)return r.provider;P(!1,"missing provider","UNSUPPORTED_OPERATION",{operation:t})}async function Fl(r,t){let e=Hi(t);if(e.to!=null&&(e.to=St(e.to,r)),e.from!=null){const n=e.from;e.from=Promise.all([r.getAddress(),St(n,r)]).then(([s,i])=>(y(s.toLowerCase()===i.toLowerCase(),"transaction from mismatch","tx.from",i),s))}else e.from=r.getAddress();return await Rt(e)}class rg{constructor(t){A(this,"provider");M(this,{provider:t||null})}async getNonce(t){return Ir(this,"getTransactionCount").getTransactionCount(await this.getAddress(),t)}async populateCall(t){return await Fl(this,t)}async populateTransaction(t){const e=Ir(this,"populateTransaction"),n=await Fl(this,t);n.nonce==null&&(n.nonce=await this.getNonce("pending")),n.gasLimit==null&&(n.gasLimit=await this.estimateGas(n));const s=await this.provider.getNetwork();if(n.chainId!=null){const o=L(n.chainId);y(o===s.chainId,"transaction chainId mismatch","tx.chainId",t.chainId)}else n.chainId=s.chainId;const i=n.maxFeePerGas!=null||n.maxPriorityFeePerGas!=null;if(n.gasPrice!=null&&(n.type===2||i)?y(!1,"eip-1559 transaction do not support gasPrice","tx",t):(n.type===0||n.type===1)&&i&&y(!1,"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas","tx",t),(n.type===2||n.type==null)&&n.maxFeePerGas!=null&&n.maxPriorityFeePerGas!=null)n.type=2;else if(n.type===0||n.type===1){const o=await e.getFeeData();P(o.gasPrice!=null,"network does not support gasPrice","UNSUPPORTED_OPERATION",{operation:"getGasPrice"}),n.gasPrice==null&&(n.gasPrice=o.gasPrice)}else{const o=await e.getFeeData();if(n.type==null)if(o.maxFeePerGas!=null&&o.maxPriorityFeePerGas!=null)if(n.type=2,n.gasPrice!=null){const a=n.gasPrice;delete n.gasPrice,n.maxFeePerGas=a,n.maxPriorityFeePerGas=a}else n.maxFeePerGas==null&&(n.maxFeePerGas=o.maxFeePerGas),n.maxPriorityFeePerGas==null&&(n.maxPriorityFeePerGas=o.maxPriorityFeePerGas);else o.gasPrice!=null?(P(!i,"network does not support EIP-1559","UNSUPPORTED_OPERATION",{operation:"populateTransaction"}),n.gasPrice==null&&(n.gasPrice=o.gasPrice),n.type=0):P(!1,"failed to get consistent fee data","UNSUPPORTED_OPERATION",{operation:"signer.getFeeData"});else n.type===2&&(n.maxFeePerGas==null&&(n.maxFeePerGas=o.maxFeePerGas),n.maxPriorityFeePerGas==null&&(n.maxPriorityFeePerGas=o.maxPriorityFeePerGas))}return await Rt(n)}async estimateGas(t){return Ir(this,"estimateGas").estimateGas(await this.populateCall(t))}async call(t){return Ir(this,"call").call(await this.populateCall(t))}async resolveName(t){return await Ir(this,"resolveName").resolveName(t)}async sendTransaction(t){const e=Ir(this,"sendTransaction"),n=await this.populateTransaction(t);delete n.from;const s=Li.from(n);return await e.broadcastTransaction(await this.signTransaction(s))}}function sg(r){return JSON.parse(JSON.stringify(r))}class Ll{constructor(t){b(this,ai);b(this,ci);b(this,Jt,void 0);b(this,Re,void 0);b(this,ur,void 0);b(this,Bn,void 0);b(this,lr,void 0);b(this,ys,void 0);d(this,Jt,t),d(this,Re,null),d(this,ur,I(this,ai,Qa).bind(this)),d(this,Bn,!1),d(this,lr,null),d(this,ys,!1)}_subscribe(t){throw new Error("subclasses must override this")}_emitResults(t,e){throw new Error("subclasses must override this")}_recover(t){throw new Error("subclasses must override this")}start(){l(this,Bn)||(d(this,Bn,!0),I(this,ai,Qa).call(this,-2))}stop(){l(this,Bn)&&(d(this,Bn,!1),d(this,ys,!0),I(this,ci,Ha).call(this),l(this,Jt).off("block",l(this,ur)))}pause(t){t&&I(this,ci,Ha).call(this),l(this,Jt).off("block",l(this,ur))}resume(){this.start()}}Jt=new WeakMap,Re=new WeakMap,ur=new WeakMap,Bn=new WeakMap,lr=new WeakMap,ys=new WeakMap,ai=new WeakSet,Qa=async function(t){try{l(this,Re)==null&&d(this,Re,this._subscribe(l(this,Jt)));let e=null;try{e=await l(this,Re)}catch(i){if(!Xt(i,"UNSUPPORTED_OPERATION")||i.operation!=="eth_newFilter")throw i}if(e==null){d(this,Re,null),l(this,Jt)._recoverSubscriber(this,this._recover(l(this,Jt)));return}const n=await l(this,Jt).getNetwork();if(l(this,lr)||d(this,lr,n),l(this,lr).chainId!==n.chainId)throw new Error("chaid changed");if(l(this,ys))return;const s=await l(this,Jt).send("eth_getFilterChanges",[e]);await this._emitResults(l(this,Jt),s)}catch(e){console.log("@TODO",e)}l(this,Jt).once("block",l(this,ur))},ci=new WeakSet,Ha=function(){const t=l(this,Re);t&&(d(this,Re,null),t.then(e=>{l(this,Jt).send("eth_uninstallFilter",[e])}))};class ig extends Ll{constructor(e,n){super(e);b(this,fr,void 0);d(this,fr,sg(n))}_recover(e){return new ma(e,l(this,fr))}async _subscribe(e){return await e.send("eth_newFilter",[l(this,fr)])}async _emitResults(e,n){for(const s of n)e.emit(l(this,fr),e._wrapLog(s,e._network))}}fr=new WeakMap;class og extends Ll{async _subscribe(t){return await t.send("eth_newPendingTransactionFilter",[])}async _emitResults(t,e){for(const n of e)t.emit("pending",n)}}const ag="bigint,boolean,function,number,string,symbol".split(/,/g);function Zi(r){if(r==null||ag.indexOf(typeof r)>=0||typeof r.getAddress=="function")return r;if(Array.isArray(r))return r.map(Zi);if(typeof r=="object")return Object.keys(r).reduce((t,e)=>(t[e]=r[e],t),{});throw new Error(`should not happen: ${r} (${typeof r})`)}function cg(r){return new Promise(t=>{setTimeout(t,r)})}function Br(r){return r&&r.toLowerCase()}function Ml(r){return r&&typeof r.pollingInterval=="number"}const ug={polling:!1,staticNetwork:null,batchStallTime:10,batchMaxSize:1<<20,batchMaxCount:100,cacheTimeout:250,pollingInterval:4e3};class va extends rg{constructor(e,n){super(e);A(this,"address");n=Y(n),M(this,{address:n})}connect(e){P(!1,"cannot reconnect JsonRpcSigner","UNSUPPORTED_OPERATION",{operation:"signer.connect"})}async getAddress(){return this.address}async populateTransaction(e){return await this.populateCall(e)}async sendUncheckedTransaction(e){const n=Zi(e),s=[];if(n.from){const o=n.from;s.push((async()=>{const a=await St(o,this.provider);y(a!=null&&a.toLowerCase()===this.address.toLowerCase(),"from address mismatch","transaction",e),n.from=a})())}else n.from=this.address;if(n.gasLimit==null&&s.push((async()=>{n.gasLimit=await this.provider.estimateGas({...n,from:this.address})})()),n.to!=null){const o=n.to;s.push((async()=>{n.to=await St(o,this.provider)})())}s.length&&await Promise.all(s);const i=this.provider.getRpcTransaction(n);return this.provider.send("eth_sendTransaction",[i])}async sendTransaction(e){const n=await this.provider.getBlockNumber(),s=await this.sendUncheckedTransaction(e);return await new Promise((i,o)=>{const a=[1e3,100],c=async()=>{const u=await this.provider.getTransaction(s);if(u!=null){i(u.replaceableTransaction(n));return}this.provider._setTimeout(()=>{c()},a.pop()||4e3)};c()})}async signTransaction(e){const n=Zi(e);if(n.from){const i=await St(n.from,this.provider);y(i!=null&&i.toLowerCase()===this.address.toLowerCase(),"from address mismatch","transaction",e),n.from=i}else n.from=this.address;const s=this.provider.getRpcTransaction(n);return await this.provider.send("eth_signTransaction",[s])}async signMessage(e){const n=typeof e=="string"?Ue(e):e;return await this.provider.send("personal_sign",[F(n),this.address.toLowerCase()])}async signTypedData(e,n,s){const i=Zi(s),o=await Mi.resolveNames(e,n,i,async a=>{const c=await St(a);return y(c!=null,"TypedData does not support null address","value",a),c});return await this.provider.send("eth_signTypedData_v4",[this.address.toLowerCase(),JSON.stringify(Mi.getPayload(o.domain,n,o.value))])}async unlock(e){return this.provider.send("personal_unlockAccount",[this.address.toLowerCase(),e,null])}async _legacySignMessage(e){const n=typeof e=="string"?Ue(e):e;return await this.provider.send("eth_sign",[this.address.toLowerCase(),F(n)])}}class lg extends Xp{constructor(e,n){super(e,n);b(this,ui);b(this,hr,void 0);b(this,ms,void 0);b(this,en,void 0);b(this,ke,void 0);b(this,Ae,void 0);b(this,nn,void 0);d(this,ms,1),d(this,hr,Object.assign({},ug,n||{})),d(this,en,[]),d(this,ke,null),d(this,nn,null);{let i=null;const o=new Promise(a=>{i=a});d(this,Ae,{promise:o,resolve:i})}const s=this._getOption("staticNetwork");s&&(y(e==null||s.matches(e),"staticNetwork MUST match network object","options",n),d(this,nn,s))}_getOption(e){return l(this,hr)[e]}get _network(){return P(l(this,nn),"network is not available yet","NETWORK_ERROR"),l(this,nn)}async _perform(e){if(e.method==="call"||e.method==="estimateGas"){let s=e.transaction;if(s&&s.type!=null&&L(s.type)&&s.maxFeePerGas==null&&s.maxPriorityFeePerGas==null){const i=await this.getFeeData();i.maxFeePerGas==null&&i.maxPriorityFeePerGas==null&&(e=Object.assign({},e,{transaction:Object.assign({},s,{type:void 0})}))}}const n=this.getRpcRequest(e);return n!=null?await this.send(n.method,n.args):super._perform(e)}async _detectNetwork(){const e=this._getOption("staticNetwork");if(e)return e;if(this.ready)return _e.from(L(await this.send("eth_chainId",[])));const n={id:hi(this,ms)._++,method:"eth_chainId",params:[],jsonrpc:"2.0"};this.emit("debug",{action:"sendRpcPayload",payload:n});let s;try{s=(await this._send(n))[0]}catch(i){throw this.emit("debug",{action:"receiveRpcError",error:i}),i}if(this.emit("debug",{action:"receiveRpcResult",result:s}),"result"in s)return _e.from(L(s.result));throw this.getRpcError(n,s)}_start(){l(this,Ae)==null||l(this,Ae).resolve==null||(l(this,Ae).resolve(),d(this,Ae,null),(async()=>{for(;l(this,nn)==null&&!this.destroyed;)try{d(this,nn,await this._detectNetwork())}catch(e){if(this.destroyed)break;console.log("JsonRpcProvider failed to detect network and cannot start up; retry in 1s (perhaps the URL is wrong or the node is not started)"),this.emit("error",gt("failed to bootstrap network detection","NETWORK_ERROR",{event:"initial-network-discovery",info:{error:e}})),await cg(1e3)}I(this,ui,_a).call(this)})())}async _waitUntilReady(){if(l(this,Ae)!=null)return await l(this,Ae).promise}_getSubscriber(e){return e.type==="pending"?new og(this):e.type==="event"?this._getOption("polling")?new ma(this,e.filter):new ig(this,e.filter):e.type==="orphan"&&e.filter.orphan==="drop-log"?new Sl("orphan"):super._getSubscriber(e)}get ready(){return l(this,Ae)==null}getRpcTransaction(e){const n={};return["chainId","gasLimit","gasPrice","type","maxFeePerGas","maxPriorityFeePerGas","nonce","value"].forEach(s=>{if(e[s]==null)return;let i=s;s==="gasLimit"&&(i="gas"),n[i]=mr(L(e[s],`tx.${s}`))}),["from","to","data"].forEach(s=>{e[s]!=null&&(n[s]=F(e[s]))}),e.accessList&&(n.accessList=Hn(e.accessList)),n}getRpcRequest(e){switch(e.method){case"chainId":return{method:"eth_chainId",args:[]};case"getBlockNumber":return{method:"eth_blockNumber",args:[]};case"getGasPrice":return{method:"eth_gasPrice",args:[]};case"getBalance":return{method:"eth_getBalance",args:[Br(e.address),e.blockTag]};case"getTransactionCount":return{method:"eth_getTransactionCount",args:[Br(e.address),e.blockTag]};case"getCode":return{method:"eth_getCode",args:[Br(e.address),e.blockTag]};case"getStorage":return{method:"eth_getStorageAt",args:[Br(e.address),"0x"+e.position.toString(16),e.blockTag]};case"broadcastTransaction":return{method:"eth_sendRawTransaction",args:[e.signedTransaction]};case"getBlock":if("blockTag"in e)return{method:"eth_getBlockByNumber",args:[e.blockTag,!!e.includeTransactions]};if("blockHash"in e)return{method:"eth_getBlockByHash",args:[e.blockHash,!!e.includeTransactions]};break;case"getTransaction":return{method:"eth_getTransactionByHash",args:[e.hash]};case"getTransactionReceipt":return{method:"eth_getTransactionReceipt",args:[e.hash]};case"call":return{method:"eth_call",args:[this.getRpcTransaction(e.transaction),e.blockTag]};case"estimateGas":return{method:"eth_estimateGas",args:[this.getRpcTransaction(e.transaction)]};case"getLogs":return e.filter&&e.filter.address!=null&&(Array.isArray(e.filter.address)?e.filter.address=e.filter.address.map(Br):e.filter.address=Br(e.filter.address)),{method:"eth_getLogs",args:[e.filter]}}return null}getRpcError(e,n){const{method:s}=e,{error:i}=n;if(s==="eth_estimateGas"&&i.message){const c=i.message;if(!c.match(/revert/i)&&c.match(/insufficient funds/i))return gt("insufficient funds","INSUFFICIENT_FUNDS",{transaction:e.params[0],info:{payload:e,error:i}})}if(s==="eth_call"||s==="eth_estimateGas"){const c=xa(i),u=Ms.getBuiltinCallException(s==="eth_call"?"call":"estimateGas",e.params[0],c?c.data:null);return u.info={error:i,payload:e},u}const o=JSON.stringify(hg(i));if(typeof i.message=="string"&&i.message.match(/user denied|ethers-user-denied/i))return gt("user rejected action","ACTION_REJECTED",{action:{eth_sign:"signMessage",personal_sign:"signMessage",eth_signTypedData_v4:"signTypedData",eth_signTransaction:"signTransaction",eth_sendTransaction:"sendTransaction",eth_requestAccounts:"requestAccess",wallet_requestAccounts:"requestAccess"}[s]||"unknown",reason:"rejected",info:{payload:e,error:i}});if(s==="eth_sendRawTransaction"||s==="eth_sendTransaction"){const c=e.params[0];if(o.match(/insufficient funds|base fee exceeds gas limit/i))return gt("insufficient funds for intrinsic transaction cost","INSUFFICIENT_FUNDS",{transaction:c,info:{error:i}});if(o.match(/nonce/i)&&o.match(/too low/i))return gt("nonce has already been used","NONCE_EXPIRED",{transaction:c,info:{error:i}});if(o.match(/replacement transaction/i)&&o.match(/underpriced/i))return gt("replacement fee too low","REPLACEMENT_UNDERPRICED",{transaction:c,info:{error:i}});if(o.match(/only replay-protected/i))return gt("legacy pre-eip-155 transactions not supported","UNSUPPORTED_OPERATION",{operation:s,info:{transaction:c,info:{error:i}}})}let a=!!o.match(/the method .* does not exist/i);return a||i&&i.details&&i.details.startsWith("Unauthorized method:")&&(a=!0),a?gt("unsupported operation","UNSUPPORTED_OPERATION",{operation:e.method,info:{error:i,payload:e}}):gt("could not coalesce error","UNKNOWN_ERROR",{error:i,payload:e})}send(e,n){if(this.destroyed)return Promise.reject(gt("provider destroyed; cancelled request","UNSUPPORTED_OPERATION",{operation:e}));const s=hi(this,ms)._++,i=new Promise((o,a)=>{l(this,en).push({resolve:o,reject:a,payload:{method:e,params:n,id:s,jsonrpc:"2.0"}})});return I(this,ui,_a).call(this),i}async getSigner(e){e==null&&(e=0);const n=this.send("eth_accounts",[]);if(typeof e=="number"){const i=await n;if(e>=i.length)throw new Error("no such account");return new va(this,i[e])}const{accounts:s}=await Rt({network:this.getNetwork(),accounts:n});e=Y(e);for(const i of s)if(Y(i)===e)return new va(this,e);throw new Error("invalid account")}async listAccounts(){return(await this.send("eth_accounts",[])).map(n=>new va(this,n))}destroy(){l(this,ke)&&(clearTimeout(l(this,ke)),d(this,ke,null));for(const{payload:e,reject:n}of l(this,en))n(gt("provider destroyed; cancelled request","UNSUPPORTED_OPERATION",{operation:e.method}));d(this,en,[]),super.destroy()}}hr=new WeakMap,ms=new WeakMap,en=new WeakMap,ke=new WeakMap,Ae=new WeakMap,nn=new WeakMap,ui=new WeakSet,_a=function(){if(l(this,ke))return;const e=this._getOption("batchMaxCount")===1?0:this._getOption("batchStallTime");d(this,ke,setTimeout(()=>{d(this,ke,null);const n=l(this,en);for(d(this,en,[]);n.length;){const s=[n.shift()];for(;n.length&&s.length!==l(this,hr).batchMaxCount;)if(s.push(n.shift()),JSON.stringify(s.map(o=>o.payload)).length>l(this,hr).batchMaxSize){n.unshift(s.pop());break}(async()=>{const i=s.length===1?s[0].payload:s.map(o=>o.payload);this.emit("debug",{action:"sendRpcPayload",payload:i});try{const o=await this._send(i);this.emit("debug",{action:"receiveRpcResult",result:o});for(const{resolve:a,reject:c,payload:u}of s){if(this.destroyed){c(gt("provider destroyed; cancelled request","UNSUPPORTED_OPERATION",{operation:u.method}));continue}const f=o.filter(h=>h.id===u.id)[0];if(f==null){const h=gt("missing response for request","BAD_DATA",{value:o,info:{payload:u}});this.emit("error",h),c(h);continue}if("error"in f){c(this.getRpcError(u,f));continue}a(f.result)}}catch(o){this.emit("debug",{action:"receiveRpcError",error:o});for(const{reject:a}of s)a(o)}})()}},e))};class fg extends lg{constructor(e,n){super(e,n);b(this,Rn,void 0);d(this,Rn,4e3)}_getSubscriber(e){const n=super._getSubscriber(e);return Ml(n)&&(n.pollingInterval=l(this,Rn)),n}get pollingInterval(){return l(this,Rn)}set pollingInterval(e){if(!Number.isInteger(e)||e<0)throw new Error("invalid interval");d(this,Rn,e),this._forEachSubscriber(n=>{Ml(n)&&(n.pollingInterval=l(this,Rn))})}}Rn=new WeakMap;function xa(r){if(r==null)return null;if(typeof r.message=="string"&&r.message.match(/revert/i)&&it(r.data))return{message:r.message,data:r.data};if(typeof r=="object"){for(const t in r){const e=xa(r[t]);if(e)return e}return null}if(typeof r=="string")try{return xa(JSON.parse(r))}catch{}return null}function Pa(r,t){if(r!=null){if(typeof r.message=="string"&&t.push(r.message),typeof r=="object")for(const e in r)Pa(r[e],t);if(typeof r=="string")try{return Pa(JSON.parse(r),t)}catch{}}}function hg(r){const t=[];return Pa(r,t),t}class dg extends fg{constructor(e,n){super(n,{batchMaxCount:1});b(this,ws,void 0);d(this,ws,async(s,i)=>{const o={method:s,params:i};this.emit("debug",{action:"sendEip1193Request",payload:o});try{const a=await e.request(o);return this.emit("debug",{action:"receiveEip1193Result",result:a}),a}catch(a){const c=new Error(a.message);throw c.code=a.code,c.data=a.data,c.payload=o,this.emit("debug",{action:"receiveEip1193Error",error:c}),c}})}async send(e,n){return await this._start(),await super.send(e,n)}async _send(e){y(!Array.isArray(e),"EIP-1193 does not support batch request","payload",e);try{const n=await l(this,ws).call(this,e.method,e.params||[]);return[{id:e.id,result:n}]}catch(n){return[{id:e.id,error:{code:n.code,data:n.data,message:n.message}}]}}getRpcError(e,n){switch(n=JSON.parse(JSON.stringify(n)),n.error.code||-1){case 4001:n.error.message=`ethers-user-denied: ${n.error.message}`;break;case 4200:n.error.message=`ethers-unsupported: ${n.error.message}`;break}return super.getRpcError(e,n)}async hasSigner(e){e==null&&(e=0);const n=await this.send("eth_accounts",[]);return typeof e=="number"?n.length>e:(e=e.toLowerCase(),n.filter(s=>s.toLowerCase()===e).length!==0)}async getSigner(e){if(e==null&&(e=0),!await this.hasSigner(e))try{await l(this,ws).call(this,"eth_requestAccounts",[])}catch(n){const s=n.payload;throw this.getRpcError(s,{id:s.id,error:n})}return await super.getSigner(e)}}ws=new WeakMap;const Xi=new dg(window.ethereum);let qi,$i;async function Na(){return qi?Promise.resolve(qi):$i||($i=new Promise(async r=>{await window.ethereum.enable(),qi=await Xi.getSigner(),r(qi)}),$i)}function pg({activating:r,activationFunctions:t,selectedFunctionId:e,balance:n}){return console.log(t,e),rt.jsxs(rt.Fragment,{children:[rt.jsx("div",{className:r==="unactivated"?"opacity-100":"opacity-0",children:rt.jsxs("p",{className:"text-sm text-center",children:[t[e].context,rt.jsx("br",{}),rt.jsx("br",{}),t[e].description,rt.jsx("br",{}),rt.jsx("br",{}),"Reward:"," ",String(t[e].multiplier*t[e].weightInWatt)," ","Verification WATT"]})}),r==="activating"&&rt.jsx("img",{src:"./assets/loading.png",alt:"Loading...",className:"absolute top-16 w-20 h-20"}),r==="activated"&&rt.jsxs("div",{children:["activated $",n," WATTS"]})]})}const gg=[{inputs:[{internalType:"address",name:"_poC",type:"address"}],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"activationFunctionId",type:"uint256"}],name:"ActivationFunctionApproved",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"activationFunctionId",type:"uint256"},{indexed:!1,internalType:"address",name:"developer",type:"address"},{indexed:!1,internalType:"string",name:"context",type:"string"}],name:"ActivationFunctionRegistered",type:"event"},{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"addr",type:"address"}],name:"DebugAddress",type:"event"},{inputs:[{internalType:"uint256",name:"activationFunctionId",type:"uint256"}],name:"activate",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"activationFunctions",outputs:[{internalType:"address",name:"issuer",type:"address"},{internalType:"bool",name:"approved",type:"bool"},{internalType:"enum NewcoinEncoder.WattType",name:"wattType",type:"uint8"},{internalType:"uint256",name:"multiplier",type:"uint256"},{internalType:"bytes32",name:"contextId",type:"bytes32"},{internalType:"string",name:"context",type:"string"},{internalType:"string",name:"description",type:"string"},{internalType:"address",name:"addrss",type:"address"},{internalType:"uint256",name:"weightInWatt",type:"uint256"},{internalType:"bool",name:"isAsync",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"activationFunctionId",type:"uint256"}],name:"approveActivationFunction",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"activationFunctionId",type:"uint256"}],name:"canMint",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"getApprovedActivationFunctions",outputs:[{components:[{internalType:"address",name:"issuer",type:"address"},{internalType:"bool",name:"approved",type:"bool"},{internalType:"enum NewcoinEncoder.WattType",name:"wattType",type:"uint8"},{internalType:"uint256",name:"multiplier",type:"uint256"},{internalType:"bytes32",name:"contextId",type:"bytes32"},{internalType:"string",name:"context",type:"string"},{internalType:"string",name:"description",type:"string"},{internalType:"address",name:"addrss",type:"address"},{internalType:"uint256",name:"weightInWatt",type:"uint256"},{internalType:"bool",name:"isAsync",type:"bool"}],internalType:"struct NewcoinEncoder.ActivationFunction[]",name:"",type:"tuple[]"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"bool",name:"conditionMet",type:"bool"},{internalType:"uint256",name:"activationFunctionId",type:"uint256"}],name:"oracleResponse",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"poC",outputs:[{internalType:"contract EnergyMinterMock",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"enum NewcoinEncoder.WattType",name:"_wattType",type:"uint8"},{internalType:"uint256",name:"_multiplier",type:"uint256"},{internalType:"bytes32",name:"_contextId",type:"bytes32"},{internalType:"string",name:"_context",type:"string"},{internalType:"string",name:"_description",type:"string"},{internalType:"address",name:"_addrss",type:"address"},{internalType:"uint256",name:"_weightInWatt",type:"uint256"},{internalType:"bool",name:"_isAsync",type:"bool"}],name:"registerActivationFunction",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function"}],yg="0x84387e3ad062D683BFc7eD2Eeaf2C30B27Bd3d05",Gl=new gn(yg,gg,Xi),mg=[{inputs:[],stateMutability:"nonpayable",type:"constructor"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"id",type:"bytes32"}],name:"ChainlinkCancelled",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"id",type:"bytes32"}],name:"ChainlinkFulfilled",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"bytes32",name:"id",type:"bytes32"}],name:"ChainlinkRequested",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"}],name:"OwnershipTransferRequested",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"}],name:"OwnershipTransferred",type:"event"},{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"requester",type:"address"}],name:"RequestFulfilled",type:"event"},{inputs:[],name:"acceptOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_activationFunctionId",type:"uint256"}],name:"activate",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"requestId",type:"bytes32"},{internalType:"bool",name:"data",type:"bool"}],name:"fulfill",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"getFeeInHundredthsOfLink",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[],name:"getJobId",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},{inputs:[],name:"getOracleAddress",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"passportHolders",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[],name:"request",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"bytes32",name:"",type:"bytes32"}],name:"requesters",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},{inputs:[],name:"response",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"uint256",name:"_feeInHundredthsOfLink",type:"uint256"}],name:"setFeeInHundredthsOfLink",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"uint256",name:"_feeInJuels",type:"uint256"}],name:"setFeeInJuels",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"string",name:"_jobId",type:"string"}],name:"setJobId",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"_oracleAddress",type:"address"}],name:"setOracleAddress",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"to",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[],name:"withdrawLink",outputs:[],stateMutability:"nonpayable",type:"function"}],wg="0xf192Ee5a9fB9AE3A8dee79669CFd2BA8C8441d9c",Ag=new gn(wg,mg,Xi),bg=[{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint8",name:"id",type:"uint8"}],name:"balanceOfEnergy",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOfWatts",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"account",type:"address"},{internalType:"uint8",name:"id",type:"uint8"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"mint",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"uint8",name:"",type:"uint8"}],name:"neuralTokenBalances",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"",type:"address"}],name:"wattBalances",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}],Eg="0xf272Fe62eEdCBCf7221D8451a68a85c3AF4fAcFe",vg=new gn(Eg,bg,Xi);function to(r,t,e){const[n,s]=_.useState(e);return _.useEffect(()=>{let i=!1;const o=r();if(o!=null)return o.then(a=>{i||s(a)}),()=>{i=!0}},t),n}const Ta=({setActivating:r,setBalance:t,selectedFunctionId:e,contractType:n,contractAddress:s})=>{const i=to(Na,[]),o=async c=>{let{selectedFunctionId:u,contractType:f,contractAddress:h}=c||{};f=f||n||"guildAFContract",h=h||s||"";const g=typeof u<"u"?u:e;try{await Ag.connect(i).request(),setTimeout(async()=>{try{await(await Gl.connect(i).activate(g)).wait(),a()}catch(E){console.log("Error during activation: ",E)}},6e4)}catch(w){console.log("Error during request: ",w)}r("activating")},a=async()=>{const c=vg.connect(i);try{const u=await i.getAddress(),f=await c.balanceOfWatts(u);console.log("Balance of Watts: ",f.toString()),t(f.toString()),r("activated")}catch(u){console.log("Error fetching balance: ",u)}};return{activate:o}};function xg({activating:r,setActivating:t,setBalance:e,selectedFunctionId:n,render:s}){const i=to(Na,[]),{activate:o}=Ta({activating:r,setActivating:t,setBalance:e,selectedFunctionId:n}),a=s||(c=>rt.jsx("button",{...c}));return i?rt.jsx(a,{onClick:()=>o(),className:`py-2 px-4 text-white rounded-full w-40 ${r==="activating"?"bg-gray-400":"bg-black"}`,disabled:r==="activating",children:r==="activating"?"Activating":"Activate"}):rt.jsx(rt.Fragment,{children:"Wait..."})}function Pg({activationFunctions:r,setSelectedFunctionId:t,selectedFunctionId:e}){const n=s=>{const i=Number(s.target.value);t(i)};return _.useEffect(()=>{console.log(e)},[e]),rt.jsxs("select",{onChange:n,value:e,className:`py-2 px-4 text-xs text-black rounded-full w-40 border border-black ${e?"bg-gray-200":"bg-white"}`,children:[rt.jsx("option",{value:"",disabled:!0,children:"Select an activation function"}),r.map((s,i)=>rt.jsx("option",{value:i,children:s.context},s.id))]})}const Ql=(r,t)=>{const[e,n]=_.useState("unactivated"),[s,i]=_.useState("0"),[o,a]=_.useState(0),[c,u]=_.useState(!1),[f,h]=_.useState(!1),[g,w]=_.useState(!1),E=()=>u(!0),m=to(async()=>{if(!(c||t))return Promise.resolve();h(!0);const D=await Na();return h(!1),w(!!D),D},[c,t]),v=to(async()=>{if(!m)return;const k=await Gl.connect(m).getApprovedActivationFunctions();return console.log(k),k},[m,r],[])||[],B=rt.jsx(Pg,{selectedFunctionId:o,setSelectedFunctionId:a,activationFunctions:v}),C=rt.jsx(pg,{activating:e,activationFunctions:v,selectedFunctionId:o,balance:s}),H={activating:e,setActivating:n,balance:s,setBalance:i,selectedFunctionId:o},G=rt.jsx(xg,{...H}),{activate:U}=Ta(H);return{activate:U,activationFunctions:v,setActivating:n,activating:e,selectedFunctionId:o,setSelectedFunctionId:a,balance:s,setBalance:i,button:G,panel:C,dropDown:B,connect:E,isConnecting:f,isConnected:g,signer:m}};function Hl(){const{activationFunctions:r,setActivating:t,activating:e,selectedFunctionId:n,setSelectedFunctionId:s,balance:i,setBalance:o,button:a,panel:c,dropDown:u}=Ql("0x84387e3ad062D683BFc7eD2Eeaf2C30B27Bd3d05");return rt.jsx("div",{className:"min-h-screen flex items-center justify-center",children:rt.jsx("div",{className:"relative flex flex-col items-center justify-between pl-2 pr-2 pt-8 pb-8 border border-black w-64 h-96",children:r.length>0&&rt.jsx(rt.Fragment,{children:rt.jsxs(rt.Fragment,{children:[e!="activating"&&u,c,a]})})})})}const Ng=Hl;j.ActivationByContractAddress=Ng,j.default=Hl,j.useActivationFunctions=Ql,j.useButton=Ta,Object.defineProperties(j,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
